# Generated from HiveParser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0186")
        buf.write("\u1084\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\3\2\3\2\3\2\3")
        buf.write("\2\7\2\u0309\n\2\f\2\16\2\u030c\13\2\3\2\7\2\u030f\n\2")
        buf.write("\f\2\16\2\u0312\13\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\5")
        buf.write("\5\u031c\n\5\3\6\3\6\7\6\u0320\n\6\f\6\16\6\u0323\13\6")
        buf.write("\3\6\3\6\3\6\5\6\u0328\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u0333\n\7\3\7\5\7\u0336\n\7\5\7\u0338\n\7")
        buf.write("\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u034a\n\n\3\13\3\13\3\13\5\13\u034f\n\13")
        buf.write("\3\13\3\13\3\13\5\13\u0354\n\13\3\13\3\13\3\13\3\13\5")
        buf.write("\13\u035a\n\13\3\f\3\f\5\f\u035e\n\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u036b\n\r\3\16\3\16\5\16")
        buf.write("\u036f\n\16\3\16\3\16\5\16\u0373\n\16\3\16\3\16\3\16\5")
        buf.write("\16\u0378\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u037f\n\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u0385\n\17\3\17\3\17\5\17\u0389")
        buf.write("\n\17\5\17\u038b\n\17\3\17\3\17\5\17\u038f\n\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u0396\n\20\5\20\u0398\n\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u039e\n\20\3\21\3\21\3\21\3\21\3")
        buf.write("\22\3\22\3\22\7\22\u03a7\n\22\f\22\16\22\u03aa\13\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\5\23\u03b1\n\23\3\23\3\23\5\23")
        buf.write("\u03b5\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24")
        buf.write("\u03df\n\24\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3")
        buf.write("\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\34\5\34\u03fa\n\34\3\34\3")
        buf.write("\34\5\34\u03fe\n\34\3\34\5\34\u0401\n\34\3\34\3\34\3\34")
        buf.write("\5\34\u0406\n\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3")
        buf.write("\37\3\37\3\37\7\37\u0412\n\37\f\37\16\37\u0415\13\37\3")
        buf.write(" \3 \3 \3!\3!\3!\5!\u041d\n!\3!\3!\5!\u0421\n!\3\"\3\"")
        buf.write("\3\"\3#\3#\5#\u0428\n#\3#\5#\u042b\n#\3#\3#\5#\u042f\n")
        buf.write("#\3#\3#\3#\3#\5#\u0435\n#\3#\5#\u0438\n#\3#\5#\u043b\n")
        buf.write("#\3#\5#\u043e\n#\3#\3#\3#\3#\5#\u0444\n#\3#\5#\u0447\n")
        buf.write("#\3#\5#\u044a\n#\3#\5#\u044d\n#\3#\5#\u0450\n#\3#\5#\u0453")
        buf.write("\n#\3#\5#\u0456\n#\3#\5#\u0459\n#\3#\5#\u045c\n#\3#\3")
        buf.write("#\5#\u0460\n#\5#\u0462\n#\3$\3$\3$\3$\3$\3$\3$\3$\5$\u046c")
        buf.write("\n$\3%\3%\3%\5%\u0471\n%\3%\3%\5%\u0475\n%\3%\5%\u0478")
        buf.write("\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0483\n&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0493\n&\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u04a2\n")
        buf.write("\'\3\'\3\'\5\'\u04a6\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\5(\u04b5\n(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3")
        buf.write("*\5*\u04c2\n*\3+\3+\5+\u04c6\n+\3,\3,\3,\5,\u04cb\n,\3")
        buf.write("-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60")
        buf.write("\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u04e6\n")
        buf.write("\61\3\62\3\62\3\62\5\62\u04eb\n\62\3\63\3\63\3\63\3\63")
        buf.write("\3\64\3\64\5\64\u04f3\n\64\3\64\3\64\3\64\3\64\5\64\u04f9")
        buf.write("\n\64\3\64\3\64\5\64\u04fd\n\64\3\64\5\64\u0500\n\64\3")
        buf.write("\64\5\64\u0503\n\64\3\65\3\65\3\65\3\65\5\65\u0509\n\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\5\65\u0510\n\65\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\67\3\67\3\67\5\67\u051a\n\67\38\38\58")
        buf.write("\u051e\n8\38\68\u0521\n8\r8\168\u0522\39\39\59\u0527\n")
        buf.write("9\3:\3:\7:\u052b\n:\f:\16:\u052e\13:\3;\3;\7;\u0532\n")
        buf.write(";\f;\16;\u0535\13;\3<\3<\7<\u0539\n<\f<\16<\u053c\13<")
        buf.write("\3=\3=\3=\3>\3>\5>\u0543\n>\3>\3>\3>\7>\u0548\n>\f>\16")
        buf.write(">\u054b\13>\3>\5>\u054e\n>\3>\5>\u0551\n>\3?\3?\3?\3?")
        buf.write("\3?\3?\5?\u0559\n?\3?\5?\u055c\n?\3@\3@\3@\3@\3@\3@\5")
        buf.write("@\u0564\n@\3@\5@\u0567\n@\3A\3A\5A\u056b\nA\3B\3B\3C\3")
        buf.write("C\3C\3C\3C\3C\5C\u0575\nC\3C\3C\3C\5C\u057a\nC\3D\3D\3")
        buf.write("D\3D\5D\u0580\nD\3D\3D\3E\3E\3E\3E\3F\3F\3F\3F\3F\5F\u058d")
        buf.write("\nF\3G\3G\3G\3G\3G\3H\3H\3H\3H\3I\3I\3I\7I\u059b\nI\f")
        buf.write("I\16I\u059e\13I\3J\3J\3J\3J\3K\3K\3K\3K\3L\3L\3L\3L\3")
        buf.write("L\5L\u05ad\nL\3M\3M\3M\3M\3M\3M\3N\3N\3N\3N\3O\3O\3O\3")
        buf.write("O\5O\u05bd\nO\3O\3O\3O\3O\3O\5O\u05c4\nO\3P\3P\3Q\3Q\3")
        buf.write("Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u05d8\nR\3")
        buf.write("R\3R\5R\u05dc\nR\3R\3R\3R\5R\u05e1\nR\3R\3R\3R\5R\u05e6")
        buf.write("\nR\3R\5R\u05e9\nR\3R\5R\u05ec\nR\3R\3R\5R\u05f0\nR\3")
        buf.write("R\5R\u05f3\nR\3R\5R\u05f6\nR\3S\3S\3S\7S\u05fb\nS\fS\16")
        buf.write("S\u05fe\13S\3T\3T\3T\3T\3T\3T\3U\3U\5U\u0608\nU\3V\3V")
        buf.write("\3V\3W\3W\3W\5W\u0610\nW\3W\3W\3W\3W\5W\u0616\nW\3X\3")
        buf.write("X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0626\nY\3Y\5")
        buf.write("Y\u0629\nY\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\5[\u0633\n[\3[\3[\3")
        buf.write("[\3[\3[\3[\5[\u063b\n[\7[\u063d\n[\f[\16[\u0640\13[\5")
        buf.write("[\u0642\n[\3\\\3\\\5\\\u0646\n\\\3]\3]\5]\u064a\n]\3]")
        buf.write("\5]\u064d\n]\3^\3^\3^\5^\u0652\n^\3^\3^\3^\5^\u0657\n")
        buf.write("^\3^\3^\3^\3^\5^\u065d\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\5")
        buf.write("_\u0668\n_\5_\u066a\n_\3_\3_\5_\u066e\n_\3`\3`\3`\3`\5")
        buf.write("`\u0674\n`\3`\3`\3`\3`\5`\u067a\n`\3`\3`\3`\5`\u067f\n")
        buf.write("`\3`\3`\3`\3`\5`\u0685\n`\3`\3`\3`\5`\u068a\n`\3`\3`\3")
        buf.write("`\3`\3`\5`\u0691\n`\3`\3`\3`\5`\u0696\n`\3`\3`\3`\3`\3")
        buf.write("`\3`\5`\u069e\n`\3`\3`\3`\5`\u06a3\n`\3`\3`\3`\3`\3`\5")
        buf.write("`\u06aa\n`\3`\3`\3`\3`\5`\u06b0\n`\3`\3`\3`\3`\3`\3`\5")
        buf.write("`\u06b8\n`\3`\3`\3`\3`\3`\5`\u06bf\n`\3`\3`\3`\5`\u06c4")
        buf.write("\n`\3`\3`\3`\3`\3`\3`\5`\u06cc\n`\3`\3`\3`\3`\3`\5`\u06d3")
        buf.write("\n`\3`\5`\u06d6\n`\3`\5`\u06d9\n`\5`\u06db\n`\3`\3`\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u06e9\n`\5`\u06eb\n`\3")
        buf.write("a\3a\3a\3a\5a\u06f1\na\3a\3a\3b\3b\3b\3b\3b\3c\3c\3d\3")
        buf.write("d\3d\3d\5d\u0700\nd\3e\3e\3e\3e\3f\3f\3f\3f\3g\3g\3g\3")
        buf.write("g\3h\3h\3h\5h\u0711\nh\3h\3h\3h\5h\u0716\nh\3i\3i\5i\u071a")
        buf.write("\ni\3i\3i\5i\u071e\ni\3i\3i\3i\3j\3j\5j\u0725\nj\3j\3")
        buf.write("j\3j\3j\5j\u072b\nj\3k\3k\5k\u072f\nk\3k\5k\u0732\nk\3")
        buf.write("k\3k\3k\3k\3l\3l\3l\3l\3l\3m\3m\3m\3n\3n\3n\3n\3o\3o\3")
        buf.write("o\3o\3o\5o\u0749\no\3p\3p\3p\5p\u074e\np\3p\3p\5p\u0752")
        buf.write("\np\3q\3q\3q\3q\3r\3r\5r\u075a\nr\3s\3s\3s\3t\3t\3t\5")
        buf.write("t\u0762\nt\3t\3t\5t\u0766\nt\3t\3t\3t\3t\5t\u076c\nt\3")
        buf.write("u\3u\3u\5u\u0771\nu\3u\3u\3u\3u\3u\5u\u0778\nu\3u\5u\u077b")
        buf.write("\nu\3u\3u\3u\3u\5u\u0781\nu\3v\3v\3v\7v\u0786\nv\fv\16")
        buf.write("v\u0789\13v\3w\3w\3w\3w\3w\5w\u0790\nw\3x\3x\3y\3y\3y")
        buf.write("\7y\u0797\ny\fy\16y\u079a\13y\3z\3z\3z\3z\3z\3z\5z\u07a2")
        buf.write("\nz\3{\3{\3{\3{\3|\3|\3|\3|\3}\3}\3}\3}\3~\3~\3~\3~\3")
        buf.write("\177\3\177\5\177\u07b6\n\177\3\177\3\177\3\177\3\177\5")
        buf.write("\177\u07bc\n\177\3\177\5\177\u07bf\n\177\5\177\u07c1\n")
        buf.write("\177\3\u0080\3\u0080\3\u0080\7\u0080\u07c6\n\u0080\f\u0080")
        buf.write("\16\u0080\u07c9\13\u0080\3\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\5\u0083\u07d2\n\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u07da")
        buf.write("\n\u0083\3\u0084\3\u0084\5\u0084\u07de\n\u0084\3\u0084")
        buf.write("\3\u0084\5\u0084\u07e2\n\u0084\3\u0084\3\u0084\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u07ef\n\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u07f8\n\u0087")
        buf.write("\3\u0087\3\u0087\3\u0088\3\u0088\5\u0088\u07fe\n\u0088")
        buf.write("\3\u0088\5\u0088\u0801\n\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u0805\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\5\u0088\u080c\n\u0088\3\u0088\5\u0088\u080f\n\u0088\3")
        buf.write("\u0088\5\u0088\u0812\n\u0088\3\u0088\5\u0088\u0815\n\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u081e\n\u0089\3\u0089\3\u0089\5\u0089\u0822\n")
        buf.write("\u0089\3\u0089\5\u0089\u0825\n\u0089\3\u0089\5\u0089\u0828")
        buf.write("\n\u0089\3\u0089\5\u0089\u082b\n\u0089\3\u0089\5\u0089")
        buf.write("\u082e\n\u0089\3\u0089\5\u0089\u0831\n\u0089\3\u0089\3")
        buf.write("\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u083f\n\u008b")
        buf.write("\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c")
        buf.write("\u0847\n\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d")
        buf.write("\u084d\n\u008d\3\u008e\3\u008e\5\u008e\u0851\n\u008e\3")
        buf.write("\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\7\u0090\u085c\n\u0090\f\u0090\16\u0090")
        buf.write("\u085f\13\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\5\u0091\u086e\n\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u087e\n\u0092")
        buf.write("\3\u0093\3\u0093\5\u0093\u0882\n\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0891\n\u0096")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0897\n\u0097")
        buf.write("\3\u0097\5\u0097\u089a\n\u0097\3\u0097\5\u0097\u089d\n")
        buf.write("\u0097\3\u0097\5\u0097\u08a0\n\u0097\3\u0097\5\u0097\u08a3")
        buf.write("\n\u0097\3\u0098\3\u0098\5\u0098\u08a7\n\u0098\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009b")
        buf.write("\3\u009b\3\u009b\7\u009b\u08b3\n\u009b\f\u009b\16\u009b")
        buf.write("\u08b6\13\u009b\3\u009b\3\u009b\3\u009b\7\u009b\u08bb")
        buf.write("\n\u009b\f\u009b\16\u009b\u08be\13\u009b\5\u009b\u08c0")
        buf.write("\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\5\u009e\u08cf\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\5\u00a3\u08f1\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\5\u00a3\u08f9\n\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u08fe\n\u00a3\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0906\n\u00a5\f\u00a5")
        buf.write("\16\u00a5\u0909\13\u00a5\3\u00a6\3\u00a6\3\u00a6\7\u00a6")
        buf.write("\u090e\n\u00a6\f\u00a6\16\u00a6\u0911\13\u00a6\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\7\u00a7\u0916\n\u00a7\f\u00a7\16\u00a7")
        buf.write("\u0919\13\u00a7\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u091e")
        buf.write("\n\u00a8\f\u00a8\16\u00a8\u0921\13\u00a8\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa")
        buf.write("\u092b\n\u00aa\7\u00aa\u092d\n\u00aa\f\u00aa\16\u00aa")
        buf.write("\u0930\13\u00aa\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0935")
        buf.write("\n\u00ab\f\u00ab\16\u00ab\u0938\13\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ad\3\u00ad\5\u00ad\u0940\n\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0943\n\u00ad\3\u00ae\3\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u094c\n\u00b0")
        buf.write("\3\u00b1\3\u00b1\5\u00b1\u0950\n\u00b1\5\u00b1\u0952\n")
        buf.write("\u00b1\3\u00b2\3\u00b2\5\u00b2\u0956\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\5\u00b2\u095a\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3")
        buf.write("\u00b3\5\u00b3\u0960\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3")
        buf.write("\u00b5\3\u00b5\5\u00b5\u0967\n\u00b5\3\u00b5\3\u00b5\3")
        buf.write("\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0970\n")
        buf.write("\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u097b\n\u00b6\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u097f\n\u00b7\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\7\u00b8\u0984\n\u00b8\f\u00b8\16\u00b8\u0987\13\u00b8")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\7\u00ba\u0990\n\u00ba\f\u00ba\16\u00ba\u0993\13\u00ba")
        buf.write("\3\u00bb\3\u00bb\3\u00bc\3\u00bc\5\u00bc\u0999\n\u00bc")
        buf.write("\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be")
        buf.write("\u09a1\n\u00be\3\u00bf\3\u00bf\5\u00bf\u09a5\n\u00bf\3")
        buf.write("\u00bf\5\u00bf\u09a8\n\u00bf\3\u00c0\3\u00c0\3\u00c0\7")
        buf.write("\u00c0\u09ad\n\u00c0\f\u00c0\16\u00c0\u09b0\13\u00c0\3")
        buf.write("\u00c1\3\u00c1\3\u00c1\5\u00c1\u09b5\n\u00c1\3\u00c2\3")
        buf.write("\u00c2\5\u00c2\u09b9\n\u00c2\3\u00c2\5\u00c2\u09bc\n\u00c2")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u09c2\n\u00c3")
        buf.write("\3\u00c4\3\u00c4\5\u00c4\u09c6\n\u00c4\3\u00c5\3\u00c5")
        buf.write("\5\u00c5\u09ca\n\u00c5\3\u00c6\3\u00c6\3\u00c6\5\u00c6")
        buf.write("\u09cf\n\u00c6\3\u00c6\3\u00c6\5\u00c6\u09d3\n\u00c6\3")
        buf.write("\u00c7\3\u00c7\5\u00c7\u09d7\n\u00c7\3\u00c8\3\u00c8\5")
        buf.write("\u00c8\u09db\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3")
        buf.write("\u00c8\3\u00c8\5\u00c8\u09e3\n\u00c8\3\u00c9\3\u00c9\5")
        buf.write("\u00c9\u09e7\n\u00c9\3\u00c9\3\u00c9\5\u00c9\u09eb\n\u00c9")
        buf.write("\3\u00ca\3\u00ca\5\u00ca\u09ef\n\u00ca\3\u00cb\3\u00cb")
        buf.write("\5\u00cb\u09f3\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\5\u00cb\u09fb\n\u00cb\3\u00cc\3\u00cc")
        buf.write("\5\u00cc\u09ff\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0a03\n")
        buf.write("\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\5\u00d0\u0a13\n\u00d0\3\u00d1\3\u00d1\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\7\u00d2\u0a1a\n\u00d2\f\u00d2\16\u00d2")
        buf.write("\u0a1d\13\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\5\u00d3\u0a24\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0a2f")
        buf.write("\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0a41\n\u00d4\3\u00d4")
        buf.write("\5\u00d4\u0a44\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0a4e\n\u00d4")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0a6a")
        buf.write("\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0a70")
        buf.write("\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0a76")
        buf.write("\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0a7c")
        buf.write("\n\u00d9\5\u00d9\u0a7e\n\u00d9\3\u00da\5\u00da\u0a81\n")
        buf.write("\u00da\3\u00da\3\u00da\3\u00db\3\u00db\5\u00db\u0a87\n")
        buf.write("\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0a8d\n")
        buf.write("\u00dc\f\u00dc\16\u00dc\u0a90\13\u00dc\3\u00dd\3\u00dd")
        buf.write("\5\u00dd\u0a94\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u0a9e\n\u00de")
        buf.write("\f\u00de\16\u00de\u0aa1\13\u00de\3\u00df\3\u00df\6\u00df")
        buf.write("\u0aa5\n\u00df\r\u00df\16\u00df\u0aa6\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\5\u00e0\u0aac\n\u00e0\3\u00e0\5\u00e0\u0aaf\n")
        buf.write("\u00e0\3\u00e1\3\u00e1\5\u00e1\u0ab3\n\u00e1\3\u00e1\5")
        buf.write("\u00e1\u0ab6\n\u00e1\3\u00e1\5\u00e1\u0ab9\n\u00e1\3\u00e1")
        buf.write("\5\u00e1\u0abc\n\u00e1\3\u00e1\5\u00e1\u0abf\n\u00e1\3")
        buf.write("\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0ac5\n\u00e1\3")
        buf.write("\u00e2\3\u00e2\5\u00e2\u0ac9\n\u00e2\3\u00e2\5\u00e2\u0acc")
        buf.write("\n\u00e2\3\u00e2\5\u00e2\u0acf\n\u00e2\3\u00e2\5\u00e2")
        buf.write("\u0ad2\n\u00e2\3\u00e2\5\u00e2\u0ad5\n\u00e2\3\u00e2\5")
        buf.write("\u00e2\u0ad8\n\u00e2\3\u00e3\3\u00e3\3\u00e3\6\u00e3\u0add")
        buf.write("\n\u00e3\r\u00e3\16\u00e3\u0ade\3\u00e4\5\u00e4\u0ae2")
        buf.write("\n\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\5\u00e5")
        buf.write("\u0ae9\n\u00e5\3\u00e5\5\u00e5\u0aec\n\u00e5\3\u00e5\5")
        buf.write("\u00e5\u0aef\n\u00e5\3\u00e5\5\u00e5\u0af2\n\u00e5\3\u00e5")
        buf.write("\5\u00e5\u0af5\n\u00e5\3\u00e5\5\u00e5\u0af8\n\u00e5\3")
        buf.write("\u00e5\5\u00e5\u0afb\n\u00e5\3\u00e5\5\u00e5\u0afe\n\u00e5")
        buf.write("\3\u00e5\5\u00e5\u0b01\n\u00e5\3\u00e5\5\u00e5\u0b04\n")
        buf.write("\u00e5\3\u00e5\3\u00e5\5\u00e5\u0b08\n\u00e5\3\u00e5\5")
        buf.write("\u00e5\u0b0b\n\u00e5\3\u00e5\5\u00e5\u0b0e\n\u00e5\3\u00e5")
        buf.write("\5\u00e5\u0b11\n\u00e5\3\u00e5\5\u00e5\u0b14\n\u00e5\3")
        buf.write("\u00e5\5\u00e5\u0b17\n\u00e5\3\u00e5\5\u00e5\u0b1a\n\u00e5")
        buf.write("\3\u00e5\5\u00e5\u0b1d\n\u00e5\3\u00e5\5\u00e5\u0b20\n")
        buf.write("\u00e5\3\u00e5\5\u00e5\u0b23\n\u00e5\5\u00e5\u0b25\n\u00e5")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0b2b\n\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0b30\n\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0b37\n\u00e6")
        buf.write("\5\u00e6\u0b39\n\u00e6\3\u00e7\5\u00e7\u0b3c\n\u00e7\3")
        buf.write("\u00e7\3\u00e7\3\u00e7\5\u00e7\u0b41\n\u00e7\3\u00e7\5")
        buf.write("\u00e7\u0b44\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u0b48\n\u00e7")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0b4d\n\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0b54\n\u00e8")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0b5a\n\u00e9")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\7\u00eb\u0b64\n\u00eb\f\u00eb\16\u00eb\u0b67")
        buf.write("\13\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0b6d")
        buf.write("\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0b73")
        buf.write("\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee")
        buf.write("\u0b7a\n\u00ee\f\u00ee\16\u00ee\u0b7d\13\u00ee\5\u00ee")
        buf.write("\u0b7f\n\u00ee\3\u00ef\3\u00ef\5\u00ef\u0b83\n\u00ef\3")
        buf.write("\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0b89\n\u00f0\3")
        buf.write("\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f3")
        buf.write("\3\u00f3\5\u00f3\u0b93\n\u00f3\3\u00f4\3\u00f4\5\u00f4")
        buf.write("\u0b97\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\6\u00f6\u0ba0\n\u00f6\r\u00f6\16\u00f6")
        buf.write("\u0ba1\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0ba8\n")
        buf.write("\u00f7\3\u00f7\5\u00f7\u0bab\n\u00f7\3\u00f7\3\u00f7\3")
        buf.write("\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\7\u00f8")
        buf.write("\u0bb5\n\u00f8\f\u00f8\16\u00f8\u0bb8\13\u00f8\3\u00f8")
        buf.write("\5\u00f8\u0bbb\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\5\u00f9\u0bc2\n\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0bd8\n\u00fc\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\6\u00fd\u0bdd\n\u00fd\r\u00fd\16\u00fd")
        buf.write("\u0bde\3\u00fe\3\u00fe\5\u00fe\u0be3\n\u00fe\3\u00fe\5")
        buf.write("\u00fe\u0be6\n\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0beb")
        buf.write("\n\u00fe\3\u00fe\5\u00fe\u0bee\n\u00fe\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\7\u00ff\u0bf3\n\u00ff\f\u00ff\16\u00ff\u0bf6")
        buf.write("\13\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u0bfc")
        buf.write("\n\u0100\3\u0100\5\u0100\u0bff\n\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u0c07\n\u0100")
        buf.write("\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u0c0d\n\u0100")
        buf.write("\5\u0100\u0c0f\n\u0100\5\u0100\u0c11\n\u0100\3\u0100\5")
        buf.write("\u0100\u0c14\n\u0100\3\u0100\5\u0100\u0c17\n\u0100\3\u0101")
        buf.write("\3\u0101\3\u0101\5\u0101\u0c1c\n\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u0c24\n\u0101")
        buf.write("\5\u0101\u0c26\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\5\u0102\u0c2c\n\u0102\3\u0102\5\u0102\u0c2f\n\u0102\3")
        buf.write("\u0102\5\u0102\u0c32\n\u0102\3\u0102\3\u0102\3\u0102\3")
        buf.write("\u0102\3\u0102\3\u0102\5\u0102\u0c3a\n\u0102\3\u0102\3")
        buf.write("\u0102\3\u0102\3\u0102\5\u0102\u0c40\n\u0102\5\u0102\u0c42")
        buf.write("\n\u0102\5\u0102\u0c44\n\u0102\3\u0102\5\u0102\u0c47\n")
        buf.write("\u0102\3\u0102\5\u0102\u0c4a\n\u0102\3\u0103\3\u0103\5")
        buf.write("\u0103\u0c4e\n\u0103\3\u0104\3\u0104\3\u0104\7\u0104\u0c53")
        buf.write("\n\u0104\f\u0104\16\u0104\u0c56\13\u0104\3\u0105\3\u0105")
        buf.write("\3\u0105\3\u0105\7\u0105\u0c5c\n\u0105\f\u0105\16\u0105")
        buf.write("\u0c5f\13\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0107")
        buf.write("\3\u0107\3\u0107\5\u0107\u0c68\n\u0107\3\u0107\5\u0107")
        buf.write("\u0c6b\n\u0107\3\u0107\5\u0107\u0c6e\n\u0107\3\u0107\5")
        buf.write("\u0107\u0c71\n\u0107\3\u0108\3\u0108\5\u0108\u0c75\n\u0108")
        buf.write("\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\5\u0109\u0c7f\n\u0109\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u0c89")
        buf.write("\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\5\u010b\u0c91\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c")
        buf.write("\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u0c9c")
        buf.write("\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d")
        buf.write("\u0ca3\n\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f")
        buf.write("\7\u010f\u0caa\n\u010f\f\u010f\16\u010f\u0cad\13\u010f")
        buf.write("\3\u0110\3\u0110\3\u0110\7\u0110\u0cb2\n\u0110\f\u0110")
        buf.write("\16\u0110\u0cb5\13\u0110\3\u0111\3\u0111\3\u0111\3\u0112")
        buf.write("\3\u0112\3\u0112\3\u0112\6\u0112\u0cbe\n\u0112\r\u0112")
        buf.write("\16\u0112\u0cbf\3\u0112\5\u0112\u0cc3\n\u0112\3\u0113")
        buf.write("\3\u0113\7\u0113\u0cc7\n\u0113\f\u0113\16\u0113\u0cca")
        buf.write("\13\u0113\3\u0113\3\u0113\7\u0113\u0cce\n\u0113\f\u0113")
        buf.write("\16\u0113\u0cd1\13\u0113\3\u0113\3\u0113\7\u0113\u0cd5")
        buf.write("\n\u0113\f\u0113\16\u0113\u0cd8\13\u0113\3\u0113\3\u0113")
        buf.write("\7\u0113\u0cdc\n\u0113\f\u0113\16\u0113\u0cdf\13\u0113")
        buf.write("\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u0ce5\n\u0113")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u0cee\n\u0114\7\u0114\u0cf0\n\u0114\f\u0114\16")
        buf.write("\u0114\u0cf3\13\u0114\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u0cf9\n\u0115\3\u0115\7\u0115\u0cfc\n\u0115\f")
        buf.write("\u0115\16\u0115\u0cff\13\u0115\3\u0116\5\u0116\u0d02\n")
        buf.write("\u0116\3\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u0d15\n\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\5\u0119\u0d1a\n\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\5\u0119\u0d1f\n\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\5\u0119\u0d2a\n\u0119\3\u011a\3\u011a\3\u011a\5\u011a")
        buf.write("\u0d2f\n\u011a\3\u011a\3\u011a\5\u011a\u0d33\n\u011a\3")
        buf.write("\u011a\3\u011a\5\u011a\u0d37\n\u011a\3\u011b\3\u011b\3")
        buf.write("\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u0d3f\n\u011b\3")
        buf.write("\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u0d46\n")
        buf.write("\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\7\u011c")
        buf.write("\u0d4d\n\u011c\f\u011c\16\u011c\u0d50\13\u011c\5\u011c")
        buf.write("\u0d52\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\3\u011d\5\u011d\u0d5b\n\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\5\u011d\u0d60\n\u011d\3\u011e\3\u011e\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\7\u011f\u0d6f\n\u011f\f\u011f")
        buf.write("\16\u011f\u0d72\13\u011f\5\u011f\u0d74\n\u011f\3\u011f")
        buf.write("\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\5\u0120\u0d81\n\u0120\3\u0121")
        buf.write("\3\u0121\5\u0121\u0d85\n\u0121\3\u0122\3\u0122\5\u0122")
        buf.write("\u0d89\n\u0122\3\u0122\5\u0122\u0d8c\n\u0122\3\u0122\5")
        buf.write("\u0122\u0d8f\n\u0122\3\u0122\5\u0122\u0d92\n\u0122\3\u0123")
        buf.write("\3\u0123\5\u0123\u0d96\n\u0123\3\u0123\5\u0123\u0d99\n")
        buf.write("\u0123\3\u0123\5\u0123\u0d9c\n\u0123\3\u0124\3\u0124\3")
        buf.write("\u0124\3\u0124\3\u0124\5\u0124\u0da3\n\u0124\3\u0125\3")
        buf.write("\u0125\3\u0125\5\u0125\u0da8\n\u0125\3\u0125\3\u0125\3")
        buf.write("\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u0db0\n\u0126\3")
        buf.write("\u0126\5\u0126\u0db3\n\u0126\3\u0127\3\u0127\5\u0127\u0db7")
        buf.write("\n\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u0dbc\n\u0127")
        buf.write("\3\u0127\3\u0127\5\u0127\u0dc0\n\u0127\3\u0128\3\u0128")
        buf.write("\3\u0128\5\u0128\u0dc5\n\u0128\3\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\3\u0129\5\u0129\u0dcc\n\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\7\u0129\u0dd8\n\u0129\f\u0129\16\u0129\u0ddb")
        buf.write("\13\u0129\5\u0129\u0ddd\n\u0129\3\u0129\3\u0129\5\u0129")
        buf.write("\u0de1\n\u0129\3\u012a\3\u012a\3\u012a\3\u012b\3\u012b")
        buf.write("\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\7\u012d")
        buf.write("\u0dee\n\u012d\f\u012d\16\u012d\u0df1\13\u012d\3\u012e")
        buf.write("\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f")
        buf.write("\u0dfa\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f")
        buf.write("\5\u012f\u0e01\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write("\3\u0131\3\u0131\3\u0131\5\u0131\u0e0a\n\u0131\3\u0132")
        buf.write("\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133")
        buf.write("\7\u0133\u0e14\n\u0133\f\u0133\16\u0133\u0e17\13\u0133")
        buf.write("\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u0e20\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\7\u0134\u0e28\n\u0134\f\u0134\16\u0134")
        buf.write("\u0e2b\13\u0134\3\u0134\3\u0134\5\u0134\u0e2f\n\u0134")
        buf.write("\3\u0135\3\u0135\5\u0135\u0e33\n\u0135\3\u0136\3\u0136")
        buf.write("\5\u0136\u0e37\n\u0136\3\u0136\3\u0136\7\u0136\u0e3b\n")
        buf.write("\u0136\f\u0136\16\u0136\u0e3e\13\u0136\3\u0136\3\u0136")
        buf.write("\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139")
        buf.write("\3\u013a\3\u013a\3\u013a\3\u013a\3\u013b\3\u013b\5\u013b")
        buf.write("\u0e4f\n\u013b\3\u013c\3\u013c\6\u013c\u0e53\n\u013c\r")
        buf.write("\u013c\16\u013c\u0e54\3\u013d\3\u013d\5\u013d\u0e59\n")
        buf.write("\u013d\3\u013e\3\u013e\3\u013e\3\u013e\7\u013e\u0e5f\n")
        buf.write("\u013e\f\u013e\16\u013e\u0e62\13\u013e\3\u013e\3\u013e")
        buf.write("\3\u013f\3\u013f\3\u013f\7\u013f\u0e69\n\u013f\f\u013f")
        buf.write("\16\u013f\u0e6c\13\u013f\3\u0140\3\u0140\3\u0140\3\u0140")
        buf.write("\3\u0140\7\u0140\u0e73\n\u0140\f\u0140\16\u0140\u0e76")
        buf.write("\13\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0142\3\u0142")
        buf.write("\3\u0142\3\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0144")
        buf.write("\3\u0144\3\u0144\3\u0144\5\u0144\u0e88\n\u0144\3\u0145")
        buf.write("\3\u0145\3\u0145\3\u0145\5\u0145\u0e8e\n\u0145\3\u0145")
        buf.write("\3\u0145\3\u0145\7\u0145\u0e93\n\u0145\f\u0145\16\u0145")
        buf.write("\u0e96\13\u0145\5\u0145\u0e98\n\u0145\3\u0145\3\u0145")
        buf.write("\3\u0145\7\u0145\u0e9d\n\u0145\f\u0145\16\u0145\u0ea0")
        buf.write("\13\u0145\5\u0145\u0ea2\n\u0145\3\u0145\3\u0145\3\u0145")
        buf.write("\5\u0145\u0ea7\n\u0145\3\u0146\3\u0146\5\u0146\u0eab\n")
        buf.write("\u0146\3\u0146\3\u0146\5\u0146\u0eaf\n\u0146\3\u0147\3")
        buf.write("\u0147\5\u0147\u0eb3\n\u0147\3\u0148\3\u0148\3\u0149\3")
        buf.write("\u0149\3\u0149\3\u0149\3\u0149\7\u0149\u0ebc\n\u0149\f")
        buf.write("\u0149\16\u0149\u0ebf\13\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\5\u0149\u0ec7\n\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write("\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u0ed6")
        buf.write("\n\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b")
        buf.write("\3\u014b\3\u014b\3\u014b\5\u014b\u0ee1\n\u014b\6\u014b")
        buf.write("\u0ee3\n\u014b\r\u014b\16\u014b\u0ee4\3\u014b\3\u014b")
        buf.write("\3\u014b\5\u014b\u0eea\n\u014b\5\u014b\u0eec\n\u014b\3")
        buf.write("\u014b\5\u014b\u0eef\n\u014b\3\u014c\3\u014c\3\u014c\3")
        buf.write("\u014c\3\u014c\3\u014c\5\u014c\u0ef7\n\u014c\6\u014c\u0ef9")
        buf.write("\n\u014c\r\u014c\16\u014c\u0efa\3\u014c\3\u014c\3\u014c")
        buf.write("\5\u014c\u0f00\n\u014c\5\u014c\u0f02\n\u014c\3\u014c\5")
        buf.write("\u014c\u0f05\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3")
        buf.write("\u014d\5\u014d\u0f0c\n\u014d\3\u014d\3\u014d\3\u014e\3")
        buf.write("\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f")
        buf.write("\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\3\u0151\5\u0151\u0f27\n\u0151\3\u0152\3\u0152\6\u0152")
        buf.write("\u0f2b\n\u0152\r\u0152\16\u0152\u0f2c\3\u0153\3\u0153")
        buf.write("\3\u0153\3\u0154\3\u0154\3\u0154\5\u0154\u0f35\n\u0154")
        buf.write("\3\u0155\3\u0155\3\u0155\5\u0155\u0f3a\n\u0155\3\u0156")
        buf.write("\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3\u0158\3\u0158")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\3\u0159\5\u0159\u0f53\n\u0159\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015a\5\u015a\u0f61\n\u015a\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\5\u015b\u0f6f\n\u015b\3\u015c")
        buf.write("\3\u015c\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015d\3\u015d\5\u015d\u0f7c\n\u015d\3\u015e")
        buf.write("\3\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161\3\u0161")
        buf.write("\3\u0162\3\u0162\3\u0163\3\u0163\3\u0164\3\u0164\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u0f91\n\u0165")
        buf.write("\3\u0166\3\u0166\3\u0166\3\u0166\3\u0167\3\u0167\3\u0167")
        buf.write("\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u0f9e\n\u0167")
        buf.write("\3\u0168\3\u0168\3\u0169\3\u0169\3\u016a\3\u016a\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\7\u016b\u0fb0\n\u016b\f\u016b\16\u016b")
        buf.write("\u0fb3\13\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\5\u016b\u0fc2\n\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\5\u016b\u0fdf\n\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\7\u016b\u0ff0\n\u016b\f\u016b\16\u016b\u0ff3\13\u016b")
        buf.write("\3\u016c\3\u016c\3\u016c\5\u016c\u0ff8\n\u016c\3\u016d")
        buf.write("\3\u016d\3\u016d\3\u016d\7\u016d\u0ffe\n\u016d\f\u016d")
        buf.write("\16\u016d\u1001\13\u016d\3\u016d\3\u016d\3\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write("\3\u016f\5\u016f\u100f\n\u016f\3\u0170\3\u0170\3\u0170")
        buf.write("\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170")
        buf.write("\3\u0170\3\u0170\3\u0170\5\u0170\u101e\n\u0170\3\u0171")
        buf.write("\3\u0171\3\u0171\5\u0171\u1023\n\u0171\3\u0172\3\u0172")
        buf.write("\3\u0172\3\u0172\5\u0172\u1029\n\u0172\3\u0173\3\u0173")
        buf.write("\3\u0174\3\u0174\3\u0175\3\u0175\5\u0175\u1031\n\u0175")
        buf.write("\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\7\u0176\u1038")
        buf.write("\n\u0176\f\u0176\16\u0176\u103b\13\u0176\3\u0176\3\u0176")
        buf.write("\3\u0177\3\u0177\3\u0177\5\u0177\u1042\n\u0177\3\u0178")
        buf.write("\3\u0178\3\u0178\3\u0178\3\u0178\7\u0178\u1049\n\u0178")
        buf.write("\f\u0178\16\u0178\u104c\13\u0178\3\u0178\3\u0178\3\u0179")
        buf.write("\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017b\3\u017b")
        buf.write("\3\u017c\3\u017c\3\u017c\5\u017c\u105b\n\u017c\3\u017d")
        buf.write("\3\u017d\5\u017d\u105f\n\u017d\3\u017e\3\u017e\3\u017e")
        buf.write("\3\u017e\3\u017e\5\u017e\u1066\n\u017e\3\u017f\3\u017f")
        buf.write("\5\u017f\u106a\n\u017f\3\u0180\3\u0180\3\u0181\3\u0181")
        buf.write("\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181")
        buf.write("\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181")
        buf.write("\3\u0181\3\u0181\5\u0181\u1080\n\u0181\3\u0182\3\u0182")
        buf.write("\3\u0182\2\3\u02d4\u0183\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140")
        buf.write("\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152")
        buf.write("\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164")
        buf.write("\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176")
        buf.write("\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188")
        buf.write("\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a")
        buf.write("\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac")
        buf.write("\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be")
        buf.write("\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0")
        buf.write("\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2")
        buf.write("\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4")
        buf.write("\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206")
        buf.write("\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218")
        buf.write("\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a")
        buf.write("\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c")
        buf.write("\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e")
        buf.write("\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260")
        buf.write("\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272")
        buf.write("\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284")
        buf.write("\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296")
        buf.write("\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8")
        buf.write("\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba")
        buf.write("\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc")
        buf.write("\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de")
        buf.write("\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0")
        buf.write("\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302")
        buf.write("\2\"\3\2\u0140\u0143\3\2\u00ee\u00ef\4\2\u00c1\u00c1\u00c4")
        buf.write("\u00c4\3\2\u0092\u0093\4\2\17\17TT\3\2\u009c\u009d\4\2")
        buf.write("\u00c2\u00c2\u00c5\u00c5\4\2\27\27\u00c0\u00c0\3\2\u00cd")
        buf.write("\u00ce\13\2\5\5\31\31\33\33MMOOUU\u00b9\u00b9\u00ca\u00ca")
        buf.write("\u00ec\u00ed\5\2UU\u0092\u0092\u0158\u0158\4\2\u0099\u009a")
        buf.write("\u00e5\u00e5\3\2\u0089\u008a\3\2\u0131\u0132\3\2\16\17")
        buf.write("\4\2\5\5\32\32\3\2\u00f7\u00f8\4\2ww\u0090\u0090\3\2\u00f1")
        buf.write("\u00f2\4\2\r\r\64=\5\2\u0116\u0116\u0118\u011b\u011d\u011f")
        buf.write("\4\2\u0116\u0116\u0118\u011f\4\2\u0178\u0178\u017d\u017d")
        buf.write("\4\2\u016b\u016c\u0172\u0172\4\2\u016a\u016a\u016d\u016f")
        buf.write("\3\2\u016b\u016c\4\2\n\n\u0094\u0095\3\2\3\4\4\2\u0163")
        buf.write("\u0163\u0165\u0169\20\2\7\n\f\fY_iilo\u0094\u0095\u00ae")
        buf.write("\u00af\u00c0\u00c0\u00d8\u00d8\u00da\u00da\u0139\u0139")
        buf.write("\u0163\u016f\u0171\u0173\u0175\u0175\66\2\16\21\23\23")
        buf.write("\34\34\'\')\62?ADEGJPPRSVVXXZZbbffiimmooqsuux\u008b\u008d")
        buf.write("\u008d\u0092\u0093\u0096\u0096\u0099\u009b\u009d\u00a0")
        buf.write("\u00a2\u00a6\u00a8\u00ad\u00b3\u00b8\u00ba\u00ba\u00be")
        buf.write("\u00bf\u00c2\u00c5\u00c8\u00d2\u00d4\u00d4\u00d6\u00d7")
        buf.write("\u00dc\u00dc\u00df\u00e1\u00e4\u00ec\u00ee\u00f0\u00f3")
        buf.write("\u00f3\u0100\u0100\u0102\u0102\u0104\u0105\u0108\u0110")
        buf.write("\u0112\u0112\u0115\u011f\u0121\u0121\u0124\u0124\u0126")
        buf.write("\u012b\u0130\u0134\u0136\u0137\u013b\u0156\4\2\u00b2\u00b2")
        buf.write("\u0120\u0120\2\u11f4\2\u0310\3\2\2\2\4\u0315\3\2\2\2\6")
        buf.write("\u0317\3\2\2\2\b\u031b\3\2\2\2\n\u031d\3\2\2\2\f\u0337")
        buf.write("\3\2\2\2\16\u0339\3\2\2\2\20\u033b\3\2\2\2\22\u0349\3")
        buf.write("\2\2\2\24\u034b\3\2\2\2\26\u035b\3\2\2\2\30\u0364\3\2")
        buf.write("\2\2\32\u036c\3\2\2\2\34\u0379\3\2\2\2\36\u0390\3\2\2")
        buf.write("\2 \u039f\3\2\2\2\"\u03a3\3\2\2\2$\u03ab\3\2\2\2&\u03de")
        buf.write("\3\2\2\2(\u03e0\3\2\2\2*\u03e3\3\2\2\2,\u03e5\3\2\2\2")
        buf.write(".\u03e9\3\2\2\2\60\u03ec\3\2\2\2\62\u03ef\3\2\2\2\64\u03f3")
        buf.write("\3\2\2\2\66\u03f6\3\2\2\28\u0407\3\2\2\2:\u040a\3\2\2")
        buf.write("\2<\u040e\3\2\2\2>\u0416\3\2\2\2@\u0419\3\2\2\2B\u0422")
        buf.write("\3\2\2\2D\u0425\3\2\2\2F\u0463\3\2\2\2H\u046d\3\2\2\2")
        buf.write("J\u0492\3\2\2\2L\u04a5\3\2\2\2N\u04b4\3\2\2\2P\u04b6\3")
        buf.write("\2\2\2R\u04c1\3\2\2\2T\u04c5\3\2\2\2V\u04ca\3\2\2\2X\u04cc")
        buf.write("\3\2\2\2Z\u04d1\3\2\2\2\\\u04d6\3\2\2\2^\u04db\3\2\2\2")
        buf.write("`\u04df\3\2\2\2b\u04e7\3\2\2\2d\u04ec\3\2\2\2f\u04f0\3")
        buf.write("\2\2\2h\u0504\3\2\2\2j\u0511\3\2\2\2l\u0519\3\2\2\2n\u051b")
        buf.write("\3\2\2\2p\u0524\3\2\2\2r\u0528\3\2\2\2t\u052f\3\2\2\2")
        buf.write("v\u0536\3\2\2\2x\u053d\3\2\2\2z\u0540\3\2\2\2|\u055b\3")
        buf.write("\2\2\2~\u0566\3\2\2\2\u0080\u056a\3\2\2\2\u0082\u056c")
        buf.write("\3\2\2\2\u0084\u0579\3\2\2\2\u0086\u057b\3\2\2\2\u0088")
        buf.write("\u0583\3\2\2\2\u008a\u058c\3\2\2\2\u008c\u058e\3\2\2\2")
        buf.write("\u008e\u0593\3\2\2\2\u0090\u0597\3\2\2\2\u0092\u059f\3")
        buf.write("\2\2\2\u0094\u05a3\3\2\2\2\u0096\u05ac\3\2\2\2\u0098\u05ae")
        buf.write("\3\2\2\2\u009a\u05b4\3\2\2\2\u009c\u05b8\3\2\2\2\u009e")
        buf.write("\u05c5\3\2\2\2\u00a0\u05c7\3\2\2\2\u00a2\u05cb\3\2\2\2")
        buf.write("\u00a4\u05f7\3\2\2\2\u00a6\u05ff\3\2\2\2\u00a8\u0605\3")
        buf.write("\2\2\2\u00aa\u0609\3\2\2\2\u00ac\u060c\3\2\2\2\u00ae\u0617")
        buf.write("\3\2\2\2\u00b0\u0628\3\2\2\2\u00b2\u062a\3\2\2\2\u00b4")
        buf.write("\u062f\3\2\2\2\u00b6\u0643\3\2\2\2\u00b8\u0647\3\2\2\2")
        buf.write("\u00ba\u064e\3\2\2\2\u00bc\u065e\3\2\2\2\u00be\u06ea\3")
        buf.write("\2\2\2\u00c0\u06ec\3\2\2\2\u00c2\u06f4\3\2\2\2\u00c4\u06f9")
        buf.write("\3\2\2\2\u00c6\u06fb\3\2\2\2\u00c8\u0701\3\2\2\2\u00ca")
        buf.write("\u0705\3\2\2\2\u00cc\u0709\3\2\2\2\u00ce\u070d\3\2\2\2")
        buf.write("\u00d0\u0717\3\2\2\2\u00d2\u0722\3\2\2\2\u00d4\u072c\3")
        buf.write("\2\2\2\u00d6\u0737\3\2\2\2\u00d8\u073c\3\2\2\2\u00da\u073f")
        buf.write("\3\2\2\2\u00dc\u0743\3\2\2\2\u00de\u074a\3\2\2\2\u00e0")
        buf.write("\u0753\3\2\2\2\u00e2\u0759\3\2\2\2\u00e4\u075b\3\2\2\2")
        buf.write("\u00e6\u076b\3\2\2\2\u00e8\u0780\3\2\2\2\u00ea\u0782\3")
        buf.write("\2\2\2\u00ec\u078a\3\2\2\2\u00ee\u0791\3\2\2\2\u00f0\u0793")
        buf.write("\3\2\2\2\u00f2\u07a1\3\2\2\2\u00f4\u07a3\3\2\2\2\u00f6")
        buf.write("\u07a7\3\2\2\2\u00f8\u07ab\3\2\2\2\u00fa\u07af\3\2\2\2")
        buf.write("\u00fc\u07b3\3\2\2\2\u00fe\u07c2\3\2\2\2\u0100\u07ca\3")
        buf.write("\2\2\2\u0102\u07cd\3\2\2\2\u0104\u07cf\3\2\2\2\u0106\u07db")
        buf.write("\3\2\2\2\u0108\u07e5\3\2\2\2\u010a\u07e8\3\2\2\2\u010c")
        buf.write("\u07f3\3\2\2\2\u010e\u07fb\3\2\2\2\u0110\u0819\3\2\2\2")
        buf.write("\u0112\u0835\3\2\2\2\u0114\u083b\3\2\2\2\u0116\u0842\3")
        buf.write("\2\2\2\u0118\u084c\3\2\2\2\u011a\u0850\3\2\2\2\u011c\u0852")
        buf.write("\3\2\2\2\u011e\u0855\3\2\2\2\u0120\u0862\3\2\2\2\u0122")
        buf.write("\u0873\3\2\2\2\u0124\u0881\3\2\2\2\u0126\u0883\3\2\2\2")
        buf.write("\u0128\u0886\3\2\2\2\u012a\u0889\3\2\2\2\u012c\u0892\3")
        buf.write("\2\2\2\u012e\u08a6\3\2\2\2\u0130\u08a8\3\2\2\2\u0132\u08ab")
        buf.write("\3\2\2\2\u0134\u08bf\3\2\2\2\u0136\u08c1\3\2\2\2\u0138")
        buf.write("\u08c5\3\2\2\2\u013a\u08c7\3\2\2\2\u013c\u08d0\3\2\2\2")
        buf.write("\u013e\u08d6\3\2\2\2\u0140\u08dc\3\2\2\2\u0142\u08e1\3")
        buf.write("\2\2\2\u0144\u08fd\3\2\2\2\u0146\u08ff\3\2\2\2\u0148\u0902")
        buf.write("\3\2\2\2\u014a\u090a\3\2\2\2\u014c\u0912\3\2\2\2\u014e")
        buf.write("\u091a\3\2\2\2\u0150\u0922\3\2\2\2\u0152\u0924\3\2\2\2")
        buf.write("\u0154\u0931\3\2\2\2\u0156\u0939\3\2\2\2\u0158\u0942\3")
        buf.write("\2\2\2\u015a\u0944\3\2\2\2\u015c\u0946\3\2\2\2\u015e\u094b")
        buf.write("\3\2\2\2\u0160\u0951\3\2\2\2\u0162\u0955\3\2\2\2\u0164")
        buf.write("\u095b\3\2\2\2\u0166\u0961\3\2\2\2\u0168\u0966\3\2\2\2")
        buf.write("\u016a\u0971\3\2\2\2\u016c\u097e\3\2\2\2\u016e\u0980\3")
        buf.write("\2\2\2\u0170\u0988\3\2\2\2\u0172\u098c\3\2\2\2\u0174\u0994")
        buf.write("\3\2\2\2\u0176\u0998\3\2\2\2\u0178\u099a\3\2\2\2\u017a")
        buf.write("\u09a0\3\2\2\2\u017c\u09a2\3\2\2\2\u017e\u09a9\3\2\2\2")
        buf.write("\u0180\u09b1\3\2\2\2\u0182\u09b6\3\2\2\2\u0184\u09bd\3")
        buf.write("\2\2\2\u0186\u09c5\3\2\2\2\u0188\u09c9\3\2\2\2\u018a\u09cb")
        buf.write("\3\2\2\2\u018c\u09d6\3\2\2\2\u018e\u09da\3\2\2\2\u0190")
        buf.write("\u09e6\3\2\2\2\u0192\u09ee\3\2\2\2\u0194\u09f2\3\2\2\2")
        buf.write("\u0196\u09fe\3\2\2\2\u0198\u0a04\3\2\2\2\u019a\u0a07\3")
        buf.write("\2\2\2\u019c\u0a0a\3\2\2\2\u019e\u0a0d\3\2\2\2\u01a0\u0a14")
        buf.write("\3\2\2\2\u01a2\u0a16\3\2\2\2\u01a4\u0a23\3\2\2\2\u01a6")
        buf.write("\u0a4d\3\2\2\2\u01a8\u0a4f\3\2\2\2\u01aa\u0a54\3\2\2\2")
        buf.write("\u01ac\u0a59\3\2\2\2\u01ae\u0a60\3\2\2\2\u01b0\u0a7d\3")
        buf.write("\2\2\2\u01b2\u0a80\3\2\2\2\u01b4\u0a86\3\2\2\2\u01b6\u0a88")
        buf.write("\3\2\2\2\u01b8\u0a91\3\2\2\2\u01ba\u0a99\3\2\2\2\u01bc")
        buf.write("\u0aa2\3\2\2\2\u01be\u0aae\3\2\2\2\u01c0\u0ac4\3\2\2\2")
        buf.write("\u01c2\u0ac6\3\2\2\2\u01c4\u0adc\3\2\2\2\u01c6\u0ae1\3")
        buf.write("\2\2\2\u01c8\u0b24\3\2\2\2\u01ca\u0b38\3\2\2\2\u01cc\u0b47")
        buf.write("\3\2\2\2\u01ce\u0b53\3\2\2\2\u01d0\u0b55\3\2\2\2\u01d2")
        buf.write("\u0b5b\3\2\2\2\u01d4\u0b5f\3\2\2\2\u01d6\u0b68\3\2\2\2")
        buf.write("\u01d8\u0b72\3\2\2\2\u01da\u0b74\3\2\2\2\u01dc\u0b82\3")
        buf.write("\2\2\2\u01de\u0b88\3\2\2\2\u01e0\u0b8a\3\2\2\2\u01e2\u0b8e")
        buf.write("\3\2\2\2\u01e4\u0b90\3\2\2\2\u01e6\u0b94\3\2\2\2\u01e8")
        buf.write("\u0b98\3\2\2\2\u01ea\u0b9c\3\2\2\2\u01ec\u0ba3\3\2\2\2")
        buf.write("\u01ee\u0bb6\3\2\2\2\u01f0\u0bbc\3\2\2\2\u01f2\u0bc8\3")
        buf.write("\2\2\2\u01f4\u0bcf\3\2\2\2\u01f6\u0bd7\3\2\2\2\u01f8\u0bd9")
        buf.write("\3\2\2\2\u01fa\u0bed\3\2\2\2\u01fc\u0bef\3\2\2\2\u01fe")
        buf.write("\u0bf7\3\2\2\2\u0200\u0c25\3\2\2\2\u0202\u0c2b\3\2\2\2")
        buf.write("\u0204\u0c4d\3\2\2\2\u0206\u0c4f\3\2\2\2\u0208\u0c57\3")
        buf.write("\2\2\2\u020a\u0c60\3\2\2\2\u020c\u0c70\3\2\2\2\u020e\u0c74")
        buf.write("\3\2\2\2\u0210\u0c7e\3\2\2\2\u0212\u0c88\3\2\2\2\u0214")
        buf.write("\u0c90\3\2\2\2\u0216\u0c9b\3\2\2\2\u0218\u0ca2\3\2\2\2")
        buf.write("\u021a\u0ca4\3\2\2\2\u021c\u0ca6\3\2\2\2\u021e\u0cae\3")
        buf.write("\2\2\2\u0220\u0cb6\3\2\2\2\u0222\u0cc2\3\2\2\2\u0224\u0ce4")
        buf.write("\3\2\2\2\u0226\u0ce6\3\2\2\2\u0228\u0cf8\3\2\2\2\u022a")
        buf.write("\u0d01\3\2\2\2\u022c\u0d06\3\2\2\2\u022e\u0d0a\3\2\2\2")
        buf.write("\u0230\u0d29\3\2\2\2\u0232\u0d2b\3\2\2\2\u0234\u0d38\3")
        buf.write("\2\2\2\u0236\u0d47\3\2\2\2\u0238\u0d5a\3\2\2\2\u023a\u0d61")
        buf.write("\3\2\2\2\u023c\u0d63\3\2\2\2\u023e\u0d80\3\2\2\2\u0240")
        buf.write("\u0d84\3\2\2\2\u0242\u0d86\3\2\2\2\u0244\u0d93\3\2\2\2")
        buf.write("\u0246\u0da2\3\2\2\2\u0248\u0da7\3\2\2\2\u024a\u0dab\3")
        buf.write("\2\2\2\u024c\u0dbf\3\2\2\2\u024e\u0dc4\3\2\2\2\u0250\u0dc6")
        buf.write("\3\2\2\2\u0252\u0de2\3\2\2\2\u0254\u0de5\3\2\2\2\u0256")
        buf.write("\u0de7\3\2\2\2\u0258\u0dea\3\2\2\2\u025a\u0df2\3\2\2\2")
        buf.write("\u025c\u0df4\3\2\2\2\u025e\u0e02\3\2\2\2\u0260\u0e09\3")
        buf.write("\2\2\2\u0262\u0e0b\3\2\2\2\u0264\u0e0e\3\2\2\2\u0266\u0e1a")
        buf.write("\3\2\2\2\u0268\u0e32\3\2\2\2\u026a\u0e34\3\2\2\2\u026c")
        buf.write("\u0e41\3\2\2\2\u026e\u0e43\3\2\2\2\u0270\u0e46\3\2\2\2")
        buf.write("\u0272\u0e48\3\2\2\2\u0274\u0e4c\3\2\2\2\u0276\u0e52\3")
        buf.write("\2\2\2\u0278\u0e58\3\2\2\2\u027a\u0e5a\3\2\2\2\u027c\u0e65")
        buf.write("\3\2\2\2\u027e\u0e6d\3\2\2\2\u0280\u0e77\3\2\2\2\u0282")
        buf.write("\u0e7b\3\2\2\2\u0284\u0e7f\3\2\2\2\u0286\u0e83\3\2\2\2")
        buf.write("\u0288\u0e89\3\2\2\2\u028a\u0eaa\3\2\2\2\u028c\u0eb2\3")
        buf.write("\2\2\2\u028e\u0eb4\3\2\2\2\u0290\u0eb6\3\2\2\2\u0292\u0ecc")
        buf.write("\3\2\2\2\u0294\u0ed9\3\2\2\2\u0296\u0ef0\3\2\2\2\u0298")
        buf.write("\u0f06\3\2\2\2\u029a\u0f0f\3\2\2\2\u029c\u0f11\3\2\2\2")
        buf.write("\u029e\u0f18\3\2\2\2\u02a0\u0f26\3\2\2\2\u02a2\u0f28\3")
        buf.write("\2\2\2\u02a4\u0f2e\3\2\2\2\u02a6\u0f34\3\2\2\2\u02a8\u0f39")
        buf.write("\3\2\2\2\u02aa\u0f3b\3\2\2\2\u02ac\u0f3e\3\2\2\2\u02ae")
        buf.write("\u0f40\3\2\2\2\u02b0\u0f52\3\2\2\2\u02b2\u0f60\3\2\2\2")
        buf.write("\u02b4\u0f6e\3\2\2\2\u02b6\u0f70\3\2\2\2\u02b8\u0f7b\3")
        buf.write("\2\2\2\u02ba\u0f7d\3\2\2\2\u02bc\u0f7f\3\2\2\2\u02be\u0f81")
        buf.write("\3\2\2\2\u02c0\u0f83\3\2\2\2\u02c2\u0f85\3\2\2\2\u02c4")
        buf.write("\u0f87\3\2\2\2\u02c6\u0f89\3\2\2\2\u02c8\u0f90\3\2\2\2")
        buf.write("\u02ca\u0f92\3\2\2\2\u02cc\u0f9d\3\2\2\2\u02ce\u0f9f\3")
        buf.write("\2\2\2\u02d0\u0fa1\3\2\2\2\u02d2\u0fa3\3\2\2\2\u02d4\u0fc1")
        buf.write("\3\2\2\2\u02d6\u0ff4\3\2\2\2\u02d8\u0ff9\3\2\2\2\u02da")
        buf.write("\u1004\3\2\2\2\u02dc\u100e\3\2\2\2\u02de\u101d\3\2\2\2")
        buf.write("\u02e0\u1022\3\2\2\2\u02e2\u1028\3\2\2\2\u02e4\u102a\3")
        buf.write("\2\2\2\u02e6\u102c\3\2\2\2\u02e8\u102e\3\2\2\2\u02ea\u1032")
        buf.write("\3\2\2\2\u02ec\u103e\3\2\2\2\u02ee\u1043\3\2\2\2\u02f0")
        buf.write("\u104f\3\2\2\2\u02f2\u1053\3\2\2\2\u02f4\u1055\3\2\2\2")
        buf.write("\u02f6\u105a\3\2\2\2\u02f8\u105e\3\2\2\2\u02fa\u1065\3")
        buf.write("\2\2\2\u02fc\u1069\3\2\2\2\u02fe\u106b\3\2\2\2\u0300\u107f")
        buf.write("\3\2\2\2\u0302\u1081\3\2\2\2\u0304\u030a\5\b\5\2\u0305")
        buf.write("\u0306\5\4\3\2\u0306\u0307\5\b\5\2\u0307\u0309\3\2\2\2")
        buf.write("\u0308\u0305\3\2\2\2\u0309\u030c\3\2\2\2\u030a\u0308\3")
        buf.write("\2\2\2\u030a\u030b\3\2\2\2\u030b\u030f\3\2\2\2\u030c\u030a")
        buf.write("\3\2\2\2\u030d\u030f\5\6\4\2\u030e\u0304\3\2\2\2\u030e")
        buf.write("\u030d\3\2\2\2\u030f\u0312\3\2\2\2\u0310\u030e\3\2\2\2")
        buf.write("\u0310\u0311\3\2\2\2\u0311\u0313\3\2\2\2\u0312\u0310\3")
        buf.write("\2\2\2\u0313\u0314\7\2\2\3\u0314\3\3\2\2\2\u0315\u0316")
        buf.write("\7\u015c\2\2\u0316\5\3\2\2\2\u0317\u0318\5\4\3\2\u0318")
        buf.write("\7\3\2\2\2\u0319\u031c\5\n\6\2\u031a\u031c\5\22\n\2\u031b")
        buf.write("\u0319\3\2\2\2\u031b\u031a\3\2\2\2\u031c\t\3\2\2\2\u031d")
        buf.write("\u0327\7\u009b\2\2\u031e\u0320\5\f\7\2\u031f\u031e\3\2")
        buf.write("\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322")
        buf.write("\3\2\2\2\u0322\u0324\3\2\2\2\u0323\u0321\3\2\2\2\u0324")
        buf.write("\u0328\5\22\n\2\u0325\u0326\7\u0110\2\2\u0326\u0328\5")
        buf.write("\u01b2\u00da\2\u0327\u0321\3\2\2\2\u0327\u0325\3\2\2\2")
        buf.write("\u0328\13\3\2\2\2\u0329\u0338\7\u009c\2\2\u032a\u0338")
        buf.write("\7\u009d\2\2\u032b\u0338\7\u009e\2\2\u032c\u0338\7\u009f")
        buf.write("\2\2\u032d\u0338\7\u0111\2\2\u032e\u0338\7\u00d6\2\2\u032f")
        buf.write("\u0338\7\u0112\2\2\u0330\u0332\7\u013f\2\2\u0331\u0333")
        buf.write("\5\16\b\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0335\3\2\2\2\u0334\u0336\5\20\t\2\u0335\u0334\3\2\2")
        buf.write("\2\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0329")
        buf.write("\3\2\2\2\u0337\u032a\3\2\2\2\u0337\u032b\3\2\2\2\u0337")
        buf.write("\u032c\3\2\2\2\u0337\u032d\3\2\2\2\u0337\u032e\3\2\2\2")
        buf.write("\u0337\u032f\3\2\2\2\u0337\u0330\3\2\2\2\u0338\r\3\2\2")
        buf.write("\2\u0339\u033a\7\u0125\2\2\u033a\17\3\2\2\2\u033b\u033c")
        buf.write("\t\2\2\2\u033c\21\3\2\2\2\u033d\u034a\5\u01b2\u00da\2")
        buf.write("\u033e\u034a\5\24\13\2\u033f\u034a\5\30\r\2\u0340\u034a")
        buf.write("\5\32\16\2\u0341\u034a\5\34\17\2\u0342\u034a\5\36\20\2")
        buf.write("\u0343\u034a\5$\23\2\u0344\u034a\5&\24\2\u0345\u034a\5")
        buf.write("\u01d0\u00e9\2\u0346\u034a\5\u01d6\u00ec\2\u0347\u034a")
        buf.write("\5\u01d8\u00ed\2\u0348\u034a\5\u01ec\u00f7\2\u0349\u033d")
        buf.write("\3\2\2\2\u0349\u033e\3\2\2\2\u0349\u033f\3\2\2\2\u0349")
        buf.write("\u0340\3\2\2\2\u0349\u0341\3\2\2\2\u0349\u0342\3\2\2\2")
        buf.write("\u0349\u0343\3\2\2\2\u0349\u0344\3\2\2\2\u0349\u0345\3")
        buf.write("\2\2\2\u0349\u0346\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u0348")
        buf.write("\3\2\2\2\u034a\23\3\2\2\2\u034b\u034c\7D\2\2\u034c\u034e")
        buf.write("\7I\2\2\u034d\u034f\7\63\2\2\u034e\u034d\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351\7J\2\2")
        buf.write("\u0351\u0353\7\u0178\2\2\u0352\u0354\7\34\2\2\u0353\u0352")
        buf.write("\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355")
        buf.write("\u0356\7t\2\2\u0356\u0357\7(\2\2\u0357\u0359\5\u02e8\u0175")
        buf.write("\2\u0358\u035a\5\u00b2Z\2\u0359\u0358\3\2\2\2\u0359\u035a")
        buf.write("\3\2\2\2\u035a\25\3\2\2\2\u035b\u035d\7\u00f4\2\2\u035c")
        buf.write("\u035e\7H\2\2\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u035f\3\2\2\2\u035f\u0360\7G\2\2\u0360\u0361\7")
        buf.write("\u015d\2\2\u0361\u0362\7\u0178\2\2\u0362\u0363\7\u015e")
        buf.write("\2\2\u0363\27\3\2\2\2\u0364\u0365\7E\2\2\u0365\u0366\7")
        buf.write("(\2\2\u0366\u0367\5\u02e8\u0175\2\u0367\u0368\7W\2\2\u0368")
        buf.write("\u036a\7\u0178\2\2\u0369\u036b\5\26\f\2\u036a\u0369\3")
        buf.write("\2\2\2\u036a\u036b\3\2\2\2\u036b\31\3\2\2\2\u036c\u0372")
        buf.write("\7F\2\2\u036d\u036f\7N\2\2\u036e\u036d\3\2\2\2\u036e\u036f")
        buf.write("\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371\7(\2\2\u0371")
        buf.write("\u0373\5\u02e8\u0175\2\u0372\u036e\3\2\2\2\u0372\u0373")
        buf.write("\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0375\7\27\2\2\u0375")
        buf.write("\u0377\7\u0178\2\2\u0376\u0378\5\u0146\u00a4\2\u0377\u0376")
        buf.write("\3\2\2\2\u0377\u0378\3\2\2\2\u0378\33\3\2\2\2\u0379\u037a")
        buf.write("\7\u013c\2\2\u037a\u037b\7\u013d\2\2\u037b\u037e\5\u02f8")
        buf.write("\u017d\2\u037c\u037d\7\u0159\2\2\u037d\u037f\5\u02f8\u017d")
        buf.write("\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u038a")
        buf.write("\3\2\2\2\u0380\u0381\7\27\2\2\u0381\u0384\7\u017d\2\2")
        buf.write("\u0382\u0383\7W\2\2\u0383\u0385\7\u017d\2\2\u0384\u0382")
        buf.write("\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0388\3\2\2\2\u0386")
        buf.write("\u0387\7\u00a5\2\2\u0387\u0389\7\u017d\2\2\u0388\u0386")
        buf.write("\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038b\3\2\2\2\u038a")
        buf.write("\u0380\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038e\3\2\2\2")
        buf.write("\u038c\u038d\7\u00a1\2\2\u038d\u038f\5 \21\2\u038e\u038c")
        buf.write("\3\2\2\2\u038e\u038f\3\2\2\2\u038f\35\3\2\2\2\u0390\u0391")
        buf.write("\7\u013c\2\2\u0391\u0397\7D\2\2\u0392\u0395\5\u02f8\u017d")
        buf.write("\2\u0393\u0394\7\u0159\2\2\u0394\u0396\5\u02f8\u017d\2")
        buf.write("\u0395\u0393\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3")
        buf.write("\2\2\2\u0397\u0392\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399")
        buf.write("\3\2\2\2\u0399\u039a\7\27\2\2\u039a\u039d\7\u0178\2\2")
        buf.write("\u039b\u039c\7\u00a1\2\2\u039c\u039e\5 \21\2\u039d\u039b")
        buf.write("\3\2\2\2\u039d\u039e\3\2\2\2\u039e\37\3\2\2\2\u039f\u03a0")
        buf.write("\7\u015d\2\2\u03a0\u03a1\5\"\22\2\u03a1\u03a2\7\u015e")
        buf.write("\2\2\u03a2!\3\2\2\2\u03a3\u03a8\5\u0136\u009c\2\u03a4")
        buf.write("\u03a5\7\u015b\2\2\u03a5\u03a7\5\u0136\u009c\2\u03a6\u03a4")
        buf.write("\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9#\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab")
        buf.write("\u03ac\7\u013c\2\2\u03ac\u03ad\7\u013e\2\2\u03ad\u03b0")
        buf.write("\5\u02f8\u017d\2\u03ae\u03af\7\u0159\2\2\u03af\u03b1\5")
        buf.write("\u02f8\u017d\2\u03b0\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2")
        buf.write("\u03b1\u03b4\3\2\2\2\u03b2\u03b3\7\u00a1\2\2\u03b3\u03b5")
        buf.write("\5 \21\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5")
        buf.write("%\3\2\2\2\u03b6\u03df\5\66\34\2\u03b7\u03df\5> \2\u03b8")
        buf.write("\u03df\5@!\2\u03b9\u03df\5D#\2\u03ba\u03df\5H%\2\u03bb")
        buf.write("\u03df\5F$\2\u03bc\u03df\5J&\2\u03bd\u03df\5\u00ba^\2")
        buf.write("\u03be\u03df\5\u00be`\2\u03bf\u03df\5\u00fc\177\2\u03c0")
        buf.write("\u03df\5\u010e\u0088\2\u03c1\u03df\5\u0110\u0089\2\u03c2")
        buf.write("\u03df\5\u0114\u008b\2\u03c3\u03df\5\u0116\u008c\2\u03c4")
        buf.write("\u03df\5\u0104\u0083\2\u03c5\u03df\5\u010a\u0086\2\u03c6")
        buf.write("\u03df\5\u0106\u0084\2\u03c7\u03df\5\u0108\u0085\2\u03c8")
        buf.write("\u03df\5\u010c\u0087\2\u03c9\u03df\5\u00bc_\2\u03ca\u03df")
        buf.write("\5\u00c0a\2\u03cb\u03df\5\u00c6d\2\u03cc\u03df\5\u00c2")
        buf.write("b\2\u03cd\u03df\5\u00c8e\2\u03ce\u03df\5\u00caf\2\u03cf")
        buf.write("\u03df\5\u00ccg\2\u03d0\u03df\5\u00ceh\2\u03d1\u03df\5")
        buf.write("\u00d0i\2\u03d2\u03df\5\u00dep\2\u03d3\u03df\5\u00d6l")
        buf.write("\2\u03d4\u03df\5\u00e0q\2\u03d5\u03df\5\u00d8m\2\u03d6")
        buf.write("\u03df\5\u00d2j\2\u03d7\u03df\5\u00d4k\2\u03d8\u03df\5")
        buf.write("\u00dco\2\u03d9\u03df\5\u00dan\2\u03da\u03df\5\u01ea\u00f6")
        buf.write("\2\u03db\u03df\5\u01f8\u00fd\2\u03dc\u03df\5\u00a2R\2")
        buf.write("\u03dd\u03df\5\u00a6T\2\u03de\u03b6\3\2\2\2\u03de\u03b7")
        buf.write("\3\2\2\2\u03de\u03b8\3\2\2\2\u03de\u03b9\3\2\2\2\u03de")
        buf.write("\u03ba\3\2\2\2\u03de\u03bb\3\2\2\2\u03de\u03bc\3\2\2\2")
        buf.write("\u03de\u03bd\3\2\2\2\u03de\u03be\3\2\2\2\u03de\u03bf\3")
        buf.write("\2\2\2\u03de\u03c0\3\2\2\2\u03de\u03c1\3\2\2\2\u03de\u03c2")
        buf.write("\3\2\2\2\u03de\u03c3\3\2\2\2\u03de\u03c4\3\2\2\2\u03de")
        buf.write("\u03c5\3\2\2\2\u03de\u03c6\3\2\2\2\u03de\u03c7\3\2\2\2")
        buf.write("\u03de\u03c8\3\2\2\2\u03de\u03c9\3\2\2\2\u03de\u03ca\3")
        buf.write("\2\2\2\u03de\u03cb\3\2\2\2\u03de\u03cc\3\2\2\2\u03de\u03cd")
        buf.write("\3\2\2\2\u03de\u03ce\3\2\2\2\u03de\u03cf\3\2\2\2\u03de")
        buf.write("\u03d0\3\2\2\2\u03de\u03d1\3\2\2\2\u03de\u03d2\3\2\2\2")
        buf.write("\u03de\u03d3\3\2\2\2\u03de\u03d4\3\2\2\2\u03de\u03d5\3")
        buf.write("\2\2\2\u03de\u03d6\3\2\2\2\u03de\u03d7\3\2\2\2\u03de\u03d8")
        buf.write("\3\2\2\2\u03de\u03d9\3\2\2\2\u03de\u03da\3\2\2\2\u03de")
        buf.write("\u03db\3\2\2\2\u03de\u03dc\3\2\2\2\u03de\u03dd\3\2\2\2")
        buf.write("\u03df\'\3\2\2\2\u03e0\u03e1\7\f\2\2\u03e1\u03e2\7\r\2")
        buf.write("\2\u03e2)\3\2\2\2\u03e3\u03e4\t\3\2\2\u03e4+\3\2\2\2\u03e5")
        buf.write("\u03e6\7\f\2\2\u03e6\u03e7\7\t\2\2\u03e7\u03e8\7\r\2\2")
        buf.write("\u03e8-\3\2\2\2\u03e9\u03ea\7\u0089\2\2\u03ea\u03eb\7")
        buf.write("\u0110\2\2\u03eb/\3\2\2\2\u03ec\u03ed\7\u008a\2\2\u03ed")
        buf.write("\u03ee\7\u0110\2\2\u03ee\61\3\2\2\2\u03ef\u03f0\7\u0083")
        buf.write("\2\2\u03f0\u03f1\7\30\2\2\u03f1\u03f2\7\u00f3\2\2\u03f2")
        buf.write("\63\3\2\2\2\u03f3\u03f4\7\b\2\2\u03f4\u03f5\7\u0093\2")
        buf.write("\2\u03f5\65\3\2\2\2\u03f6\u03f7\7M\2\2\u03f7\u03f9\t\4")
        buf.write("\2\2\u03f8\u03fa\5,\27\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa")
        buf.write("\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd\5\u02f8\u017d")
        buf.write("\2\u03fc\u03fe\5B\"\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe")
        buf.write("\3\2\2\2\u03fe\u0400\3\2\2\2\u03ff\u0401\58\35\2\u0400")
        buf.write("\u03ff\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0405\3\2\2\2")
        buf.write("\u0402\u0403\7\u00a1\2\2\u0403\u0404\7\u00a4\2\2\u0404")
        buf.write("\u0406\5:\36\2\u0405\u0402\3\2\2\2\u0405\u0406\3\2\2\2")
        buf.write("\u0406\67\3\2\2\2\u0407\u0408\7\u008b\2\2\u0408\u0409")
        buf.write("\7\u0178\2\2\u04099\3\2\2\2\u040a\u040b\7\u015d\2\2\u040b")
        buf.write("\u040c\5<\37\2\u040c\u040d\7\u015e\2\2\u040d;\3\2\2\2")
        buf.write("\u040e\u0413\5\u0136\u009c\2\u040f\u0410\7\u015b\2\2\u0410")
        buf.write("\u0412\5\u0136\u009c\2\u0411\u040f\3\2\2\2\u0412\u0415")
        buf.write("\3\2\2\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("=\3\2\2\2\u0415\u0413\3\2\2\2\u0416\u0417\7\u00e9\2\2")
        buf.write("\u0417\u0418\5\u02f8\u017d\2\u0418?\3\2\2\2\u0419\u041a")
        buf.write("\7U\2\2\u041a\u041c\t\4\2\2\u041b\u041d\5(\25\2\u041c")
        buf.write("\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e\3\2\2\2")
        buf.write("\u041e\u0420\5\u02f8\u017d\2\u041f\u0421\5*\26\2\u0420")
        buf.write("\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421A\3\2\2\2\u0422")
        buf.write("\u0423\7X\2\2\u0423\u0424\7\u0178\2\2\u0424C\3\2\2\2\u0425")
        buf.write("\u0427\7M\2\2\u0426\u0428\7\u0096\2\2\u0427\u0426\3\2")
        buf.write("\2\2\u0427\u0428\3\2\2\2\u0428\u042a\3\2\2\2\u0429\u042b")
        buf.write("\7N\2\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b")
        buf.write("\u042c\3\2\2\2\u042c\u042e\7(\2\2\u042d\u042f\5,\27\2")
        buf.write("\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430\3")
        buf.write("\2\2\2\u0430\u0461\5\u0246\u0124\2\u0431\u0432\7\n\2\2")
        buf.write("\u0432\u0434\5\u0246\u0124\2\u0433\u0435\5\u012e\u0098")
        buf.write("\2\u0434\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0437")
        buf.write("\3\2\2\2\u0436\u0438\5\u0144\u00a3\2\u0437\u0436\3\2\2")
        buf.write("\2\u0437\u0438\3\2\2\2\u0438\u043a\3\2\2\2\u0439\u043b")
        buf.write("\5\u0146\u00a4\2\u043a\u0439\3\2\2\2\u043a\u043b\3\2\2")
        buf.write("\2\u043b\u043d\3\2\2\2\u043c\u043e\5\u0130\u0099\2\u043d")
        buf.write("\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0462\3\2\2\2")
        buf.write("\u043f\u0440\7\u015d\2\2\u0440\u0441\5\u014a\u00a6\2\u0441")
        buf.write("\u0442\7\u015e\2\2\u0442\u0444\3\2\2\2\u0443\u043f\3\2")
        buf.write("\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3\2\2\2\u0445\u0447")
        buf.write("\5\u011c\u008f\2\u0446\u0445\3\2\2\2\u0446\u0447\3\2\2")
        buf.write("\2\u0447\u0449\3\2\2\2\u0448\u044a\5\u011e\u0090\2\u0449")
        buf.write("\u0448\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044c\3\2\2\2")
        buf.write("\u044b\u044d\5\u0120\u0091\2\u044c\u044b\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u044f\3\2\2\2\u044e\u0450\5\u0122")
        buf.write("\u0092\2\u044f\u044e\3\2\2\2\u044f\u0450\3\2\2\2\u0450")
        buf.write("\u0452\3\2\2\2\u0451\u0453\5\u012e\u0098\2\u0452\u0451")
        buf.write("\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0455\3\2\2\2\u0454")
        buf.write("\u0456\5\u0144\u00a3\2\u0455\u0454\3\2\2\2\u0455\u0456")
        buf.write("\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0459\5\u0146\u00a4")
        buf.write("\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045b")
        buf.write("\3\2\2\2\u045a\u045c\5\u0130\u0099\2\u045b\u045a\3\2\2")
        buf.write("\2\u045b\u045c\3\2\2\2\u045c\u045f\3\2\2\2\u045d\u045e")
        buf.write("\7\30\2\2\u045e\u0460\5\u01c6\u00e4\2\u045f\u045d\3\2")
        buf.write("\2\2\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2\u0461\u0431")
        buf.write("\3\2\2\2\u0461\u0443\3\2\2\2\u0462E\3\2\2\2\u0463\u0464")
        buf.write("\7\u0101\2\2\u0464\u0465\7(\2\2\u0465\u046b\5\u00a8U\2")
        buf.write("\u0466\u0467\7*\2\2\u0467\u0468\7\u015d\2\2\u0468\u0469")
        buf.write("\5\u014e\u00a8\2\u0469\u046a\7\u015e\2\2\u046a\u046c\3")
        buf.write("\2\2\2\u046b\u0466\3\2\2\2\u046b\u046c\3\2\2\2\u046cG")
        buf.write("\3\2\2\2\u046d\u046e\7U\2\2\u046e\u0470\7(\2\2\u046f\u0471")
        buf.write("\5(\25\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2\2\u0471")
        buf.write("\u0472\3\2\2\2\u0472\u0474\5\u0246\u0124\2\u0473\u0475")
        buf.write("\7\u00d4\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475")
        buf.write("\u0477\3\2\2\2\u0476\u0478\5\26\f\2\u0477\u0476\3\2\2")
        buf.write("\2\u0477\u0478\3\2\2\2\u0478I\3\2\2\2\u0479\u047a\7O\2")
        buf.write("\2\u047a\u047b\7(\2\2\u047b\u047c\5\u0246\u0124\2\u047c")
        buf.write("\u047d\5L\'\2\u047d\u0493\3\2\2\2\u047e\u047f\7O\2\2\u047f")
        buf.write("\u0480\7\u00be\2\2\u0480\u0482\5\u0246\u0124\2\u0481\u0483")
        buf.write("\7\30\2\2\u0482\u0481\3\2\2\2\u0482\u0483\3\2\2\2\u0483")
        buf.write("\u0484\3\2\2\2\u0484\u0485\5R*\2\u0485\u0493\3\2\2\2\u0486")
        buf.write("\u0487\7O\2\2\u0487\u0488\7\u00c3\2\2\u0488\u0489\7\u00be")
        buf.write("\2\2\u0489\u048a\5\u0246\u0124\2\u048a\u048b\5T+\2\u048b")
        buf.write("\u0493\3\2\2\2\u048c\u048d\7O\2\2\u048d\u048e\t\4\2\2")
        buf.write("\u048e\u0493\5V,\2\u048f\u0490\7O\2\2\u0490\u0491\7+\2")
        buf.write("\2\u0491\u0493\5\u0086D\2\u0492\u0479\3\2\2\2\u0492\u047e")
        buf.write("\3\2\2\2\u0492\u0486\3\2\2\2\u0492\u048c\3\2\2\2\u0492")
        buf.write("\u048f\3\2\2\2\u0493K\3\2\2\2\u0494\u04a6\5^\60\2\u0495")
        buf.write("\u04a6\5z>\2\u0496\u04a6\5n8\2\u0497\u04a6\5r:\2\u0498")
        buf.write("\u04a6\5t;\2\u0499\u04a6\5v<\2\u049a\u04a6\5|?\2\u049b")
        buf.write("\u04a6\5\u0096L\2\u049c\u04a6\5\u0098M\2\u049d\u04a6\5")
        buf.write("P)\2\u049e\u04a6\5d\63\2\u049f\u04a6\5b\62\2\u04a0\u04a2")
        buf.write("\5\u02ea\u0176\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2\3\2\2")
        buf.write("\2\u04a2\u04a3\3\2\2\2\u04a3\u04a6\5N(\2\u04a4\u04a6\5")
        buf.write("\u00aeX\2\u04a5\u0494\3\2\2\2\u04a5\u0495\3\2\2\2\u04a5")
        buf.write("\u0496\3\2\2\2\u04a5\u0497\3\2\2\2\u04a5\u0498\3\2\2\2")
        buf.write("\u04a5\u0499\3\2\2\2\u04a5\u049a\3\2\2\2\u04a5\u049b\3")
        buf.write("\2\2\2\u04a5\u049c\3\2\2\2\u04a5\u049d\3\2\2\2\u04a5\u049e")
        buf.write("\3\2\2\2\u04a5\u049f\3\2\2\2\u04a5\u04a1\3\2\2\2\u04a5")
        buf.write("\u04a4\3\2\2\2\u04a6M\3\2\2\2\u04a7\u04b5\5\u0088E\2\u04a8")
        buf.write("\u04b5\5\u0094K\2\u04a9\u04b5\5\u009eP\2\u04aa\u04b5\5")
        buf.write("\u0084C\2\u04ab\u04b5\5\u009aN\2\u04ac\u04b5\5\u00a0Q")
        buf.write("\2\u04ad\u04b5\5\u008cG\2\u04ae\u04b5\5\u008aF\2\u04af")
        buf.write("\u04b5\5\u00acW\2\u04b0\u04b5\5h\65\2\u04b1\u04b5\5j\66")
        buf.write("\2\u04b2\u04b5\5f\64\2\u04b3\u04b5\5`\61\2\u04b4\u04a7")
        buf.write("\3\2\2\2\u04b4\u04a8\3\2\2\2\u04b4\u04a9\3\2\2\2\u04b4")
        buf.write("\u04aa\3\2\2\2\u04b4\u04ab\3\2\2\2\u04b4\u04ac\3\2\2\2")
        buf.write("\u04b4\u04ad\3\2\2\2\u04b4\u04ae\3\2\2\2\u04b4\u04af\3")
        buf.write("\2\2\2\u04b4\u04b0\3\2\2\2\u04b4\u04b1\3\2\2\2\u04b4\u04b2")
        buf.write("\3\2\2\2\u04b4\u04b3\3\2\2\2\u04b5O\3\2\2\2\u04b6\u04b7")
        buf.write("\7&\2\2\u04b7\u04b8\7Q\2\2\u04b8\u04b9\7\u015d\2\2\u04b9")
        buf.write("\u04ba\5\u0184\u00c3\2\u04ba\u04bb\7\u015e\2\2\u04bbQ")
        buf.write("\3\2\2\2\u04bc\u04c2\5~@\2\u04bd\u04c2\5^\60\2\u04be\u04c2")
        buf.write("\5n8\2\u04bf\u04c2\5z>\2\u04c0\u04c2\5\u01c6\u00e4\2\u04c1")
        buf.write("\u04bc\3\2\2\2\u04c1\u04bd\3\2\2\2\u04c1\u04be\3\2\2\2")
        buf.write("\u04c1\u04bf\3\2\2\2\u04c1\u04c0\3\2\2\2\u04c2S\3\2\2")
        buf.write("\2\u04c3\u04c6\5\u0080A\2\u04c4\u04c6\5\u0082B\2\u04c5")
        buf.write("\u04c3\3\2\2\2\u04c5\u04c4\3\2\2\2\u04c6U\3\2\2\2\u04c7")
        buf.write("\u04cb\5X-\2\u04c8\u04cb\5Z.\2\u04c9\u04cb\5\\/\2\u04ca")
        buf.write("\u04c7\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04c9\3\2\2\2")
        buf.write("\u04cbW\3\2\2\2\u04cc\u04cd\5\u02f8\u017d\2\u04cd\u04ce")
        buf.write("\7\u00a7\2\2\u04ce\u04cf\7\u00a4\2\2\u04cf\u04d0\5:\36")
        buf.write("\2\u04d0Y\3\2\2\2\u04d1\u04d2\5\u02f8\u017d\2\u04d2\u04d3")
        buf.write("\7\u00a7\2\2\u04d3\u04d4\7\u010b\2\2\u04d4\u04d5\5\u00f2")
        buf.write("z\2\u04d5[\3\2\2\2\u04d6\u04d7\5\u02f8\u017d\2\u04d7\u04d8")
        buf.write("\7\u00a7\2\2\u04d8\u04d9\7\u008b\2\2\u04d9\u04da\7\u0178")
        buf.write("\2\2\u04da]\3\2\2\2\u04db\u04dc\7V\2\2\u04dc\u04dd\7W")
        buf.write("\2\2\u04dd\u04de\5\u0246\u0124\2\u04de_\3\2\2\2\u04df")
        buf.write("\u04e0\t\5\2\2\u04e0\u04e1\7*\2\2\u04e1\u04e2\7\u015d")
        buf.write("\2\2\u04e2\u04e3\5\u0148\u00a5\2\u04e3\u04e5\7\u015e\2")
        buf.write("\2\u04e4\u04e6\5*\26\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6")
        buf.write("\3\2\2\2\u04e6a\3\2\2\2\u04e7\u04ea\7\u0092\2\2\u04e8")
        buf.write("\u04eb\5\u016a\u00b6\2\u04e9\u04eb\5\u0164\u00b3\2\u04ea")
        buf.write("\u04e8\3\2\2\2\u04ea\u04e9\3\2\2\2\u04ebc\3\2\2\2\u04ec")
        buf.write("\u04ed\7U\2\2\u04ed\u04ee\7\u012f\2\2\u04ee\u04ef\5\u02f8")
        buf.write("\u017d\2\u04efe\3\2\2\2\u04f0\u04f2\7P\2\2\u04f1\u04f3")
        buf.write("\7Q\2\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3")
        buf.write("\u04f4\3\2\2\2\u04f4\u04f5\5\u02f8\u017d\2\u04f5\u04f6")
        buf.write("\5\u02f8\u017d\2\u04f6\u04f8\5\u01a0\u00d1\2\u04f7\u04f9")
        buf.write("\5\u0192\u00ca\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2")
        buf.write("\2\u04f9\u04fc\3\2\2\2\u04fa\u04fb\7X\2\2\u04fb\u04fd")
        buf.write("\7\u0178\2\2\u04fc\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd")
        buf.write("\u04ff\3\2\2\2\u04fe\u0500\5l\67\2\u04ff\u04fe\3\2\2\2")
        buf.write("\u04ff\u0500\3\2\2\2\u0500\u0502\3\2\2\2\u0501\u0503\5")
        buf.write("*\26\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503g")
        buf.write("\3\2\2\2\u0504\u0505\7\u00ed\2\2\u0505\u0506\7\u00e8\2")
        buf.write("\2\u0506\u0508\7\u00f4\2\2\u0507\u0509\7Q\2\2\u0508\u0507")
        buf.write("\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050a\3\2\2\2\u050a")
        buf.write("\u050b\5\u02f8\u017d\2\u050b\u050c\7\u00a7\2\2\u050c\u050f")
        buf.write("\5\u0132\u009a\2\u050d\u050e\7X\2\2\u050e\u0510\7\u0178")
        buf.write("\2\2\u050f\u050d\3\2\2\2\u050f\u0510\3\2\2\2\u0510i\3")
        buf.write("\2\2\2\u0511\u0512\7\u00ed\2\2\u0512\u0513\7\u00e8\2\2")
        buf.write("\u0513\u0514\7\u00a7\2\2\u0514\u0515\5\u0132\u009a\2\u0515")
        buf.write("k\3\2\2\2\u0516\u051a\7R\2\2\u0517\u0518\7S\2\2\u0518")
        buf.write("\u051a\5\u02f8\u017d\2\u0519\u0516\3\2\2\2\u0519\u0517")
        buf.write("\3\2\2\2\u051am\3\2\2\2\u051b\u051d\7\u0092\2\2\u051c")
        buf.write("\u051e\5,\27\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2\2\2")
        buf.write("\u051e\u0520\3\2\2\2\u051f\u0521\5p9\2\u0520\u051f\3\2")
        buf.write("\2\2\u0521\u0522\3\2\2\2\u0522\u0520\3\2\2\2\u0522\u0523")
        buf.write("\3\2\2\2\u0523o\3\2\2\2\u0524\u0526\5\u02ea\u0176\2\u0525")
        buf.write("\u0527\5x=\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527")
        buf.write("q\3\2\2\2\u0528\u052c\7\u00e4\2\2\u0529\u052b\5\u02ea")
        buf.write("\u0176\2\u052a\u0529\3\2\2\2\u052b\u052e\3\2\2\2\u052c")
        buf.write("\u052a\3\2\2\2\u052c\u052d\3\2\2\2\u052ds\3\2\2\2\u052e")
        buf.write("\u052c\3\2\2\2\u052f\u0533\7\u00e5\2\2\u0530\u0532\5\u02ea")
        buf.write("\u0176\2\u0531\u0530\3\2\2\2\u0532\u0535\3\2\2\2\u0533")
        buf.write("\u0531\3\2\2\2\u0533\u0534\3\2\2\2\u0534u\3\2\2\2\u0535")
        buf.write("\u0533\3\2\2\2\u0536\u053a\7\u00e6\2\2\u0537\u0539\5\u02ea")
        buf.write("\u0176\2\u0538\u0537\3\2\2\2\u0539\u053c\3\2\2\2\u053a")
        buf.write("\u0538\3\2\2\2\u053a\u053b\3\2\2\2\u053bw\3\2\2\2\u053c")
        buf.write("\u053a\3\2\2\2\u053d\u053e\7\u008b\2\2\u053e\u053f\7\u0178")
        buf.write("\2\2\u053fy\3\2\2\2\u0540\u0542\7U\2\2\u0541\u0543\5(")
        buf.write("\25\2\u0542\u0541\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0544")
        buf.write("\3\2\2\2\u0544\u0549\5\u02ee\u0178\2\u0545\u0546\7\u015b")
        buf.write("\2\2\u0546\u0548\5\u02ee\u0178\2\u0547\u0545\3\2\2\2\u0548")
        buf.write("\u054b\3\2\2\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2\2\2")
        buf.write("\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054c\u054e\7")
        buf.write("\u00d4\2\2\u054d\u054c\3\2\2\2\u054d\u054e\3\2\2\2\u054e")
        buf.write("\u0550\3\2\2\2\u054f\u0551\5\26\f\2\u0550\u054f\3\2\2")
        buf.write("\2\u0550\u0551\3\2\2\2\u0551{\3\2\2\2\u0552\u0553\7\u00a7")
        buf.write("\2\2\u0553\u0554\7\u00a9\2\2\u0554\u055c\5\u0132\u009a")
        buf.write("\2\u0555\u0556\7\u00a8\2\2\u0556\u0558\7\u00a9\2\2\u0557")
        buf.write("\u0559\5(\25\2\u0558\u0557\3\2\2\2\u0558\u0559\3\2\2\2")
        buf.write("\u0559\u055a\3\2\2\2\u055a\u055c\5\u0132\u009a\2\u055b")
        buf.write("\u0552\3\2\2\2\u055b\u0555\3\2\2\2\u055c}\3\2\2\2\u055d")
        buf.write("\u055e\7\u00a7\2\2\u055e\u055f\7\u00a9\2\2\u055f\u0567")
        buf.write("\5\u0132\u009a\2\u0560\u0561\7\u00a8\2\2\u0561\u0563\7")
        buf.write("\u00a9\2\2\u0562\u0564\5(\25\2\u0563\u0562\3\2\2\2\u0563")
        buf.write("\u0564\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0567\5\u0132")
        buf.write("\u009a\2\u0566\u055d\3\2\2\2\u0566\u0560\3\2\2\2\u0567")
        buf.write("\177\3\2\2\2\u0568\u056b\5.\30\2\u0569\u056b\5\60\31\2")
        buf.write("\u056a\u0568\3\2\2\2\u056a\u0569\3\2\2\2\u056b\u0081\3")
        buf.write("\2\2\2\u056c\u056d\7-\2\2\u056d\u0083\3\2\2\2\u056e\u056f")
        buf.write("\7\u00a7\2\2\u056f\u0570\7\u00a0\2\2\u0570\u0574\7\u0178")
        buf.write("\2\2\u0571\u0572\7\u00a1\2\2\u0572\u0573\7\u00a3\2\2\u0573")
        buf.write("\u0575\5\u0132\u009a\2\u0574\u0571\3\2\2\2\u0574\u0575")
        buf.write("\3\2\2\2\u0575\u057a\3\2\2\2\u0576\u0577\7\u00a7\2\2\u0577")
        buf.write("\u0578\7\u00a3\2\2\u0578\u057a\5\u0132\u009a\2\u0579\u056e")
        buf.write("\3\2\2\2\u0579\u0576\3\2\2\2\u057a\u0085\3\2\2\2\u057b")
        buf.write("\u057c\5\u02f8\u017d\2\u057c\u057d\7%\2\2\u057d\u057f")
        buf.write("\5\u0246\u0124\2\u057e\u0580\5\u02ea\u0176\2\u057f\u057e")
        buf.write("\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0581\3\2\2\2\u0581")
        buf.write("\u0582\7-\2\2\u0582\u0087\3\2\2\2\u0583\u0584\7\u00a7")
        buf.write("\2\2\u0584\u0585\7\u0084\2\2\u0585\u0586\5\u00b0Y\2\u0586")
        buf.write("\u0089\3\2\2\2\u0587\u0588\7\t\2\2\u0588\u058d\7r\2\2")
        buf.write("\u0589\u058a\7\t\2\2\u058a\u058d\7s\2\2\u058b\u058d\5")
        buf.write("\u0120\u0091\2\u058c\u0587\3\2\2\2\u058c\u0589\3\2\2\2")
        buf.write("\u058c\u058b\3\2\2\2\u058d\u008b\3\2\2\2\u058e\u058f\7")
        buf.write("\u00a7\2\2\u058f\u0590\7\u00f0\2\2\u0590\u0591\7\u008b")
        buf.write("\2\2\u0591\u0592\5\u008eH\2\u0592\u008d\3\2\2\2\u0593")
        buf.write("\u0594\7\u015d\2\2\u0594\u0595\5\u0090I\2\u0595\u0596")
        buf.write("\7\u015e\2\2\u0596\u008f\3\2\2\2\u0597\u059c\5\u0092J")
        buf.write("\2\u0598\u0599\7\u015b\2\2\u0599\u059b\5\u0092J\2\u059a")
        buf.write("\u0598\3\2\2\2\u059b\u059e\3\2\2\2\u059c\u059a\3\2\2\2")
        buf.write("\u059c\u059d\3\2\2\2\u059d\u0091\3\2\2\2\u059e\u059c\3")
        buf.write("\2\2\2\u059f\u05a0\5\u0176\u00bc\2\u05a0\u05a1\7\u0163")
        buf.write("\2\2\u05a1\u05a2\7\u0178\2\2\u05a2\u0093\3\2\2\2\u05a3")
        buf.write("\u05a4\7\u00a7\2\2\u05a4\u05a5\7\u008b\2\2\u05a5\u05a6")
        buf.write("\7\u0178\2\2\u05a6\u0095\3\2\2\2\u05a7\u05ad\5\u0122\u0092")
        buf.write("\2\u05a8\u05a9\7\t\2\2\u05a9\u05ad\7\u00f0\2\2\u05aa\u05ab")
        buf.write("\7\t\2\2\u05ab\u05ad\5\62\32\2\u05ac\u05a7\3\2\2\2\u05ac")
        buf.write("\u05a8\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ad\u0097\3\2\2\2")
        buf.write("\u05ae\u05af\7\u0107\2\2\u05af\u05b0\5\u02ea\u0176\2\u05b0")
        buf.write("\u05b1\7\u00a1\2\2\u05b1\u05b2\7(\2\2\u05b2\u05b3\5\u0246")
        buf.write("\u0124\2\u05b3\u0099\3\2\2\2\u05b4\u05b5\7V\2\2\u05b5")
        buf.write("\u05b6\7W\2\2\u05b6\u05b7\5\u02ea\u0176\2\u05b7\u009b")
        buf.write("\3\2\2\2\u05b8\u05b9\7\u00ed\2\2\u05b9\u05ba\7\u00e8\2")
        buf.write("\2\u05ba\u05bc\7\u00f4\2\2\u05bb\u05bd\7Q\2\2\u05bc\u05bb")
        buf.write("\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\3\2\2\2\u05be")
        buf.write("\u05bf\5\u02f8\u017d\2\u05bf\u05c0\7\u00a7\2\2\u05c0\u05c3")
        buf.write("\5\u0132\u009a\2\u05c1\u05c2\7X\2\2\u05c2\u05c4\7\u0178")
        buf.write("\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u009d")
        buf.write("\3\2\2\2\u05c5\u05c6\7\u00eb\2\2\u05c6\u009f\3\2\2\2\u05c7")
        buf.write("\u05c8\7t\2\2\u05c8\u05c9\7\u017d\2\2\u05c9\u05ca\7u\2")
        buf.write("\2\u05ca\u00a1\3\2\2\2\u05cb\u05cc\7M\2\2\u05cc\u05cd")
        buf.write("\7+\2\2\u05cd\u05ce\5\u02f8\u017d\2\u05ce\u05cf\7%\2\2")
        buf.write("\u05cf\u05d0\7(\2\2\u05d0\u05d1\5\u0246\u0124\2\u05d1")
        buf.write("\u05d2\5\u0156\u00ac\2\u05d2\u05d3\7\30\2\2\u05d3\u05d7")
        buf.write("\7\u0178\2\2\u05d4\u05d5\7\u00a1\2\2\u05d5\u05d6\7\u00a2")
        buf.write("\2\2\u05d6\u05d8\7-\2\2\u05d7\u05d4\3\2\2\2\u05d7\u05d8")
        buf.write("\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05da\7\u00aa\2\2\u05da")
        buf.write("\u05dc\5\u0132\u009a\2\u05db\u05d9\3\2\2\2\u05db\u05dc")
        buf.write("\3\2\2\2\u05dc\u05e0\3\2\2\2\u05dd\u05de\7\u00c0\2\2\u05de")
        buf.write("\u05df\7(\2\2\u05df\u05e1\5\u0246\u0124\2\u05e0\u05dd")
        buf.write("\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e5\3\2\2\2\u05e2")
        buf.write("\u05e3\7q\2\2\u05e3\u05e4\7\24\2\2\u05e4\u05e6\5\u0156")
        buf.write("\u00ac\2\u05e5\u05e2\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6")
        buf.write("\u05eb\3\2\2\2\u05e7\u05e9\5\u012e\u0098\2\u05e8\u05e7")
        buf.write("\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea")
        buf.write("\u05ec\5\u0144\u00a3\2\u05eb\u05e8\3\2\2\2\u05eb\u05ec")
        buf.write("\3\2\2\2\u05ec\u05ef\3\2\2\2\u05ed\u05ee\7\u008b\2\2\u05ee")
        buf.write("\u05f0\5\u00a4S\2\u05ef\u05ed\3\2\2\2\u05ef\u05f0\3\2")
        buf.write("\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3\5\u0130\u0099\2\u05f2")
        buf.write("\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f5\3\2\2\2")
        buf.write("\u05f4\u05f6\5\u011c\u008f\2\u05f5\u05f4\3\2\2\2\u05f5")
        buf.write("\u05f6\3\2\2\2\u05f6\u00a3\3\2\2\2\u05f7\u05fc\5\u02f8")
        buf.write("\u017d\2\u05f8\u05f9\7\u0159\2\2\u05f9\u05fb\5\u02f8\u017d")
        buf.write("\2\u05fa\u05f8\3\2\2\2\u05fb\u05fe\3\2\2\2\u05fc\u05fa")
        buf.write("\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u00a5\3\2\2\2\u05fe")
        buf.write("\u05fc\3\2\2\2\u05ff\u0600\7U\2\2\u0600\u0601\7+\2\2\u0601")
        buf.write("\u0602\5\u02f8\u017d\2\u0602\u0603\7%\2\2\u0603\u0604")
        buf.write("\5\u0246\u0124\2\u0604\u00a7\3\2\2\2\u0605\u0607\5\u0246")
        buf.write("\u0124\2\u0606\u0608\5\u02ea\u0176\2\u0607\u0606\3\2\2")
        buf.write("\2\u0607\u0608\3\2\2\2\u0608\u00a9\3\2\2\2\u0609\u060a")
        buf.write("\7\7\2\2\u060a\u060b\7\u0144\2\2\u060b\u00ab\3\2\2\2\u060c")
        buf.write("\u060d\7\u010d\2\2\u060d\u060f\7\u0178\2\2\u060e\u0610")
        buf.write("\5\u00aaV\2\u060f\u060e\3\2\2\2\u060f\u0610\3\2\2\2\u0610")
        buf.write("\u0615\3\2\2\2\u0611\u0612\7\u00a1\2\2\u0612\u0613\7\34")
        buf.write("\2\2\u0613\u0614\7\u00a9\2\2\u0614\u0616\5\u0132\u009a")
        buf.write("\2\u0615\u0611\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u00ad")
        buf.write("\3\2\2\2\u0617\u0618\7\u00a7\2\2\u0618\u0619\7\u010b\2")
        buf.write("\2\u0619\u061a\5\u00f2z\2\u061a\u00af\3\2\2\2\u061b\u061c")
        buf.write("\7\u0085\2\2\u061c\u061d\7\u0178\2\2\u061d\u061e\7\u0086")
        buf.write("\2\2\u061e\u061f\7\u0178\2\2\u061f\u0620\7\u00a0\2\2\u0620")
        buf.write("\u0625\7\u0178\2\2\u0621\u0622\7\u0087\2\2\u0622\u0623")
        buf.write("\7\u0178\2\2\u0623\u0624\7\u0088\2\2\u0624\u0626\7\u0178")
        buf.write("\2\2\u0625\u0621\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u0629")
        buf.write("\3\2\2\2\u0627\u0629\5\u02f8\u017d\2\u0628\u061b\3\2\2")
        buf.write("\2\u0628\u0627\3\2\2\2\u0629\u00b1\3\2\2\2\u062a\u062b")
        buf.write("\7\u0085\2\2\u062b\u062c\7\u0178\2\2\u062c\u062d\7\u00a0")
        buf.write("\2\2\u062d\u062e\7\u0178\2\2\u062e\u00b3\3\2\2\2\u062f")
        buf.write("\u0632\5\u02f8\u017d\2\u0630\u0631\7\u0159\2\2\u0631\u0633")
        buf.write("\5\u02f8\u017d\2\u0632\u0630\3\2\2\2\u0632\u0633\3\2\2")
        buf.write("\2\u0633\u0641\3\2\2\2\u0634\u063e\5\u02f8\u017d\2\u0635")
        buf.write("\u063a\7\u0159\2\2\u0636\u063b\7\u00ac\2\2\u0637\u063b")
        buf.write("\7\u0080\2\2\u0638\u063b\7\u00ab\2\2\u0639\u063b\5\u02f8")
        buf.write("\u017d\2\u063a\u0636\3\2\2\2\u063a\u0637\3\2\2\2\u063a")
        buf.write("\u0638\3\2\2\2\u063a\u0639\3\2\2\2\u063b\u063d\3\2\2\2")
        buf.write("\u063c\u0635\3\2\2\2\u063d\u0640\3\2\2\2\u063e\u063c\3")
        buf.write("\2\2\2\u063e\u063f\3\2\2\2\u063f\u0642\3\2\2\2\u0640\u063e")
        buf.write("\3\2\2\2\u0641\u0634\3\2\2\2\u0641\u0642\3\2\2\2\u0642")
        buf.write("\u00b5\3\2\2\2\u0643\u0645\5\u00b4[\2\u0644\u0646\5\u02ea")
        buf.write("\u0176\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646")
        buf.write("\u00b7\3\2\2\2\u0647\u0649\5\u0246\u0124\2\u0648\u064a")
        buf.write("\5\u02ea\u0176\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2")
        buf.write("\2\u064a\u064c\3\2\2\2\u064b\u064d\5\u0152\u00aa\2\u064c")
        buf.write("\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u00b9\3\2\2\2")
        buf.write("\u064e\u065c\t\6\2\2\u064f\u0651\t\4\2\2\u0650\u0652\7")
        buf.write("\u009c\2\2\u0651\u0650\3\2\2\2\u0651\u0652\3\2\2\2\u0652")
        buf.write("\u0653\3\2\2\2\u0653\u065d\5\u02f8\u017d\2\u0654\u0656")
        buf.write("\7\u0097\2\2\u0655\u0657\7\u009c\2\2\u0656\u0655\3\2\2")
        buf.write("\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065d")
        buf.write("\5\u02f6\u017c\2\u0659\u065a\t\7\2\2\u065a\u065d\5\u00b8")
        buf.write("]\2\u065b\u065d\5\u00b8]\2\u065c\u064f\3\2\2\2\u065c\u0654")
        buf.write("\3\2\2\2\u065c\u0659\3\2\2\2\u065c\u065b\3\2\2\2\u065d")
        buf.write("\u00bb\3\2\2\2\u065e\u065f\7\u00d6\2\2\u065f\u0660\7(")
        buf.write("\2\2\u0660\u066d\5\u02e8\u0175\2\u0661\u0662\7\u00e7\2")
        buf.write("\2\u0662\u0669\7\u00e8\2\2\u0663\u066a\7\u0102\2\2\u0664")
        buf.write("\u0665\7\u00f4\2\2\u0665\u0667\7*\2\2\u0666\u0668\5\u014e")
        buf.write("\u00a8\2\u0667\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668")
        buf.write("\u066a\3\2\2\2\u0669\u0663\3\2\2\2\u0669\u0664\3\2\2\2")
        buf.write("\u0669\u066a\3\2\2\2\u066a\u066e\3\2\2\2\u066b\u066c\7")
        buf.write("\u012b\2\2\u066c\u066e\7H\2\2\u066d\u0661\3\2\2\2\u066d")
        buf.write("\u066b\3\2\2\2\u066e\u00bd\3\2\2\2\u066f\u0670\7/\2\2")
        buf.write("\u0670\u0673\t\b\2\2\u0671\u0672\7\n\2\2\u0672\u0674\5")
        buf.write("\u011a\u008e\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2")
        buf.write("\u0674\u06eb\3\2\2\2\u0675\u0676\7/\2\2\u0676\u0679\7")
        buf.write(")\2\2\u0677\u0678\t\t\2\2\u0678\u067a\5\u02f8\u017d\2")
        buf.write("\u0679\u0677\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067e\3")
        buf.write("\2\2\2\u067b\u067c\7\n\2\2\u067c\u067f\5\u011a\u008e\2")
        buf.write("\u067d\u067f\5\u011a\u008e\2\u067e\u067b\3\2\2\2\u067e")
        buf.write("\u067d\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u06eb\3\2\2\2")
        buf.write("\u0680\u0681\7/\2\2\u0681\u0684\7\u00bf\2\2\u0682\u0683")
        buf.write("\t\t\2\2\u0683\u0685\5\u02f8\u017d\2\u0684\u0682\3\2\2")
        buf.write("\2\u0684\u0685\3\2\2\2\u0685\u0689\3\2\2\2\u0686\u0687")
        buf.write("\7\n\2\2\u0687\u068a\5\u011a\u008e\2\u0688\u068a\5\u011a")
        buf.write("\u008e\2\u0689\u0686\3\2\2\2\u0689\u0688\3\2\2\2\u0689")
        buf.write("\u068a\3\2\2\2\u068a\u06eb\3\2\2\2\u068b\u068c\7/\2\2")
        buf.write("\u068c\u068d\7\u00c3\2\2\u068d\u0690\7\u00bf\2\2\u068e")
        buf.write("\u068f\t\t\2\2\u068f\u0691\5\u02f8\u017d\2\u0690\u068e")
        buf.write("\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0695\3\2\2\2\u0692")
        buf.write("\u0693\7\n\2\2\u0693\u0696\5\u011a\u008e\2\u0694\u0696")
        buf.write("\5\u011a\u008e\2\u0695\u0692\3\2\2\2\u0695\u0694\3\2\2")
        buf.write("\2\u0695\u0696\3\2\2\2\u0696\u06eb\3\2\2\2\u0697\u0698")
        buf.write("\7/\2\2\u0698\u0699\7*\2\2\u0699\u069a\t\t\2\2\u069a\u069d")
        buf.write("\5\u0246\u0124\2\u069b\u069c\t\t\2\2\u069c\u069e\5\u02f8")
        buf.write("\u017d\2\u069d\u069b\3\2\2\2\u069d\u069e\3\2\2\2\u069e")
        buf.write("\u06a2\3\2\2\2\u069f\u06a0\7\n\2\2\u06a0\u06a3\5\u011a")
        buf.write("\u008e\2\u06a1\u06a3\5\u011a\u008e\2\u06a2\u069f\3\2\2")
        buf.write("\2\u06a2\u06a1\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06eb")
        buf.write("\3\2\2\2\u06a4\u06a5\7/\2\2\u06a5\u06a9\7.\2\2\u06a6\u06a7")
        buf.write("\7\n\2\2\u06a7\u06aa\5\u0118\u008d\2\u06a8\u06aa\5\u0118")
        buf.write("\u008d\2\u06a9\u06a6\3\2\2\2\u06a9\u06a8\3\2\2\2\u06a9")
        buf.write("\u06aa\3\2\2\2\u06aa\u06eb\3\2\2\2\u06ab\u06ac\7/\2\2")
        buf.write("\u06ac\u06ad\7\'\2\2\u06ad\u06af\5\u0246\u0124\2\u06ae")
        buf.write("\u06b0\5\u02ea\u0176\2\u06af\u06ae\3\2\2\2\u06af\u06b0")
        buf.write("\3\2\2\2\u06b0\u06eb\3\2\2\2\u06b1\u06b2\7/\2\2\u06b2")
        buf.write("\u06b7\7M\2\2\u06b3\u06b4\t\4\2\2\u06b4\u06b8\5\u02f8")
        buf.write("\u017d\2\u06b5\u06b6\7(\2\2\u06b6\u06b8\5\u0246\u0124")
        buf.write("\2\u06b7\u06b3\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b8\u06eb")
        buf.write("\3\2\2\2\u06b9\u06ba\7/\2\2\u06ba\u06bb\7(\2\2\u06bb\u06be")
        buf.write("\7\u009c\2\2\u06bc\u06bd\t\t\2\2\u06bd\u06bf\5\u02f8\u017d")
        buf.write("\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0")
        buf.write("\3\2\2\2\u06c0\u06c1\7\n\2\2\u06c1\u06c3\5\u011a\u008e")
        buf.write("\2\u06c2\u06c4\5\u02ea\u0176\2\u06c3\u06c2\3\2\2\2\u06c3")
        buf.write("\u06c4\3\2\2\2\u06c4\u06eb\3\2\2\2\u06c5\u06c6\7/\2\2")
        buf.write("\u06c6\u06c7\7\u00a9\2\2\u06c7\u06cb\5\u0246\u0124\2\u06c8")
        buf.write("\u06c9\7\u015d\2\2\u06c9\u06ca\7\u0178\2\2\u06ca\u06cc")
        buf.write("\7\u015e\2\2\u06cb\u06c8\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc")
        buf.write("\u06eb\3\2\2\2\u06cd\u06ce\7/\2\2\u06ce\u06da\7\u00cb")
        buf.write("\2\2\u06cf\u06d0\t\4\2\2\u06d0\u06d2\5\u02f8\u017d\2\u06d1")
        buf.write("\u06d3\7\u009c\2\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3\3\2")
        buf.write("\2\2\u06d3\u06db\3\2\2\2\u06d4\u06d6\5\u00b6\\\2\u06d5")
        buf.write("\u06d4\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8\3\2\2\2")
        buf.write("\u06d7\u06d9\7\u009c\2\2\u06d8\u06d7\3\2\2\2\u06d8\u06d9")
        buf.write("\3\2\2\2\u06d9\u06db\3\2\2\2\u06da\u06cf\3\2\2\2\u06da")
        buf.write("\u06d5\3\2\2\2\u06db\u06eb\3\2\2\2\u06dc\u06dd\7/\2\2")
        buf.write("\u06dd\u06eb\7\u010e\2\2\u06de\u06df\7/\2\2\u06df\u06eb")
        buf.write("\7\u010f\2\2\u06e0\u06e1\7/\2\2\u06e1\u06e2\7\u0113\2")
        buf.write("\2\u06e2\u06eb\7\u0178\2\2\u06e3\u06e4\7/\2\2\u06e4\u06e8")
        buf.write("\7\u0145\2\2\u06e5\u06e6\7\u0146\2\2\u06e6\u06e9\5\u02f8")
        buf.write("\u017d\2\u06e7\u06e9\7\u0148\2\2\u06e8\u06e5\3\2\2\2\u06e8")
        buf.write("\u06e7\3\2\2\2\u06e9\u06eb\3\2\2\2\u06ea\u066f\3\2\2\2")
        buf.write("\u06ea\u0675\3\2\2\2\u06ea\u0680\3\2\2\2\u06ea\u068b\3")
        buf.write("\2\2\2\u06ea\u0697\3\2\2\2\u06ea\u06a4\3\2\2\2\u06ea\u06ab")
        buf.write("\3\2\2\2\u06ea\u06b1\3\2\2\2\u06ea\u06b9\3\2\2\2\u06ea")
        buf.write("\u06c5\3\2\2\2\u06ea\u06cd\3\2\2\2\u06ea\u06dc\3\2\2\2")
        buf.write("\u06ea\u06de\3\2\2\2\u06ea\u06e0\3\2\2\2\u06ea\u06e3\3")
        buf.write("\2\2\2\u06eb\u00bf\3\2\2\2\u06ec\u06ed\7\u00ca\2\2\u06ed")
        buf.write("\u06ee\7(\2\2\u06ee\u06f0\5\u0246\u0124\2\u06ef\u06f1")
        buf.write("\5\u02ea\u0176\2\u06f0\u06ef\3\2\2\2\u06f0\u06f1\3\2\2")
        buf.write("\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\5\u00c4c\2\u06f3\u00c1")
        buf.write("\3\2\2\2\u06f4\u06f5\7\u00ca\2\2\u06f5\u06f6\t\4\2\2\u06f6")
        buf.write("\u06f7\5\u02f8\u017d\2\u06f7\u06f8\5\u00c4c\2\u06f8\u00c3")
        buf.write("\3\2\2\2\u06f9\u06fa\t\n\2\2\u06fa\u00c5\3\2\2\2\u06fb")
        buf.write("\u06fc\7\u00cc\2\2\u06fc\u06fd\7(\2\2\u06fd\u06ff\5\u0246")
        buf.write("\u0124\2\u06fe\u0700\5\u02ea\u0176\2\u06ff\u06fe\3\2\2")
        buf.write("\2\u06ff\u0700\3\2\2\2\u0700\u00c7\3\2\2\2\u0701\u0702")
        buf.write("\7\u00cc\2\2\u0702\u0703\t\4\2\2\u0703\u0704\5\u02f8\u017d")
        buf.write("\2\u0704\u00c9\3\2\2\2\u0705\u0706\7M\2\2\u0706\u0707")
        buf.write("\7\u0104\2\2\u0707\u0708\5\u02f8\u017d\2\u0708\u00cb\3")
        buf.write("\2\2\2\u0709\u070a\7U\2\2\u070a\u070b\7\u0104\2\2\u070b")
        buf.write("\u070c\5\u02f8\u017d\2\u070c\u00cd\3\2\2\2\u070d\u070e")
        buf.write("\7\u00c6\2\2\u070e\u0710\5\u00eav\2\u070f\u0711\5\u00e4")
        buf.write("s\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0712")
        buf.write("\3\2\2\2\u0712\u0713\7W\2\2\u0713\u0715\5\u00f0y\2\u0714")
        buf.write("\u0716\5\u00f4{\2\u0715\u0714\3\2\2\2\u0715\u0716\3\2")
        buf.write("\2\2\u0716\u00cf\3\2\2\2\u0717\u0719\7\u00c7\2\2\u0718")
        buf.write("\u071a\5\u00f6|\2\u0719\u0718\3\2\2\2\u0719\u071a\3\2")
        buf.write("\2\2\u071a\u071b\3\2\2\2\u071b\u071d\5\u00eav\2\u071c")
        buf.write("\u071e\5\u00e4s\2\u071d\u071c\3\2\2\2\u071d\u071e\3\2")
        buf.write("\2\2\u071e\u071f\3\2\2\2\u071f\u0720\7\27\2\2\u0720\u0721")
        buf.write("\5\u00f0y\2\u0721\u00d1\3\2\2\2\u0722\u0724\7\u00c6\2")
        buf.write("\2\u0723\u0725\7\u0104\2\2\u0724\u0723\3\2\2\2\u0724\u0725")
        buf.write("\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0727\5\u021e\u0110")
        buf.write("\2\u0727\u0728\7W\2\2\u0728\u072a\5\u00f0y\2\u0729\u072b")
        buf.write("\5\u00fa~\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072b")
        buf.write("\u00d3\3\2\2\2\u072c\u072e\7\u00c7\2\2\u072d\u072f\5\u00f8")
        buf.write("}\2\u072e\u072d\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0731")
        buf.write("\3\2\2\2\u0730\u0732\7\u0104\2\2\u0731\u0730\3\2\2\2\u0731")
        buf.write("\u0732\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734\5\u021e")
        buf.write("\u0110\2\u0734\u0735\7\27\2\2\u0735\u0736\5\u00f0y\2\u0736")
        buf.write("\u00d5\3\2\2\2\u0737\u0738\7/\2\2\u0738\u0739\7\u0104")
        buf.write("\2\2\u0739\u073a\7\u00c6\2\2\u073a\u073b\5\u00f2z\2\u073b")
        buf.write("\u00d7\3\2\2\2\u073c\u073d\7/\2\2\u073d\u073e\7\u0105")
        buf.write("\2\2\u073e\u00d9\3\2\2\2\u073f\u0740\7/\2\2\u0740\u0741")
        buf.write("\7\u00f9\2\2\u0741\u0742\7\u0105\2\2\u0742\u00db\3\2\2")
        buf.write("\2\u0743\u0744\7\u00a7\2\2\u0744\u0748\7\u0104\2\2\u0745")
        buf.write("\u0749\7\5\2\2\u0746\u0749\7\6\2\2\u0747\u0749\5\u02f8")
        buf.write("\u017d\2\u0748\u0745\3\2\2\2\u0748\u0746\3\2\2\2\u0748")
        buf.write("\u0747\3\2\2\2\u0749\u00dd\3\2\2\2\u074a\u074b\7/\2\2")
        buf.write("\u074b\u074d\7\u00c6\2\2\u074c\u074e\5\u00f2z\2\u074d")
        buf.write("\u074c\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u0751\3\2\2\2")
        buf.write("\u074f\u0750\7%\2\2\u0750\u0752\5\u00e2r\2\u0751\u074f")
        buf.write("\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u00df\3\2\2\2\u0753")
        buf.write("\u0754\7/\2\2\u0754\u0755\7\u010c\2\2\u0755\u0756\5\u02f8")
        buf.write("\u017d\2\u0756\u00e1\3\2\2\2\u0757\u075a\7\5\2\2\u0758")
        buf.write("\u075a\5\u00e8u\2\u0759\u0757\3\2\2\2\u0759\u0758\3\2")
        buf.write("\2\2\u075a\u00e3\3\2\2\2\u075b\u075c\7%\2\2\u075c\u075d")
        buf.write("\5\u00e6t\2\u075d\u00e5\3\2\2\2\u075e\u075f\t\4\2\2\u075f")
        buf.write("\u076c\5\u02f8\u017d\2\u0760\u0762\7(\2\2\u0761\u0760")
        buf.write("\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0763\3\2\2\2\u0763")
        buf.write("\u0765\5\u0246\u0124\2\u0764\u0766\5\u02ea\u0176\2\u0765")
        buf.write("\u0764\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u076c\3\2\2\2")
        buf.write("\u0767\u0768\7\u0108\2\2\u0768\u076c\7\u0178\2\2\u0769")
        buf.write("\u076a\7\u0109\2\2\u076a\u076c\5\u02f8\u017d\2\u076b\u075e")
        buf.write("\3\2\2\2\u076b\u0761\3\2\2\2\u076b\u0767\3\2\2\2\u076b")
        buf.write("\u0769\3\2\2\2\u076c\u00e7\3\2\2\2\u076d\u076e\t\4\2\2")
        buf.write("\u076e\u0781\5\u02f8\u017d\2\u076f\u0771\7(\2\2\u0770")
        buf.write("\u076f\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0772\3\2\2\2")
        buf.write("\u0772\u0777\5\u0246\u0124\2\u0773\u0774\7\u015d\2\2\u0774")
        buf.write("\u0775\5\u014e\u00a8\2\u0775\u0776\7\u015e\2\2\u0776\u0778")
        buf.write("\3\2\2\2\u0777\u0773\3\2\2\2\u0777\u0778\3\2\2\2\u0778")
        buf.write("\u077a\3\2\2\2\u0779\u077b\5\u02ea\u0176\2\u077a\u0779")
        buf.write("\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u0781\3\2\2\2\u077c")
        buf.write("\u077d\7\u0108\2\2\u077d\u0781\7\u0178\2\2\u077e\u077f")
        buf.write("\7\u0109\2\2\u077f\u0781\5\u02f8\u017d\2\u0780\u076d\3")
        buf.write("\2\2\2\u0780\u0770\3\2\2\2\u0780\u077c\3\2\2\2\u0780\u077e")
        buf.write("\3\2\2\2\u0781\u00e9\3\2\2\2\u0782\u0787\5\u00ecw\2\u0783")
        buf.write("\u0784\7\u015b\2\2\u0784\u0786\5\u00ecw\2\u0785\u0783")
        buf.write("\3\2\2\2\u0786\u0789\3\2\2\2\u0787\u0785\3\2\2\2\u0787")
        buf.write("\u0788\3\2\2\2\u0788\u00eb\3\2\2\2\u0789\u0787\3\2\2\2")
        buf.write("\u078a\u078f\5\u00eex\2\u078b\u078c\7\u015d\2\2\u078c")
        buf.write("\u078d\5\u014e\u00a8\2\u078d\u078e\7\u015e\2\2\u078e\u0790")
        buf.write("\3\2\2\2\u078f\u078b\3\2\2\2\u078f\u0790\3\2\2\2\u0790")
        buf.write("\u00ed\3\2\2\2\u0791\u0792\t\13\2\2\u0792\u00ef\3\2\2")
        buf.write("\2\u0793\u0798\5\u00f2z\2\u0794\u0795\7\u015b\2\2\u0795")
        buf.write("\u0797\5\u00f2z\2\u0796\u0794\3\2\2\2\u0797\u079a\3\2")
        buf.write("\2\2\u0798\u0796\3\2\2\2\u0798\u0799\3\2\2\2\u0799\u00f1")
        buf.write("\3\2\2\2\u079a\u0798\3\2\2\2\u079b\u079c\7\u0103\2\2\u079c")
        buf.write("\u07a2\5\u02fc\u017f\2\u079d\u079e\7\23\2\2\u079e\u07a2")
        buf.write("\5\u02fc\u017f\2\u079f\u07a0\7\u0104\2\2\u07a0\u07a2\5")
        buf.write("\u02f8\u017d\2\u07a1\u079b\3\2\2\2\u07a1\u079d\3\2\2\2")
        buf.write("\u07a1\u079f\3\2\2\2\u07a2\u00f3\3\2\2\2\u07a3\u07a4\7")
        buf.write("\u00a1\2\2\u07a4\u07a5\7\u00c6\2\2\u07a5\u07a6\7\u00ea")
        buf.write("\2\2\u07a6\u00f5\3\2\2\2\u07a7\u07a8\7\u00c6\2\2\u07a8")
        buf.write("\u07a9\7\u00ea\2\2\u07a9\u07aa\7\u00f4\2\2\u07aa\u00f7")
        buf.write("\3\2\2\2\u07ab\u07ac\7\u010a\2\2\u07ac\u07ad\7\u00ea\2")
        buf.write("\2\u07ad\u07ae\7\u00f4\2\2\u07ae\u00f9\3\2\2\2\u07af\u07b0")
        buf.write("\7\u00a1\2\2\u07b0\u07b1\7\u010a\2\2\u07b1\u07b2\7\u00ea")
        buf.write("\2\2\u07b2\u00fb\3\2\2\2\u07b3\u07b5\7\60\2\2\u07b4\u07b6")
        buf.write("\7\61\2\2\u07b5\u07b4\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6")
        buf.write("\u07c0\3\2\2\2\u07b7\u07b8\7(\2\2\u07b8\u07bb\5\u0246")
        buf.write("\u0124\2\u07b9\u07ba\t\f\2\2\u07ba\u07bc\7\'\2\2\u07bb")
        buf.write("\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07c1\3\2\2\2")
        buf.write("\u07bd\u07bf\5\u02ea\u0176\2\u07be\u07bd\3\2\2\2\u07be")
        buf.write("\u07bf\3\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07b7\3\2\2\2")
        buf.write("\u07c0\u07be\3\2\2\2\u07c1\u00fd\3\2\2\2\u07c2\u07c7\5")
        buf.write("\u0100\u0081\2\u07c3\u07c4\7\u015b\2\2\u07c4\u07c6\5\u0100")
        buf.write("\u0081\2\u07c5\u07c3\3\2\2\2\u07c6\u07c9\3\2\2\2\u07c7")
        buf.write("\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u00ff\3\2\2\2")
        buf.write("\u07c9\u07c7\3\2\2\2\u07ca\u07cb\5\u0102\u0082\2\u07cb")
        buf.write("\u07cc\7\u0178\2\2\u07cc\u0101\3\2\2\2\u07cd\u07ce\t\r")
        buf.write("\2\2\u07ce\u0103\3\2\2\2\u07cf\u07d1\7M\2\2\u07d0\u07d2")
        buf.write("\7\u0096\2\2\u07d1\u07d0\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2")
        buf.write("\u07d3\3\2\2\2\u07d3\u07d4\7\u0097\2\2\u07d4\u07d5\5\u02fa")
        buf.write("\u017e\2\u07d5\u07d6\7\30\2\2\u07d6\u07d9\7\u0178\2\2")
        buf.write("\u07d7\u07d8\7>\2\2\u07d8\u07da\5\u00fe\u0080\2\u07d9")
        buf.write("\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u0105\3\2\2\2")
        buf.write("\u07db\u07dd\7U\2\2\u07dc\u07de\7\u0096\2\2\u07dd\u07dc")
        buf.write("\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07df\3\2\2\2\u07df")
        buf.write("\u07e1\7\u0097\2\2\u07e0\u07e2\5(\25\2\u07e1\u07e0\3\2")
        buf.write("\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e4")
        buf.write("\5\u02fa\u017e\2\u07e4\u0107\3\2\2\2\u07e5\u07e6\7\u0115")
        buf.write("\2\2\u07e6\u07e7\7\u0097\2\2\u07e7\u0109\3\2\2\2\u07e8")
        buf.write("\u07e9\7M\2\2\u07e9\u07ea\7\u0096\2\2\u07ea\u07eb\7\u0098")
        buf.write("\2\2\u07eb\u07ec\7\u017e\2\2\u07ec\u07ee\7\u015d\2\2\u07ed")
        buf.write("\u07ef\5\u0148\u00a5\2\u07ee\u07ed\3\2\2\2\u07ee\u07ef")
        buf.write("\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f1\7\u015e\2\2\u07f1")
        buf.write("\u07f2\5\u02d4\u016b\2\u07f2\u010b\3\2\2\2\u07f3\u07f4")
        buf.write("\7U\2\2\u07f4\u07f5\7\u0096\2\2\u07f5\u07f7\7\u0098\2")
        buf.write("\2\u07f6\u07f8\5(\25\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8")
        buf.write("\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fa\7\u017e\2\2\u07fa")
        buf.write("\u010d\3\2\2\2\u07fb\u07fd\7M\2\2\u07fc\u07fe\5\64\33")
        buf.write("\2\u07fd\u07fc\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0800")
        buf.write("\3\2\2\2\u07ff\u0801\7\u0096\2\2\u0800\u07ff\3\2\2\2\u0800")
        buf.write("\u0801\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0804\7\u00be")
        buf.write("\2\2\u0803\u0805\5,\27\2\u0804\u0803\3\2\2\2\u0804\u0805")
        buf.write("\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u080b\5\u0246\u0124")
        buf.write("\2\u0807\u0808\7\u015d\2\2\u0808\u0809\5\u017e\u00c0\2")
        buf.write("\u0809\u080a\7\u015e\2\2\u080a\u080c\3\2\2\2\u080b\u0807")
        buf.write("\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080e\3\2\2\2\u080d")
        buf.write("\u080f\5\u011c\u008f\2\u080e\u080d\3\2\2\2\u080e\u080f")
        buf.write("\3\2\2\2\u080f\u0811\3\2\2\2\u0810\u0812\5\u0112\u008a")
        buf.write("\2\u0811\u0810\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0814")
        buf.write("\3\2\2\2\u0813\u0815\5\u0130\u0099\2\u0814\u0813\3\2\2")
        buf.write("\2\u0814\u0815\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u0817")
        buf.write("\7\30\2\2\u0817\u0818\5\u01c6\u00e4\2\u0818\u010f\3\2")
        buf.write("\2\2\u0819\u081a\7M\2\2\u081a\u081b\7\u00c3\2\2\u081b")
        buf.write("\u081d\7\u00be\2\2\u081c\u081e\5,\27\2\u081d\u081c\3\2")
        buf.write("\2\2\u081d\u081e\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0821")
        buf.write("\5\u0246\u0124\2\u0820\u0822\5\60\31\2\u0821\u0820\3\2")
        buf.write("\2\2\u0821\u0822\3\2\2\2\u0822\u0824\3\2\2\2\u0823\u0825")
        buf.write("\5\u011c\u008f\2\u0824\u0823\3\2\2\2\u0824\u0825\3\2\2")
        buf.write("\2\u0825\u0827\3\2\2\2\u0826\u0828\5\u012e\u0098\2\u0827")
        buf.write("\u0826\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u082a\3\2\2\2")
        buf.write("\u0829\u082b\5\u0144\u00a3\2\u082a\u0829\3\2\2\2\u082a")
        buf.write("\u082b\3\2\2\2\u082b\u082d\3\2\2\2\u082c\u082e\5\u0146")
        buf.write("\u00a4\2\u082d\u082c\3\2\2\2\u082d\u082e\3\2\2\2\u082e")
        buf.write("\u0830\3\2\2\2\u082f\u0831\5\u0130\u0099\2\u0830\u082f")
        buf.write("\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0832\3\2\2\2\u0832")
        buf.write("\u0833\7\30\2\2\u0833\u0834\5\u01c6\u00e4\2\u0834\u0111")
        buf.write("\3\2\2\2\u0835\u0836\7q\2\2\u0836\u0837\7%\2\2\u0837\u0838")
        buf.write("\7\u015d\2\2\u0838\u0839\5\u014e\u00a8\2\u0839\u083a\7")
        buf.write("\u015e\2\2\u083a\u0113\3\2\2\2\u083b\u083c\7U\2\2\u083c")
        buf.write("\u083e\7\u00be\2\2\u083d\u083f\5(\25\2\u083e\u083d\3\2")
        buf.write("\2\2\u083e\u083f\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0841")
        buf.write("\5\u0248\u0125\2\u0841\u0115\3\2\2\2\u0842\u0843\7U\2")
        buf.write("\2\u0843\u0844\7\u00c3\2\2\u0844\u0846\7\u00be\2\2\u0845")
        buf.write("\u0847\5(\25\2\u0846\u0845\3\2\2\2\u0846\u0847\3\2\2\2")
        buf.write("\u0847\u0848\3\2\2\2\u0848\u0849\5\u0248\u0125\2\u0849")
        buf.write("\u0117\3\2\2\2\u084a\u084d\5\u02fa\u017e\2\u084b\u084d")
        buf.write("\7\u0178\2\2\u084c\u084a\3\2\2\2\u084c\u084b\3\2\2\2\u084d")
        buf.write("\u0119\3\2\2\2\u084e\u0851\5\u02f8\u017d\2\u084f\u0851")
        buf.write("\7\u0178\2\2\u0850\u084e\3\2\2\2\u0850\u084f\3\2\2\2\u0851")
        buf.write("\u011b\3\2\2\2\u0852\u0853\7X\2\2\u0853\u0854\7\u0178")
        buf.write("\2\2\u0854\u011d\3\2\2\2\u0855\u0856\7q\2\2\u0856\u0857")
        buf.write("\7\24\2\2\u0857\u0858\7\u015d\2\2\u0858\u085d\5\u018a")
        buf.write("\u00c6\2\u0859\u085a\7\u015b\2\2\u085a\u085c\5\u018a\u00c6")
        buf.write("\2\u085b\u0859\3\2\2\2\u085c\u085f\3\2\2\2\u085d\u085b")
        buf.write("\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860\3\2\2\2\u085f")
        buf.write("\u085d\3\2\2\2\u0860\u0861\7\u015e\2\2\u0861\u011f\3\2")
        buf.write("\2\2\u0862\u0863\7r\2\2\u0863\u0864\7\24\2\2\u0864\u0865")
        buf.write("\7\u015d\2\2\u0865\u0866\5\u014e\u00a8\2\u0866\u086d\7")
        buf.write("\u015e\2\2\u0867\u0868\7s\2\2\u0868\u0869\7\24\2\2\u0869")
        buf.write("\u086a\7\u015d\2\2\u086a\u086b\5\u0154\u00ab\2\u086b\u086c")
        buf.write("\7\u015e\2\2\u086c\u086e\3\2\2\2\u086d\u0867\3\2\2\2\u086d")
        buf.write("\u086e\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0870\7t\2\2")
        buf.write("\u0870\u0871\7\u017d\2\2\u0871\u0872\7u\2\2\u0872\u0121")
        buf.write("\3\2\2\2\u0873\u0874\7\u00f0\2\2\u0874\u0875\7\24\2\2")
        buf.write("\u0875\u0876\7\u015d\2\2\u0876\u0877\5\u014e\u00a8\2\u0877")
        buf.write("\u0878\7\u015e\2\2\u0878\u0879\7%\2\2\u0879\u087a\7\u015d")
        buf.write("\2\2\u087a\u087b\5\u016c\u00b7\2\u087b\u087d\7\u015e\2")
        buf.write("\2\u087c\u087e\5\62\32\2\u087d\u087c\3\2\2\2\u087d\u087e")
        buf.write("\3\2\2\2\u087e\u0123\3\2\2\2\u087f\u0882\5\u012a\u0096")
        buf.write("\2\u0880\u0882\5\u012c\u0097\2\u0881\u087f\3\2\2\2\u0881")
        buf.write("\u0880\3\2\2\2\u0882\u0125\3\2\2\2\u0883\u0884\7\u00df")
        buf.write("\2\2\u0884\u0885\7\u0178\2\2\u0885\u0127\3\2\2\2\u0886")
        buf.write("\u0887\7\u00e0\2\2\u0887\u0888\7\u0178\2\2\u0888\u0129")
        buf.write("\3\2\2\2\u0889\u088a\7v\2\2\u088a\u088b\7x\2\2\u088b\u088c")
        buf.write("\7\u00a0\2\2\u088c\u0890\7\u0178\2\2\u088d\u088e\7\u00a1")
        buf.write("\2\2\u088e\u088f\7\u00a3\2\2\u088f\u0891\5\u0132\u009a")
        buf.write("\2\u0890\u088d\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u012b")
        buf.write("\3\2\2\2\u0892\u0893\7v\2\2\u0893\u0894\7x\2\2\u0894\u0896")
        buf.write("\7y\2\2\u0895\u0897\5\u013a\u009e\2\u0896\u0895\3\2\2")
        buf.write("\2\u0896\u0897\3\2\2\2\u0897\u0899\3\2\2\2\u0898\u089a")
        buf.write("\5\u013c\u009f\2\u0899\u0898\3\2\2\2\u0899\u089a\3\2\2")
        buf.write("\2\u089a\u089c\3\2\2\2\u089b\u089d\5\u013e\u00a0\2\u089c")
        buf.write("\u089b\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u089f\3\2\2\2")
        buf.write("\u089e\u08a0\5\u0140\u00a1\2\u089f\u089e\3\2\2\2\u089f")
        buf.write("\u08a0\3\2\2\2\u08a0\u08a2\3\2\2\2\u08a1\u08a3\5\u0142")
        buf.write("\u00a2\2\u08a2\u08a1\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3")
        buf.write("\u012d\3\2\2\2\u08a4\u08a7\5\u012c\u0097\2\u08a5\u08a7")
        buf.write("\5\u012a\u0096\2\u08a6\u08a4\3\2\2\2\u08a6\u08a5\3\2\2")
        buf.write("\2\u08a7\u012f\3\2\2\2\u08a8\u08a9\7\u00a9\2\2\u08a9\u08aa")
        buf.write("\5\u0132\u009a\2\u08aa\u0131\3\2\2\2\u08ab\u08ac\7\u015d")
        buf.write("\2\2\u08ac\u08ad\5\u0134\u009b\2\u08ad\u08ae\7\u015e\2")
        buf.write("\2\u08ae\u0133\3\2\2\2\u08af\u08b4\5\u0136\u009c\2\u08b0")
        buf.write("\u08b1\7\u015b\2\2\u08b1\u08b3\5\u0136\u009c\2\u08b2\u08b0")
        buf.write("\3\2\2\2\u08b3\u08b6\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b4")
        buf.write("\u08b5\3\2\2\2\u08b5\u08c0\3\2\2\2\u08b6\u08b4\3\2\2\2")
        buf.write("\u08b7\u08bc\5\u0138\u009d\2\u08b8\u08b9\7\u015b\2\2\u08b9")
        buf.write("\u08bb\5\u0138\u009d\2\u08ba\u08b8\3\2\2\2\u08bb\u08be")
        buf.write("\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd")
        buf.write("\u08c0\3\2\2\2\u08be\u08bc\3\2\2\2\u08bf\u08af\3\2\2\2")
        buf.write("\u08bf\u08b7\3\2\2\2\u08c0\u0135\3\2\2\2\u08c1\u08c2\7")
        buf.write("\u0178\2\2\u08c2\u08c3\7\u0163\2\2\u08c3\u08c4\7\u0178")
        buf.write("\2\2\u08c4\u0137\3\2\2\2\u08c5\u08c6\7\u0178\2\2\u08c6")
        buf.write("\u0139\3\2\2\2\u08c7\u08c8\7z\2\2\u08c8\u08c9\7{\2\2\u08c9")
        buf.write("\u08ca\7\24\2\2\u08ca\u08ce\7\u0178\2\2\u08cb\u08cc\7")
        buf.write("|\2\2\u08cc\u08cd\7\24\2\2\u08cd\u08cf\7\u0178\2\2\u08ce")
        buf.write("\u08cb\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u013b\3\2\2\2")
        buf.write("\u08d0\u08d1\7}\2\2\u08d1\u08d2\7~\2\2\u08d2\u08d3\7{")
        buf.write("\2\2\u08d3\u08d4\7\24\2\2\u08d4\u08d5\7\u0178\2\2\u08d5")
        buf.write("\u013d\3\2\2\2\u08d6\u08d7\7n\2\2\u08d7\u08d8\7\177\2")
        buf.write("\2\u08d8\u08d9\7{\2\2\u08d9\u08da\7\24\2\2\u08da\u08db")
        buf.write("\7\u0178\2\2\u08db\u013f\3\2\2\2\u08dc\u08dd\7\u0082\2")
        buf.write("\2\u08dd\u08de\7{\2\2\u08de\u08df\7\24\2\2\u08df\u08e0")
        buf.write("\7\u0178\2\2\u08e0\u0141\3\2\2\2\u08e1\u08e2\7L\2\2\u08e2")
        buf.write("\u08e3\7\u00ad\2\2\u08e3\u08e4\7\30\2\2\u08e4\u08e5\7")
        buf.write("\u0178\2\2\u08e5\u0143\3\2\2\2\u08e6\u08e7\7\u0083\2\2")
        buf.write("\u08e7\u08e8\7\30\2\2\u08e8\u08e9\7\u0085\2\2\u08e9\u08ea")
        buf.write("\7\u0178\2\2\u08ea\u08eb\7\u0086\2\2\u08eb\u08f0\7\u0178")
        buf.write("\2\2\u08ec\u08ed\7\u0087\2\2\u08ed\u08ee\7\u0178\2\2\u08ee")
        buf.write("\u08ef\7\u0088\2\2\u08ef\u08f1\7\u0178\2\2\u08f0\u08ec")
        buf.write("\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08fe\3\2\2\2\u08f2")
        buf.write("\u08f3\7\u0083\2\2\u08f3\u08f4\7\24\2\2\u08f4\u08f8\7")
        buf.write("\u0178\2\2\u08f5\u08f6\7\u00a1\2\2\u08f6\u08f7\7\u00a3")
        buf.write("\2\2\u08f7\u08f9\5\u0132\u009a\2\u08f8\u08f5\3\2\2\2\u08f8")
        buf.write("\u08f9\3\2\2\2\u08f9\u08fe\3\2\2\2\u08fa\u08fb\7\u0083")
        buf.write("\2\2\u08fb\u08fc\7\30\2\2\u08fc\u08fe\5\u02f8\u017d\2")
        buf.write("\u08fd\u08e6\3\2\2\2\u08fd\u08f2\3\2\2\2\u08fd\u08fa\3")
        buf.write("\2\2\2\u08fe\u0145\3\2\2\2\u08ff\u0900\7\u008b\2\2\u0900")
        buf.write("\u0901\7\u0178\2\2\u0901\u0147\3\2\2\2\u0902\u0907\5\u0184")
        buf.write("\u00c3\2\u0903\u0904\7\u015b\2\2\u0904\u0906\5\u0184\u00c3")
        buf.write("\2\u0905\u0903\3\2\2\2\u0906\u0909\3\2\2\2\u0907\u0905")
        buf.write("\3\2\2\2\u0907\u0908\3\2\2\2\u0908\u0149\3\2\2\2\u0909")
        buf.write("\u0907\3\2\2\2\u090a\u090f\5\u0186\u00c4\2\u090b\u090c")
        buf.write("\7\u015b\2\2\u090c\u090e\5\u0186\u00c4\2\u090d\u090b\3")
        buf.write("\2\2\2\u090e\u0911\3\2\2\2\u090f\u090d\3\2\2\2\u090f\u0910")
        buf.write("\3\2\2\2\u0910\u014b\3\2\2\2\u0911\u090f\3\2\2\2\u0912")
        buf.write("\u0917\5\u019e\u00d0\2\u0913\u0914\7\u015b\2\2\u0914\u0916")
        buf.write("\5\u019e\u00d0\2\u0915\u0913\3\2\2\2\u0916\u0919\3\2\2")
        buf.write("\2\u0917\u0915\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u014d")
        buf.write("\3\2\2\2\u0919\u0917\3\2\2\2\u091a\u091f\5\u0150\u00a9")
        buf.write("\2\u091b\u091c\7\u015b\2\2\u091c\u091e\5\u0150\u00a9\2")
        buf.write("\u091d\u091b\3\2\2\2\u091e\u0921\3\2\2\2\u091f\u091d\3")
        buf.write("\2\2\2\u091f\u0920\3\2\2\2\u0920\u014f\3\2\2\2\u0921\u091f")
        buf.write("\3\2\2\2\u0922\u0923\5\u02f8\u017d\2\u0923\u0151\3\2\2")
        buf.write("\2\u0924\u092e\5\u02f8\u017d\2\u0925\u092a\7\u0159\2\2")
        buf.write("\u0926\u092b\7\u00ac\2\2\u0927\u092b\7\u0080\2\2\u0928")
        buf.write("\u092b\7\u00ab\2\2\u0929\u092b\5\u02f8\u017d\2\u092a\u0926")
        buf.write("\3\2\2\2\u092a\u0927\3\2\2\2\u092a\u0928\3\2\2\2\u092a")
        buf.write("\u0929\3\2\2\2\u092b\u092d\3\2\2\2\u092c\u0925\3\2\2\2")
        buf.write("\u092d\u0930\3\2\2\2\u092e\u092c\3\2\2\2\u092e\u092f\3")
        buf.write("\2\2\2\u092f\u0153\3\2\2\2\u0930\u092e\3\2\2\2\u0931\u0936")
        buf.write("\5\u017c\u00bf\2\u0932\u0933\7\u015b\2\2\u0933\u0935\5")
        buf.write("\u017c\u00bf\2\u0934\u0932\3\2\2\2\u0935\u0938\3\2\2\2")
        buf.write("\u0936\u0934\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0155\3")
        buf.write("\2\2\2\u0938\u0936\3\2\2\2\u0939\u093a\7\u015d\2\2\u093a")
        buf.write("\u093b\5\u014e\u00a8\2\u093b\u093c\7\u015e\2\2\u093c\u0157")
        buf.write("\3\2\2\2\u093d\u093f\5\u015a\u00ae\2\u093e\u0940\5\u015c")
        buf.write("\u00af\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2\2\u0940")
        buf.write("\u0943\3\2\2\2\u0941\u0943\5\u015e\u00b0\2\u0942\u093d")
        buf.write("\3\2\2\2\u0942\u0941\3\2\2\2\u0943\u0159\3\2\2\2\u0944")
        buf.write("\u0945\t\16\2\2\u0945\u015b\3\2\2\2\u0946\u0947\t\17\2")
        buf.write("\2\u0947\u015d\3\2\2\2\u0948\u094c\7\u0130\2\2\u0949\u094a")
        buf.write("\7\t\2\2\u094a\u094c\7\u0130\2\2\u094b\u0948\3\2\2\2\u094b")
        buf.write("\u0949\3\2\2\2\u094c\u015f\3\2\2\2\u094d\u0952\7\u0133")
        buf.write("\2\2\u094e\u0950\7\u0134\2\2\u094f\u094e\3\2\2\2\u094f")
        buf.write("\u0950\3\2\2\2\u0950\u0952\3\2\2\2\u0951\u094d\3\2\2\2")
        buf.write("\u0951\u094f\3\2\2\2\u0952\u0161\3\2\2\2\u0953\u0954\7")
        buf.write("\u012f\2\2\u0954\u0956\5\u02f8\u017d\2\u0955\u0953\3\2")
        buf.write("\2\2\u0955\u0956\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u0959")
        buf.write("\5\u0166\u00b4\2\u0958\u095a\5\u019a\u00ce\2\u0959\u0958")
        buf.write("\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u0163\3\2\2\2\u095b")
        buf.write("\u095c\7\u012f\2\2\u095c\u095d\5\u02f8\u017d\2\u095d\u095f")
        buf.write("\5\u0166\u00b4\2\u095e\u0960\5\u019c\u00cf\2\u095f\u095e")
        buf.write("\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0165\3\2\2\2\u0961")
        buf.write("\u0962\5\u0198\u00cd\2\u0962\u0963\5\u0156\u00ac\2\u0963")
        buf.write("\u0167\3\2\2\2\u0964\u0965\7\u012f\2\2\u0965\u0967\5\u02f8")
        buf.write("\u017d\2\u0966\u0964\3\2\2\2\u0966\u0967\3\2\2\2\u0967")
        buf.write("\u0968\3\2\2\2\u0968\u0969\7\u012d\2\2\u0969\u096a\7\u0136")
        buf.write("\2\2\u096a\u096b\5\u0156\u00ac\2\u096b\u096c\7\u012e\2")
        buf.write("\2\u096c\u096d\5\u0246\u0124\2\u096d\u096f\5\u0156\u00ac")
        buf.write("\2\u096e\u0970\5\u019a\u00ce\2\u096f\u096e\3\2\2\2\u096f")
        buf.write("\u0970\3\2\2\2\u0970\u0169\3\2\2\2\u0971\u0972\7\u012f")
        buf.write("\2\2\u0972\u0973\5\u02f8\u017d\2\u0973\u0974\7\u012d\2")
        buf.write("\2\u0974\u0975\7\u0136\2\2\u0975\u0976\5\u0156\u00ac\2")
        buf.write("\u0976\u0977\7\u012e\2\2\u0977\u0978\5\u0246\u0124\2\u0978")
        buf.write("\u097a\5\u0156\u00ac\2\u0979\u097b\5\u019c\u00cf\2\u097a")
        buf.write("\u0979\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u016b\3\2\2\2")
        buf.write("\u097c\u097f\5\u0172\u00ba\2\u097d\u097f\5\u016e\u00b8")
        buf.write("\2\u097e\u097c\3\2\2\2\u097e\u097d\3\2\2\2\u097f\u016d")
        buf.write("\3\2\2\2\u0980\u0985\5\u0170\u00b9\2\u0981\u0982\7\u015b")
        buf.write("\2\2\u0982\u0984\5\u0170\u00b9\2\u0983\u0981\3\2\2\2\u0984")
        buf.write("\u0987\3\2\2\2\u0985\u0983\3\2\2\2\u0985\u0986\3\2\2\2")
        buf.write("\u0986\u016f\3\2\2\2\u0987\u0985\3\2\2\2\u0988\u0989\7")
        buf.write("\u015d\2\2\u0989\u098a\5\u0172\u00ba\2\u098a\u098b\7\u015e")
        buf.write("\2\2\u098b\u0171\3\2\2\2\u098c\u0991\5\u0174\u00bb\2\u098d")
        buf.write("\u098e\7\u015b\2\2\u098e\u0990\5\u0174\u00bb\2\u098f\u098d")
        buf.write("\3\2\2\2\u0990\u0993\3\2\2\2\u0991\u098f\3\2\2\2\u0991")
        buf.write("\u0992\3\2\2\2\u0992\u0173\3\2\2\2\u0993\u0991\3\2\2\2")
        buf.write("\u0994\u0995\5\u02a0\u0151\2\u0995\u0175\3\2\2\2\u0996")
        buf.write("\u0999\5\u0174\u00bb\2\u0997\u0999\5\u0170\u00b9\2\u0998")
        buf.write("\u0996\3\2\2\2\u0998\u0997\3\2\2\2\u0999\u0177\3\2\2\2")
        buf.write("\u099a\u099b\t\20\2\2\u099b\u0179\3\2\2\2\u099c\u099d")
        buf.write("\7\20\2\2\u099d\u09a1\7R\2\2\u099e\u099f\7\20\2\2\u099f")
        buf.write("\u09a1\7\21\2\2\u09a0\u099c\3\2\2\2\u09a0\u099e\3\2\2")
        buf.write("\2\u09a1\u017b\3\2\2\2\u09a2\u09a4\5\u02f8\u017d\2\u09a3")
        buf.write("\u09a5\5\u0178\u00bd\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5")
        buf.write("\3\2\2\2\u09a5\u09a7\3\2\2\2\u09a6\u09a8\5\u017a\u00be")
        buf.write("\2\u09a7\u09a6\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u017d")
        buf.write("\3\2\2\2\u09a9\u09ae\5\u0180\u00c1\2\u09aa\u09ab\7\u015b")
        buf.write("\2\2\u09ab\u09ad\5\u0180\u00c1\2\u09ac\u09aa\3\2\2\2\u09ad")
        buf.write("\u09b0\3\2\2\2\u09ae\u09ac\3\2\2\2\u09ae\u09af\3\2\2\2")
        buf.write("\u09af\u017f\3\2\2\2\u09b0\u09ae\3\2\2\2\u09b1\u09b4\5")
        buf.write("\u02f8\u017d\2\u09b2\u09b3\7X\2\2\u09b3\u09b5\7\u0178")
        buf.write("\2\2\u09b4\u09b2\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5\u0181")
        buf.write("\3\2\2\2\u09b6\u09b8\5\u02d4\u016b\2\u09b7\u09b9\5\u0178")
        buf.write("\u00bd\2\u09b8\u09b7\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9")
        buf.write("\u09bb\3\2\2\2\u09ba\u09bc\5\u017a\u00be\2\u09bb\u09ba")
        buf.write("\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u0183\3\2\2\2\u09bd")
        buf.write("\u09be\5\u02f8\u017d\2\u09be\u09c1\5\u01a0\u00d1\2\u09bf")
        buf.write("\u09c0\7X\2\2\u09c0\u09c2\7\u0178\2\2\u09c1\u09bf\3\2")
        buf.write("\2\2\u09c1\u09c2\3\2\2\2\u09c2\u0185\3\2\2\2\u09c3\u09c6")
        buf.write("\5\u0188\u00c5\2\u09c4\u09c6\5\u018a\u00c6\2\u09c5\u09c3")
        buf.write("\3\2\2\2\u09c5\u09c4\3\2\2\2\u09c6\u0187\3\2\2\2\u09c7")
        buf.write("\u09ca\5\u0168\u00b5\2\u09c8\u09ca\5\u0162\u00b2\2\u09c9")
        buf.write("\u09c7\3\2\2\2\u09c9\u09c8\3\2\2\2\u09ca\u0189\3\2\2\2")
        buf.write("\u09cb\u09cc\5\u02f8\u017d\2\u09cc\u09ce\5\u01a0\u00d1")
        buf.write("\2\u09cd\u09cf\5\u018c\u00c7\2\u09ce\u09cd\3\2\2\2\u09ce")
        buf.write("\u09cf\3\2\2\2\u09cf\u09d2\3\2\2\2\u09d0\u09d1\7X\2\2")
        buf.write("\u09d1\u09d3\7\u0178\2\2\u09d2\u09d0\3\2\2\2\u09d2\u09d3")
        buf.write("\3\2\2\2\u09d3\u018b\3\2\2\2\u09d4\u09d7\5\u018e\u00c8")
        buf.write("\2\u09d5\u09d7\5\u0190\u00c9\2\u09d6\u09d4\3\2\2\2\u09d6")
        buf.write("\u09d5\3\2\2\2\u09d7\u018d\3\2\2\2\u09d8\u09d9\7\u012f")
        buf.write("\2\2\u09d9\u09db\5\u02f8\u017d\2\u09da\u09d8\3\2\2\2\u09da")
        buf.write("\u09db\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09dd\7\u012e")
        buf.write("\2\2\u09dd\u09de\5\u0246\u0124\2\u09de\u09df\7\u015d\2")
        buf.write("\2\u09df\u09e0\5\u0150\u00a9\2\u09e0\u09e2\7\u015e\2\2")
        buf.write("\u09e1\u09e3\5\u019a\u00ce\2\u09e2\u09e1\3\2\2\2\u09e2")
        buf.write("\u09e3\3\2\2\2\u09e3\u018f\3\2\2\2\u09e4\u09e5\7\u012f")
        buf.write("\2\2\u09e5\u09e7\5\u02f8\u017d\2\u09e6\u09e4\3\2\2\2\u09e6")
        buf.write("\u09e7\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8\u09ea\5\u0198")
        buf.write("\u00cd\2\u09e9\u09eb\5\u019a\u00ce\2\u09ea\u09e9\3\2\2")
        buf.write("\2\u09ea\u09eb\3\2\2\2\u09eb\u0191\3\2\2\2\u09ec\u09ef")
        buf.write("\5\u0194\u00cb\2\u09ed\u09ef\5\u0196\u00cc\2\u09ee\u09ec")
        buf.write("\3\2\2\2\u09ee\u09ed\3\2\2\2\u09ef\u0193\3\2\2\2\u09f0")
        buf.write("\u09f1\7\u012f\2\2\u09f1\u09f3\5\u02f8\u017d\2\u09f2\u09f0")
        buf.write("\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4")
        buf.write("\u09f5\7\u012e\2\2\u09f5\u09f6\5\u0246\u0124\2\u09f6\u09f7")
        buf.write("\7\u015d\2\2\u09f7\u09f8\5\u0150\u00a9\2\u09f8\u09fa\7")
        buf.write("\u015e\2\2\u09f9\u09fb\5\u019c\u00cf\2\u09fa\u09f9\3\2")
        buf.write("\2\2\u09fa\u09fb\3\2\2\2\u09fb\u0195\3\2\2\2\u09fc\u09fd")
        buf.write("\7\u012f\2\2\u09fd\u09ff\5\u02f8\u017d\2\u09fe\u09fc\3")
        buf.write("\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a02")
        buf.write("\5\u0198\u00cd\2\u0a01\u0a03\5\u019c\u00cf\2\u0a02\u0a01")
        buf.write("\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0197\3\2\2\2\u0a04")
        buf.write("\u0a05\7\u012c\2\2\u0a05\u0a06\7\u0136\2\2\u0a06\u0199")
        buf.write("\3\2\2\2\u0a07\u0a08\5\u0158\u00ad\2\u0a08\u0a09\5\u0160")
        buf.write("\u00b1\2\u0a09\u019b\3\2\2\2\u0a0a\u0a0b\5\u0158\u00ad")
        buf.write("\2\u0a0b\u0a0c\5\u0160\u00b1\2\u0a0c\u019d\3\2\2\2\u0a0d")
        buf.write("\u0a0e\5\u02f8\u017d\2\u0a0e\u0a0f\7\u015a\2\2\u0a0f\u0a12")
        buf.write("\5\u01a0\u00d1\2\u0a10\u0a11\7X\2\2\u0a11\u0a13\7\u0178")
        buf.write("\2\2\u0a12\u0a10\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u019f")
        buf.write("\3\2\2\2\u0a14\u0a15\5\u01a4\u00d3\2\u0a15\u01a1\3\2\2")
        buf.write("\2\u0a16\u0a1b\5\u01a0\u00d1\2\u0a17\u0a18\7\u015b\2\2")
        buf.write("\u0a18\u0a1a\5\u01a0\u00d1\2\u0a19\u0a17\3\2\2\2\u0a1a")
        buf.write("\u0a1d\3\2\2\2\u0a1b\u0a19\3\2\2\2\u0a1b\u0a1c\3\2\2\2")
        buf.write("\u0a1c\u01a3\3\2\2\2\u0a1d\u0a1b\3\2\2\2\u0a1e\u0a24\5")
        buf.write("\u01a6\u00d4\2\u0a1f\u0a24\5\u01a8\u00d5\2\u0a20\u0a24")
        buf.write("\5\u01aa\u00d6\2\u0a21\u0a24\5\u01ac\u00d7\2\u0a22\u0a24")
        buf.write("\5\u01ae\u00d8\2\u0a23\u0a1e\3\2\2\2\u0a23\u0a1f\3\2\2")
        buf.write("\2\u0a23\u0a20\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a23\u0a22")
        buf.write("\3\2\2\2\u0a24\u01a5\3\2\2\2\u0a25\u0a4e\7Z\2\2\u0a26")
        buf.write("\u0a4e\7[\2\2\u0a27\u0a4e\7\\\2\2\u0a28\u0a4e\7\u00b8")
        buf.write("\2\2\u0a29\u0a4e\7]\2\2\u0a2a\u0a4e\7Y\2\2\u0a2b\u0a4e")
        buf.write("\7^\2\2\u0a2c\u0a2e\7_\2\2\u0a2d\u0a2f\7`\2\2\u0a2e\u0a2d")
        buf.write("\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a4e\3\2\2\2\u0a30")
        buf.write("\u0a4e\7a\2\2\u0a31\u0a4e\7b\2\2\u0a32\u0a4e\7c\2\2\u0a33")
        buf.write("\u0a4e\7d\2\2\u0a34\u0a35\7c\2\2\u0a35\u0a36\7\u00a1\2")
        buf.write("\2\u0a36\u0a37\7\63\2\2\u0a37\u0a38\7e\2\2\u0a38\u0a4e")
        buf.write("\7f\2\2\u0a39\u0a4e\7i\2\2\u0a3a\u0a4e\7\u00da\2\2\u0a3b")
        buf.write("\u0a43\7h\2\2\u0a3c\u0a3d\7\u015d\2\2\u0a3d\u0a40\7\u017d")
        buf.write("\2\2\u0a3e\u0a3f\7\u015b\2\2\u0a3f\u0a41\7\u017d\2\2\u0a40")
        buf.write("\u0a3e\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a42\3\2\2\2")
        buf.write("\u0a42\u0a44\7\u015e\2\2\u0a43\u0a3c\3\2\2\2\u0a43\u0a44")
        buf.write("\3\2\2\2\u0a44\u0a4e\3\2\2\2\u0a45\u0a46\7k\2\2\u0a46")
        buf.write("\u0a47\7\u015d\2\2\u0a47\u0a48\7\u017d\2\2\u0a48\u0a4e")
        buf.write("\7\u015e\2\2\u0a49\u0a4a\7j\2\2\u0a4a\u0a4b\7\u015d\2")
        buf.write("\2\u0a4b\u0a4c\7\u017d\2\2\u0a4c\u0a4e\7\u015e\2\2\u0a4d")
        buf.write("\u0a25\3\2\2\2\u0a4d\u0a26\3\2\2\2\u0a4d\u0a27\3\2\2\2")
        buf.write("\u0a4d\u0a28\3\2\2\2\u0a4d\u0a29\3\2\2\2\u0a4d\u0a2a\3")
        buf.write("\2\2\2\u0a4d\u0a2b\3\2\2\2\u0a4d\u0a2c\3\2\2\2\u0a4d\u0a30")
        buf.write("\3\2\2\2\u0a4d\u0a31\3\2\2\2\u0a4d\u0a32\3\2\2\2\u0a4d")
        buf.write("\u0a33\3\2\2\2\u0a4d\u0a34\3\2\2\2\u0a4d\u0a39\3\2\2\2")
        buf.write("\u0a4d\u0a3a\3\2\2\2\u0a4d\u0a3b\3\2\2\2\u0a4d\u0a45\3")
        buf.write("\2\2\2\u0a4d\u0a49\3\2\2\2\u0a4e\u01a7\3\2\2\2\u0a4f\u0a50")
        buf.write("\7l\2\2\u0a50\u0a51\7\u0167\2\2\u0a51\u0a52\5\u01a4\u00d3")
        buf.write("\2\u0a52\u0a53\7\u0169\2\2\u0a53\u01a9\3\2\2\2\u0a54\u0a55")
        buf.write("\7m\2\2\u0a55\u0a56\7\u0167\2\2\u0a56\u0a57\5\u014c\u00a7")
        buf.write("\2\u0a57\u0a58\7\u0169\2\2\u0a58\u01ab\3\2\2\2\u0a59\u0a5a")
        buf.write("\7n\2\2\u0a5a\u0a5b\7\u0167\2\2\u0a5b\u0a5c\5\u01a6\u00d4")
        buf.write("\2\u0a5c\u0a5d\7\u015b\2\2\u0a5d\u0a5e\5\u01a4\u00d3\2")
        buf.write("\u0a5e\u0a5f\7\u0169\2\2\u0a5f\u01ad\3\2\2\2\u0a60\u0a61")
        buf.write("\7o\2\2\u0a61\u0a62\7\u0167\2\2\u0a62\u0a63\5\u01a2\u00d2")
        buf.write("\2\u0a63\u0a64\7\u0169\2\2\u0a64\u01af\3\2\2\2\u0a65\u0a66")
        buf.write("\7B\2\2\u0a66\u0a7e\7\5\2\2\u0a67\u0a69\7B\2\2\u0a68\u0a6a")
        buf.write("\7\32\2\2\u0a69\u0a68\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a")
        buf.write("\u0a7e\3\2\2\2\u0a6b\u0a6c\7\u00bd\2\2\u0a6c\u0a7e\7\5")
        buf.write("\2\2\u0a6d\u0a6f\7\u00bd\2\2\u0a6e\u0a70\7\32\2\2\u0a6f")
        buf.write("\u0a6e\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a7e\3\2\2\2")
        buf.write("\u0a71\u0a72\7C\2\2\u0a72\u0a7e\7\5\2\2\u0a73\u0a75\7")
        buf.write("C\2\2\u0a74\u0a76\7\32\2\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76")
        buf.write("\3\2\2\2\u0a76\u0a7e\3\2\2\2\u0a77\u0a78\7\u00bb\2\2\u0a78")
        buf.write("\u0a7e\7\5\2\2\u0a79\u0a7b\7\u00bb\2\2\u0a7a\u0a7c\7\32")
        buf.write("\2\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7e")
        buf.write("\3\2\2\2\u0a7d\u0a65\3\2\2\2\u0a7d\u0a67\3\2\2\2\u0a7d")
        buf.write("\u0a6b\3\2\2\2\u0a7d\u0a6d\3\2\2\2\u0a7d\u0a71\3\2\2\2")
        buf.write("\u0a7d\u0a73\3\2\2\2\u0a7d\u0a77\3\2\2\2\u0a7d\u0a79\3")
        buf.write("\2\2\2\u0a7e\u01b1\3\2\2\2\u0a7f\u0a81\5\u01b6\u00dc\2")
        buf.write("\u0a80\u0a7f\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81\u0a82\3")
        buf.write("\2\2\2\u0a82\u0a83\5\u01b4\u00db\2\u0a83\u01b3\3\2\2\2")
        buf.write("\u0a84\u0a87\5\u01ba\u00de\2\u0a85\u0a87\5\u01be\u00e0")
        buf.write("\2\u0a86\u0a84\3\2\2\2\u0a86\u0a85\3\2\2\2\u0a87\u01b5")
        buf.write("\3\2\2\2\u0a88\u0a89\7\u00a1\2\2\u0a89\u0a8e\5\u01b8\u00dd")
        buf.write("\2\u0a8a\u0a8b\7\u015b\2\2\u0a8b\u0a8d\5\u01b8\u00dd\2")
        buf.write("\u0a8c\u0a8a\3\2\2\2\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8c\3")
        buf.write("\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u01b7\3\2\2\2\u0a90\u0a8e")
        buf.write("\3\2\2\2\u0a91\u0a93\5\u02f8\u017d\2\u0a92\u0a94\7\30")
        buf.write("\2\2\u0a93\u0a92\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94\u0a95")
        buf.write("\3\2\2\2\u0a95\u0a96\7\u015d\2\2\u0a96\u0a97\5\u01b2\u00da")
        buf.write("\2\u0a97\u0a98\7\u015e\2\2\u0a98\u01b9\3\2\2\2\u0a99\u0a9f")
        buf.write("\5\u01bc\u00df\2\u0a9a\u0a9b\5\u01b0\u00d9\2\u0a9b\u0a9c")
        buf.write("\5\u01bc\u00df\2\u0a9c\u0a9e\3\2\2\2\u0a9d\u0a9a\3\2\2")
        buf.write("\2\u0a9e\u0aa1\3\2\2\2\u0a9f\u0a9d\3\2\2\2\u0a9f\u0aa0")
        buf.write("\3\2\2\2\u0aa0\u01bb\3\2\2\2\u0aa1\u0a9f\3\2\2\2\u0aa2")
        buf.write("\u0aa4\5\u0220\u0111\2\u0aa3\u0aa5\5\u01c8\u00e5\2\u0aa4")
        buf.write("\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa4\3\2\2\2")
        buf.write("\u0aa6\u0aa7\3\2\2\2\u0aa7\u01bd\3\2\2\2\u0aa8\u0aab\5")
        buf.write("\u01ca\u00e6\2\u0aa9\u0aac\5\u01c2\u00e2\2\u0aaa\u0aac")
        buf.write("\5\u0256\u012c\2\u0aab\u0aa9\3\2\2\2\u0aab\u0aaa\3\2\2")
        buf.write("\2\u0aac\u0aaf\3\2\2\2\u0aad\u0aaf\5\u01c2\u00e2\2\u0aae")
        buf.write("\u0aa8\3\2\2\2\u0aae\u0aad\3\2\2\2\u0aaf\u01bf\3\2\2\2")
        buf.write("\u0ab0\u0ab2\5\u01fa\u00fe\2\u0ab1\u0ab3\5\u0220\u0111")
        buf.write("\2\u0ab2\u0ab1\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab5")
        buf.write("\3\2\2\2\u0ab4\u0ab6\5\u0252\u012a\2\u0ab5\u0ab4\3\2\2")
        buf.write("\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ab8\3\2\2\2\u0ab7\u0ab9")
        buf.write("\5\u025e\u0130\2\u0ab8\u0ab7\3\2\2\2\u0ab8\u0ab9\3\2\2")
        buf.write("\2\u0ab9\u0abb\3\2\2\2\u0aba\u0abc\5\u026e\u0138\2\u0abb")
        buf.write("\u0aba\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u0abe\3\2\2\2")
        buf.write("\u0abd\u0abf\5\u0208\u0105\2\u0abe\u0abd\3\2\2\2\u0abe")
        buf.write("\u0abf\3\2\2\2\u0abf\u0ac5\3\2\2\2\u0ac0\u0ac1\7\u015d")
        buf.write("\2\2\u0ac1\u0ac2\5\u01c2\u00e2\2\u0ac2\u0ac3\7\u015e\2")
        buf.write("\2\u0ac3\u0ac5\3\2\2\2\u0ac4\u0ab0\3\2\2\2\u0ac4\u0ac0")
        buf.write("\3\2\2\2\u0ac5\u01c1\3\2\2\2\u0ac6\u0ac8\5\u01c0\u00e1")
        buf.write("\2\u0ac7\u0ac9\5\u01c4\u00e3\2\u0ac8\u0ac7\3\2\2\2\u0ac8")
        buf.write("\u0ac9\3\2\2\2\u0ac9\u0acb\3\2\2\2\u0aca\u0acc\5\u027e")
        buf.write("\u0140\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc")
        buf.write("\u0ace\3\2\2\2\u0acd\u0acf\5\u0280\u0141\2\u0ace\u0acd")
        buf.write("\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad1\3\2\2\2\u0ad0")
        buf.write("\u0ad2\5\u0284\u0143\2\u0ad1\u0ad0\3\2\2\2\u0ad1\u0ad2")
        buf.write("\3\2\2\2\u0ad2\u0ad4\3\2\2\2\u0ad3\u0ad5\5\u0286\u0144")
        buf.write("\2\u0ad4\u0ad3\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad7")
        buf.write("\3\2\2\2\u0ad6\u0ad8\5\u01ce\u00e8\2\u0ad7\u0ad6\3\2\2")
        buf.write("\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u01c3\3\2\2\2\u0ad9\u0ada")
        buf.write("\5\u01b0\u00d9\2\u0ada\u0adb\5\u01c0\u00e1\2\u0adb\u0add")
        buf.write("\3\2\2\2\u0adc\u0ad9\3\2\2\2\u0add\u0ade\3\2\2\2\u0ade")
        buf.write("\u0adc\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf\u01c5\3\2\2\2")
        buf.write("\u0ae0\u0ae2\5\u01b6\u00dc\2\u0ae1\u0ae0\3\2\2\2\u0ae1")
        buf.write("\u0ae2\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae4\5\u01c2")
        buf.write("\u00e2\2\u0ae4\u01c7\3\2\2\2\u0ae5\u0ae6\5\u01ca\u00e6")
        buf.write("\2\u0ae6\u0ae8\5\u01fa\u00fe\2\u0ae7\u0ae9\5\u0238\u011d")
        buf.write("\2\u0ae8\u0ae7\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aeb")
        buf.write("\3\2\2\2\u0aea\u0aec\5\u0252\u012a\2\u0aeb\u0aea\3\2\2")
        buf.write("\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aee\3\2\2\2\u0aed\u0aef")
        buf.write("\5\u025e\u0130\2\u0aee\u0aed\3\2\2\2\u0aee\u0aef\3\2\2")
        buf.write("\2\u0aef\u0af1\3\2\2\2\u0af0\u0af2\5\u026e\u0138\2\u0af1")
        buf.write("\u0af0\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u0af4\3\2\2\2")
        buf.write("\u0af3\u0af5\5\u0208\u0105\2\u0af4\u0af3\3\2\2\2\u0af4")
        buf.write("\u0af5\3\2\2\2\u0af5\u0af7\3\2\2\2\u0af6\u0af8\5\u027e")
        buf.write("\u0140\2\u0af7\u0af6\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8")
        buf.write("\u0afa\3\2\2\2\u0af9\u0afb\5\u0280\u0141\2\u0afa\u0af9")
        buf.write("\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0afd\3\2\2\2\u0afc")
        buf.write("\u0afe\5\u0284\u0143\2\u0afd\u0afc\3\2\2\2\u0afd\u0afe")
        buf.write("\3\2\2\2\u0afe\u0b00\3\2\2\2\u0aff\u0b01\5\u0286\u0144")
        buf.write("\2\u0b00\u0aff\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b03")
        buf.write("\3\2\2\2\u0b02\u0b04\5\u01ce\u00e8\2\u0b03\u0b02\3\2\2")
        buf.write("\2\u0b03\u0b04\3\2\2\2\u0b04\u0b25\3\2\2\2\u0b05\u0b07")
        buf.write("\5\u01fa\u00fe\2\u0b06\u0b08\5\u0238\u011d\2\u0b07\u0b06")
        buf.write("\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b0a\3\2\2\2\u0b09")
        buf.write("\u0b0b\5\u0252\u012a\2\u0b0a\u0b09\3\2\2\2\u0b0a\u0b0b")
        buf.write("\3\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c\u0b0e\5\u025e\u0130")
        buf.write("\2\u0b0d\u0b0c\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b10")
        buf.write("\3\2\2\2\u0b0f\u0b11\5\u026e\u0138\2\u0b10\u0b0f\3\2\2")
        buf.write("\2\u0b10\u0b11\3\2\2\2\u0b11\u0b13\3\2\2\2\u0b12\u0b14")
        buf.write("\5\u0208\u0105\2\u0b13\u0b12\3\2\2\2\u0b13\u0b14\3\2\2")
        buf.write("\2\u0b14\u0b16\3\2\2\2\u0b15\u0b17\5\u027e\u0140\2\u0b16")
        buf.write("\u0b15\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b19\3\2\2\2")
        buf.write("\u0b18\u0b1a\5\u0280\u0141\2\u0b19\u0b18\3\2\2\2\u0b19")
        buf.write("\u0b1a\3\2\2\2\u0b1a\u0b1c\3\2\2\2\u0b1b\u0b1d\5\u0284")
        buf.write("\u0143\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d")
        buf.write("\u0b1f\3\2\2\2\u0b1e\u0b20\5\u0286\u0144\2\u0b1f\u0b1e")
        buf.write("\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0b22\3\2\2\2\u0b21")
        buf.write("\u0b23\5\u01ce\u00e8\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23")
        buf.write("\3\2\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0ae5\3\2\2\2\u0b24")
        buf.write("\u0b05\3\2\2\2\u0b25\u01c9\3\2\2\2\u0b26\u0b27\7\33\2")
        buf.write("\2\u0b27\u0b28\7\34\2\2\u0b28\u0b2a\5\u01cc\u00e7\2\u0b29")
        buf.write("\u0b2b\5,\27\2\u0b2a\u0b29\3\2\2\2\u0b2a\u0b2b\3\2\2\2")
        buf.write("\u0b2b\u0b39\3\2\2\2\u0b2c\u0b2d\7\33\2\2\u0b2d\u0b2f")
        buf.write("\7t\2\2\u0b2e\u0b30\7(\2\2\u0b2f\u0b2e\3\2\2\2\u0b2f\u0b30")
        buf.write("\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b36\5\u02e8\u0175")
        buf.write("\2\u0b32\u0b33\7\u015d\2\2\u0b33\u0b34\5\u014e\u00a8\2")
        buf.write("\u0b34\u0b35\7\u015e\2\2\u0b35\u0b37\3\2\2\2\u0b36\u0b32")
        buf.write("\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b39\3\2\2\2\u0b38")
        buf.write("\u0b26\3\2\2\2\u0b38\u0b2c\3\2\2\2\u0b39\u01cb\3\2\2\2")
        buf.write("\u0b3a\u0b3c\7\63\2\2\u0b3b\u0b3a\3\2\2\2\u0b3b\u0b3c")
        buf.write("\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b3e\7\62\2\2\u0b3e")
        buf.write("\u0b40\7\u0178\2\2\u0b3f\u0b41\5\u012e\u0098\2\u0b40\u0b3f")
        buf.write("\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b43\3\2\2\2\u0b42")
        buf.write("\u0b44\5\u0144\u00a3\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44")
        buf.write("\3\2\2\2\u0b44\u0b48\3\2\2\2\u0b45\u0b46\7(\2\2\u0b46")
        buf.write("\u0b48\5\u02e8\u0175\2\u0b47\u0b3b\3\2\2\2\u0b47\u0b45")
        buf.write("\3\2\2\2\u0b48\u01cd\3\2\2\2\u0b49\u0b4c\7\u00a5\2\2\u0b4a")
        buf.write("\u0b4b\7\u017d\2\2\u0b4b\u0b4d\7\u015b\2\2\u0b4c\u0b4a")
        buf.write("\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e")
        buf.write("\u0b54\7\u017d\2\2\u0b4f\u0b50\7\u00a5\2\2\u0b50\u0b51")
        buf.write("\7\u017d\2\2\u0b51\u0b52\7\u00a6\2\2\u0b52\u0b54\7\u017d")
        buf.write("\2\2\u0b53\u0b49\3\2\2\2\u0b53\u0b4f\3\2\2\2\u0b54\u01cf")
        buf.write("\3\2\2\2\u0b55\u0b56\7\u00b9\2\2\u0b56\u0b57\7\27\2\2")
        buf.write("\u0b57\u0b59\5\u0246\u0124\2\u0b58\u0b5a\5\u0252\u012a")
        buf.write("\2\u0b59\u0b58\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a\u01d1")
        buf.write("\3\2\2\2\u0b5b\u0b5c\5\u021a\u010e\2\u0b5c\u0b5d\7\u0163")
        buf.write("\2\2\u0b5d\u0b5e\5\u02d4\u016b\2\u0b5e\u01d3\3\2\2\2\u0b5f")
        buf.write("\u0b60\7\u00a7\2\2\u0b60\u0b65\5\u01d2\u00ea\2\u0b61\u0b62")
        buf.write("\7\u015b\2\2\u0b62\u0b64\5\u01d2\u00ea\2\u0b63\u0b61\3")
        buf.write("\2\2\2\u0b64\u0b67\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b66")
        buf.write("\3\2\2\2\u0b66\u01d5\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b68")
        buf.write("\u0b69\7\u00ed\2\2\u0b69\u0b6a\5\u0246\u0124\2\u0b6a\u0b6c")
        buf.write("\5\u01d4\u00eb\2\u0b6b\u0b6d\5\u0252\u012a\2\u0b6c\u0b6b")
        buf.write("\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u01d7\3\2\2\2\u0b6e")
        buf.write("\u0b73\5\u01da\u00ee\2\u0b6f\u0b73\5\u01e4\u00f3\2\u0b70")
        buf.write("\u0b73\5\u01e6\u00f4\2\u0b71\u0b73\5\u01e8\u00f5\2\u0b72")
        buf.write("\u0b6e\3\2\2\2\u0b72\u0b6f\3\2\2\2\u0b72\u0b70\3\2\2\2")
        buf.write("\u0b72\u0b71\3\2\2\2\u0b73\u01d9\3\2\2\2\u0b74\u0b75\7")
        buf.write("\u0120\2\2\u0b75\u0b7e\7\u0121\2\2\u0b76\u0b7b\5\u01dc")
        buf.write("\u00ef\2\u0b77\u0b78\7\u015b\2\2\u0b78\u0b7a\5\u01dc\u00ef")
        buf.write("\2\u0b79\u0b77\3\2\2\2\u0b7a\u0b7d\3\2\2\2\u0b7b\u0b79")
        buf.write("\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7f\3\2\2\2\u0b7d")
        buf.write("\u0b7b\3\2\2\2\u0b7e\u0b76\3\2\2\2\u0b7e\u0b7f\3\2\2\2")
        buf.write("\u0b7f\u01db\3\2\2\2\u0b80\u0b83\5\u01e0\u00f1\2\u0b81")
        buf.write("\u0b83\5\u01de\u00f0\2\u0b82\u0b80\3\2\2\2\u0b82\u0b81")
        buf.write("\3\2\2\2\u0b83\u01dd\3\2\2\2\u0b84\u0b85\7\u00d2\2\2\u0b85")
        buf.write("\u0b89\7\u0125\2\2\u0b86\u0b87\7\u00d2\2\2\u0b87\u0b89")
        buf.write("\7\u0126\2\2\u0b88\u0b84\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b89")
        buf.write("\u01df\3\2\2\2\u0b8a\u0b8b\7\u0127\2\2\u0b8b\u0b8c\7\u0128")
        buf.write("\2\2\u0b8c\u0b8d\5\u01e2\u00f2\2\u0b8d\u01e1\3\2\2\2\u0b8e")
        buf.write("\u0b8f\7\u0129\2\2\u0b8f\u01e3\3\2\2\2\u0b90\u0b92\7\u0122")
        buf.write("\2\2\u0b91\u0b93\7\u0124\2\2\u0b92\u0b91\3\2\2\2\u0b92")
        buf.write("\u0b93\3\2\2\2\u0b93\u01e5\3\2\2\2\u0b94\u0b96\7\u0123")
        buf.write("\2\2\u0b95\u0b97\7\u0124\2\2\u0b96\u0b95\3\2\2\2\u0b96")
        buf.write("\u0b97\3\2\2\2\u0b97\u01e7\3\2\2\2\u0b98\u0b99\7\u00a7")
        buf.write("\2\2\u0b99\u0b9a\7\u012a\2\2\u0b9a\u0b9b\5\u02e6\u0174")
        buf.write("\2\u0b9b\u01e9\3\2\2\2\u0b9c\u0b9d\7\u0137\2\2\u0b9d\u0b9f")
        buf.write("\7\u010f\2\2\u0b9e\u0ba0\7\u017d\2\2\u0b9f\u0b9e\3\2\2")
        buf.write("\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba1\u0ba2")
        buf.write("\3\2\2\2\u0ba2\u01eb\3\2\2\2\u0ba3\u0ba4\7\u013a\2\2\u0ba4")
        buf.write("\u0ba5\7t\2\2\u0ba5\u0baa\5\u0246\u0124\2\u0ba6\u0ba8")
        buf.write("\7\30\2\2\u0ba7\u0ba6\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8")
        buf.write("\u0ba9\3\2\2\2\u0ba9\u0bab\5\u02f8\u017d\2\u0baa\u0ba7")
        buf.write("\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac")
        buf.write("\u0bad\7>\2\2\u0bad\u0bae\5\u0228\u0115\2\u0bae\u0baf")
        buf.write("\7%\2\2\u0baf\u0bb0\5\u02d4\u016b\2\u0bb0\u0bb1\5\u01ee")
        buf.write("\u00f8\2\u0bb1\u01ed\3\2\2\2\u0bb2\u0bb5\5\u01f2\u00fa")
        buf.write("\2\u0bb3\u0bb5\5\u01f4\u00fb\2\u0bb4\u0bb2\3\2\2\2\u0bb4")
        buf.write("\u0bb3\3\2\2\2\u0bb5\u0bb8\3\2\2\2\u0bb6\u0bb4\3\2\2\2")
        buf.write("\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bba\3\2\2\2\u0bb8\u0bb6\3")
        buf.write("\2\2\2\u0bb9\u0bbb\5\u01f0\u00f9\2\u0bba\u0bb9\3\2\2\2")
        buf.write("\u0bba\u0bbb\3\2\2\2\u0bbb\u01ef\3\2\2\2\u0bbc\u0bbd\7")
        buf.write("\u00af\2\2\u0bbd\u0bbe\7\t\2\2\u0bbe\u0bc1\7\u013b\2\2")
        buf.write("\u0bbf\u0bc0\7\7\2\2\u0bc0\u0bc2\5\u02d4\u016b\2\u0bc1")
        buf.write("\u0bbf\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc3\3\2\2\2")
        buf.write("\u0bc3\u0bc4\7\u00b0\2\2\u0bc4\u0bc5\7\33\2\2\u0bc5\u0bc6")
        buf.write("\7\u0114\2\2\u0bc6\u0bc7\5\u025a\u012e\2\u0bc7\u01f1\3")
        buf.write("\2\2\2\u0bc8\u0bc9\7\u00af\2\2\u0bc9\u0bca\7\u013b\2\2")
        buf.write("\u0bca\u0bcb\7\7\2\2\u0bcb\u0bcc\5\u02d4\u016b\2\u0bcc")
        buf.write("\u0bcd\7\u00b0\2\2\u0bcd\u0bce\5\u01f6\u00fc\2\u0bce\u01f3")
        buf.write("\3\2\2\2\u0bcf\u0bd0\7\u00af\2\2\u0bd0\u0bd1\7\u013b\2")
        buf.write("\2\u0bd1\u0bd2\7\u00b0\2\2\u0bd2\u0bd3\5\u01f6\u00fc\2")
        buf.write("\u0bd3\u01f5\3\2\2\2\u0bd4\u0bd5\7\u00ed\2\2\u0bd5\u0bd8")
        buf.write("\5\u01d4\u00eb\2\u0bd6\u0bd8\7\u00b9\2\2\u0bd7\u0bd4\3")
        buf.write("\2\2\2\u0bd7\u0bd6\3\2\2\2\u0bd8\u01f7\3\2\2\2\u0bd9\u0bda")
        buf.write("\7\u0081\2\2\u0bda\u0bdc\7\u0117\2\2\u0bdb\u0bdd\7\u0178")
        buf.write("\2\2\u0bdc\u0bdb\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u0bdc")
        buf.write("\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u01f9\3\2\2\2\u0be0")
        buf.write("\u0be2\7\31\2\2\u0be1\u0be3\7\u0184\2\2\u0be2\u0be1\3")
        buf.write("\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0bea\3\2\2\2\u0be4\u0be6")
        buf.write("\t\21\2\2\u0be5\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6")
        buf.write("\u0be7\3\2\2\2\u0be7\u0beb\5\u01fc\u00ff\2\u0be8\u0be9")
        buf.write("\7\64\2\2\u0be9\u0beb\5\u01fe\u0100\2\u0bea\u0be5\3\2")
        buf.write("\2\2\u0bea\u0be8\3\2\2\2\u0beb\u0bee\3\2\2\2\u0bec\u0bee")
        buf.write("\5\u0202\u0102\2\u0bed\u0be0\3\2\2\2\u0bed\u0bec\3\2\2")
        buf.write("\2\u0bee\u01fb\3\2\2\2\u0bef\u0bf4\5\u0200\u0101\2\u0bf0")
        buf.write("\u0bf1\7\u015b\2\2\u0bf1\u0bf3\5\u0200\u0101\2\u0bf2\u0bf0")
        buf.write("\3\2\2\2\u0bf3\u0bf6\3\2\2\2\u0bf4\u0bf2\3\2\2\2\u0bf4")
        buf.write("\u0bf5\3\2\2\2\u0bf5\u01fd\3\2\2\2\u0bf6\u0bf4\3\2\2\2")
        buf.write("\u0bf7\u0bf8\7\u015d\2\2\u0bf8\u0bf9\5\u0206\u0104\2\u0bf9")
        buf.write("\u0bfb\7\u015e\2\2\u0bfa\u0bfc\5\u0124\u0093\2\u0bfb\u0bfa")
        buf.write("\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfe\3\2\2\2\u0bfd")
        buf.write("\u0bff\5\u0128\u0095\2\u0bfe\u0bfd\3\2\2\2\u0bfe\u0bff")
        buf.write("\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c01\7>\2\2\u0c01")
        buf.write("\u0c10\7\u0178\2\2\u0c02\u0c0e\7\30\2\2\u0c03\u0c06\7")
        buf.write("\u015d\2\2\u0c04\u0c07\5\u021e\u0110\2\u0c05\u0c07\5\u0148")
        buf.write("\u00a5\2\u0c06\u0c04\3\2\2\2\u0c06\u0c05\3\2\2\2\u0c07")
        buf.write("\u0c08\3\2\2\2\u0c08\u0c09\7\u015e\2\2\u0c09\u0c0f\3\2")
        buf.write("\2\2\u0c0a\u0c0d\5\u021e\u0110\2\u0c0b\u0c0d\5\u0148\u00a5")
        buf.write("\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0b\3\2\2\2\u0c0d\u0c0f")
        buf.write("\3\2\2\2\u0c0e\u0c03\3\2\2\2\u0c0e\u0c0c\3\2\2\2\u0c0f")
        buf.write("\u0c11\3\2\2\2\u0c10\u0c02\3\2\2\2\u0c10\u0c11\3\2\2\2")
        buf.write("\u0c11\u0c13\3\2\2\2\u0c12\u0c14\5\u0124\u0093\2\u0c13")
        buf.write("\u0c12\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c16\3\2\2\2")
        buf.write("\u0c15\u0c17\5\u0126\u0094\2\u0c16\u0c15\3\2\2\2\u0c16")
        buf.write("\u0c17\3\2\2\2\u0c17\u01ff\3\2\2\2\u0c18\u0c26\5\u0218")
        buf.write("\u010d\2\u0c19\u0c23\5\u02d4\u016b\2\u0c1a\u0c1c\7\30")
        buf.write("\2\2\u0c1b\u0c1a\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1d")
        buf.write("\3\2\2\2\u0c1d\u0c24\5\u02f8\u017d\2\u0c1e\u0c1f\7\30")
        buf.write("\2\2\u0c1f\u0c20\7\u015d\2\2\u0c20\u0c21\5\u021e\u0110")
        buf.write("\2\u0c21\u0c22\7\u015e\2\2\u0c22\u0c24\3\2\2\2\u0c23\u0c1b")
        buf.write("\3\2\2\2\u0c23\u0c1e\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24")
        buf.write("\u0c26\3\2\2\2\u0c25\u0c18\3\2\2\2\u0c25\u0c19\3\2\2\2")
        buf.write("\u0c26\u0201\3\2\2\2\u0c27\u0c28\7n\2\2\u0c28\u0c2c\5")
        buf.write("\u0206\u0104\2\u0c29\u0c2a\7p\2\2\u0c2a\u0c2c\5\u0206")
        buf.write("\u0104\2\u0c2b\u0c27\3\2\2\2\u0c2b\u0c29\3\2\2\2\u0c2c")
        buf.write("\u0c2e\3\2\2\2\u0c2d\u0c2f\5\u0124\u0093\2\u0c2e\u0c2d")
        buf.write("\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c31\3\2\2\2\u0c30")
        buf.write("\u0c32\5\u0128\u0095\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32")
        buf.write("\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34\7>\2\2\u0c34")
        buf.write("\u0c43\7\u0178\2\2\u0c35\u0c41\7\30\2\2\u0c36\u0c39\7")
        buf.write("\u015d\2\2\u0c37\u0c3a\5\u021e\u0110\2\u0c38\u0c3a\5\u0148")
        buf.write("\u00a5\2\u0c39\u0c37\3\2\2\2\u0c39\u0c38\3\2\2\2\u0c3a")
        buf.write("\u0c3b\3\2\2\2\u0c3b\u0c3c\7\u015e\2\2\u0c3c\u0c42\3\2")
        buf.write("\2\2\u0c3d\u0c40\5\u021e\u0110\2\u0c3e\u0c40\5\u0148\u00a5")
        buf.write("\2\u0c3f\u0c3d\3\2\2\2\u0c3f\u0c3e\3\2\2\2\u0c40\u0c42")
        buf.write("\3\2\2\2\u0c41\u0c36\3\2\2\2\u0c41\u0c3f\3\2\2\2\u0c42")
        buf.write("\u0c44\3\2\2\2\u0c43\u0c35\3\2\2\2\u0c43\u0c44\3\2\2\2")
        buf.write("\u0c44\u0c46\3\2\2\2\u0c45\u0c47\5\u0124\u0093\2\u0c46")
        buf.write("\u0c45\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c49\3\2\2\2")
        buf.write("\u0c48\u0c4a\5\u0126\u0094\2\u0c49\u0c48\3\2\2\2\u0c49")
        buf.write("\u0c4a\3\2\2\2\u0c4a\u0203\3\2\2\2\u0c4b\u0c4e\5\u0218")
        buf.write("\u010d\2\u0c4c\u0c4e\5\u02d4\u016b\2\u0c4d\u0c4b\3\2\2")
        buf.write("\2\u0c4d\u0c4c\3\2\2\2\u0c4e\u0205\3\2\2\2\u0c4f\u0c54")
        buf.write("\5\u0204\u0103\2\u0c50\u0c51\7\u015b\2\2\u0c51\u0c53\5")
        buf.write("\u0204\u0103\2\u0c52\u0c50\3\2\2\2\u0c53\u0c56\3\2\2\2")
        buf.write("\u0c54\u0c52\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0207\3")
        buf.write("\2\2\2\u0c56\u0c54\3\2\2\2\u0c57\u0c58\7\u00f5\2\2\u0c58")
        buf.write("\u0c5d\5\u020a\u0106\2\u0c59\u0c5a\7\u015b\2\2\u0c5a\u0c5c")
        buf.write("\5\u020a\u0106\2\u0c5b\u0c59\3\2\2\2\u0c5c\u0c5f\3\2\2")
        buf.write("\2\u0c5d\u0c5b\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e\u0209")
        buf.write("\3\2\2\2\u0c5f\u0c5d\3\2\2\2\u0c60\u0c61\5\u02f8\u017d")
        buf.write("\2\u0c61\u0c62\7\30\2\2\u0c62\u0c63\5\u020c\u0107\2\u0c63")
        buf.write("\u020b\3\2\2\2\u0c64\u0c71\5\u02f8\u017d\2\u0c65\u0c67")
        buf.write("\7\u015d\2\2\u0c66\u0c68\5\u02f8\u017d\2\u0c67\u0c66\3")
        buf.write("\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c6a\3\2\2\2\u0c69\u0c6b")
        buf.write("\5\u024c\u0127\2\u0c6a\u0c69\3\2\2\2\u0c6a\u0c6b\3\2\2")
        buf.write("\2\u0c6b\u0c6d\3\2\2\2\u0c6c\u0c6e\5\u020e\u0108\2\u0c6d")
        buf.write("\u0c6c\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\3\2\2\2")
        buf.write("\u0c6f\u0c71\7\u015e\2\2\u0c70\u0c64\3\2\2\2\u0c70\u0c65")
        buf.write("\3\2\2\2\u0c71\u020d\3\2\2\2\u0c72\u0c75\5\u0210\u0109")
        buf.write("\2\u0c73\u0c75\5\u0212\u010a\2\u0c74\u0c72\3\2\2\2\u0c74")
        buf.write("\u0c73\3\2\2\2\u0c75\u020f\3\2\2\2\u0c76\u0c77\7w\2\2")
        buf.write("\u0c77\u0c7f\5\u0214\u010b\2\u0c78\u0c79\7w\2\2\u0c79")
        buf.write("\u0c7a\7\u00d8\2\2\u0c7a\u0c7b\5\u0216\u010c\2\u0c7b\u0c7c")
        buf.write("\7\7\2\2\u0c7c\u0c7d\5\u0216\u010c\2\u0c7d\u0c7f\3\2\2")
        buf.write("\2\u0c7e\u0c76\3\2\2\2\u0c7e\u0c78\3\2\2\2\u0c7f\u0211")
        buf.write("\3\2\2\2\u0c80\u0c81\7\u00d5\2\2\u0c81\u0c89\5\u0214\u010b")
        buf.write("\2\u0c82\u0c83\7\u00d5\2\2\u0c83\u0c84\7\u00d8\2\2\u0c84")
        buf.write("\u0c85\5\u0216\u010c\2\u0c85\u0c86\7\7\2\2\u0c86\u0c87")
        buf.write("\5\u0216\u010c\2\u0c87\u0c89\3\2\2\2\u0c88\u0c80\3\2\2")
        buf.write("\2\u0c88\u0c82\3\2\2\2\u0c89\u0213\3\2\2\2\u0c8a\u0c8b")
        buf.write("\7\u00f6\2\2\u0c8b\u0c91\7\u00f7\2\2\u0c8c\u0c8d\7\u00f9")
        buf.write("\2\2\u0c8d\u0c91\7v\2\2\u0c8e\u0c8f\7\u017d\2\2\u0c8f")
        buf.write("\u0c91\7\u00f7\2\2\u0c90\u0c8a\3\2\2\2\u0c90\u0c8c\3\2")
        buf.write("\2\2\u0c90\u0c8e\3\2\2\2\u0c91\u0215\3\2\2\2\u0c92\u0c93")
        buf.write("\7\u00f6\2\2\u0c93\u0c9c\t\22\2\2\u0c94\u0c95\7\u00f9")
        buf.write("\2\2\u0c95\u0c9c\7v\2\2\u0c96\u0c97\7\u017d\2\2\u0c97")
        buf.write("\u0c9c\t\22\2\2\u0c98\u0c99\5\u02b0\u0159\2\u0c99\u0c9a")
        buf.write("\t\22\2\2\u0c9a\u0c9c\3\2\2\2\u0c9b\u0c92\3\2\2\2\u0c9b")
        buf.write("\u0c94\3\2\2\2\u0c9b\u0c96\3\2\2\2\u0c9b\u0c98\3\2\2\2")
        buf.write("\u0c9c\u0217\3\2\2\2\u0c9d\u0ca3\7\u016d\2\2\u0c9e\u0c9f")
        buf.write("\5\u0246\u0124\2\u0c9f\u0ca0\7\u0159\2\2\u0ca0\u0ca1\7")
        buf.write("\u016d\2\2\u0ca1\u0ca3\3\2\2\2\u0ca2\u0c9d\3\2\2\2\u0ca2")
        buf.write("\u0c9e\3\2\2\2\u0ca3\u0219\3\2\2\2\u0ca4\u0ca5\5\u02f8")
        buf.write("\u017d\2\u0ca5\u021b\3\2\2\2\u0ca6\u0cab\5\u02d4\u016b")
        buf.write("\2\u0ca7\u0ca8\7\u015b\2\2\u0ca8\u0caa\5\u02d4\u016b\2")
        buf.write("\u0ca9\u0ca7\3\2\2\2\u0caa\u0cad\3\2\2\2\u0cab\u0ca9\3")
        buf.write("\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u021d\3\2\2\2\u0cad\u0cab")
        buf.write("\3\2\2\2\u0cae\u0cb3\5\u02f8\u017d\2\u0caf\u0cb0\7\u015b")
        buf.write("\2\2\u0cb0\u0cb2\5\u02f8\u017d\2\u0cb1\u0caf\3\2\2\2\u0cb2")
        buf.write("\u0cb5\3\2\2\2\u0cb3\u0cb1\3\2\2\2\u0cb3\u0cb4\3\2\2\2")
        buf.write("\u0cb4\u021f\3\2\2\2\u0cb5\u0cb3\3\2\2\2\u0cb6\u0cb7\7")
        buf.write("\27\2\2\u0cb7\u0cb8\5\u0222\u0112\2\u0cb8\u0221\3\2\2")
        buf.write("\2\u0cb9\u0cba\5\u022e\u0118\2\u0cba\u0cbd\5\u022a\u0116")
        buf.write("\2\u0cbb\u0cbc\7\u015b\2\2\u0cbc\u0cbe\5\u022a\u0116\2")
        buf.write("\u0cbd\u0cbb\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u0cbd\3")
        buf.write("\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cc3\3\2\2\2\u0cc1\u0cc3")
        buf.write("\5\u0226\u0114\2\u0cc2\u0cb9\3\2\2\2\u0cc2\u0cc1\3\2\2")
        buf.write("\2\u0cc3\u0223\3\2\2\2\u0cc4\u0cc8\5\u0242\u0122\2\u0cc5")
        buf.write("\u0cc7\5\u0238\u011d\2\u0cc6\u0cc5\3\2\2\2\u0cc7\u0cca")
        buf.write("\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9")
        buf.write("\u0ce5\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0ccb\u0ccf\5\u025c")
        buf.write("\u012f\2\u0ccc\u0cce\5\u0238\u011d\2\u0ccd\u0ccc\3\2\2")
        buf.write("\2\u0cce\u0cd1\3\2\2\2\u0ccf\u0ccd\3\2\2\2\u0ccf\u0cd0")
        buf.write("\3\2\2\2\u0cd0\u0ce5\3\2\2\2\u0cd1\u0ccf\3\2\2\2\u0cd2")
        buf.write("\u0cd6\5\u024a\u0126\2\u0cd3\u0cd5\5\u0238\u011d\2\u0cd4")
        buf.write("\u0cd3\3\2\2\2\u0cd5\u0cd8\3\2\2\2\u0cd6\u0cd4\3\2\2\2")
        buf.write("\u0cd6\u0cd7\3\2\2\2\u0cd7\u0ce5\3\2\2\2\u0cd8\u0cd6\3")
        buf.write("\2\2\2\u0cd9\u0cdd\5\u0250\u0129\2\u0cda\u0cdc\5\u0238")
        buf.write("\u011d\2\u0cdb\u0cda\3\2\2\2\u0cdc\u0cdf\3\2\2\2\u0cdd")
        buf.write("\u0cdb\3\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde\u0ce5\3\2\2\2")
        buf.write("\u0cdf\u0cdd\3\2\2\2\u0ce0\u0ce1\7\u015d\2\2\u0ce1\u0ce2")
        buf.write("\5\u0226\u0114\2\u0ce2\u0ce3\7\u015e\2\2\u0ce3\u0ce5\3")
        buf.write("\2\2\2\u0ce4\u0cc4\3\2\2\2\u0ce4\u0ccb\3\2\2\2\u0ce4\u0cd2")
        buf.write("\3\2\2\2\u0ce4\u0cd9\3\2\2\2\u0ce4\u0ce0\3\2\2\2\u0ce5")
        buf.write("\u0225\3\2\2\2\u0ce6\u0cf1\5\u0224\u0113\2\u0ce7\u0ce8")
        buf.write("\5\u0230\u0119\2\u0ce8\u0ced\5\u0228\u0115\2\u0ce9\u0cea")
        buf.write("\7%\2\2\u0cea\u0cee\5\u02d4\u016b\2\u0ceb\u0cec\7>\2\2")
        buf.write("\u0cec\u0cee\5\u0156\u00ac\2\u0ced\u0ce9\3\2\2\2\u0ced")
        buf.write("\u0ceb\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cf0\3\2\2\2")
        buf.write("\u0cef\u0ce7\3\2\2\2\u0cf0\u0cf3\3\2\2\2\u0cf1\u0cef\3")
        buf.write("\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0227\3\2\2\2\u0cf3\u0cf1")
        buf.write("\3\2\2\2\u0cf4\u0cf9\5\u0242\u0122\2\u0cf5\u0cf9\5\u025c")
        buf.write("\u012f\2\u0cf6\u0cf9\5\u024a\u0126\2\u0cf7\u0cf9\5\u0250")
        buf.write("\u0129\2\u0cf8\u0cf4\3\2\2\2\u0cf8\u0cf5\3\2\2\2\u0cf8")
        buf.write("\u0cf6\3\2\2\2\u0cf8\u0cf7\3\2\2\2\u0cf9\u0cfd\3\2\2\2")
        buf.write("\u0cfa\u0cfc\5\u0238\u011d\2\u0cfb\u0cfa\3\2\2\2\u0cfc")
        buf.write("\u0cff\3\2\2\2\u0cfd\u0cfb\3\2\2\2\u0cfd\u0cfe\3\2\2\2")
        buf.write("\u0cfe\u0229\3\2\2\2\u0cff\u0cfd\3\2\2\2\u0d00\u0d02\7")
        buf.write("\37\2\2\u0d01\u0d00\3\2\2\2\u0d01\u0d02\3\2\2\2\u0d02")
        buf.write("\u0d03\3\2\2\2\u0d03\u0d04\5\u0244\u0123\2\u0d04\u0d05")
        buf.write("\5\u022c\u0117\2\u0d05\u022b\3\2\2\2\u0d06\u0d07\7\u015d")
        buf.write("\2\2\u0d07\u0d08\5\u021c\u010f\2\u0d08\u0d09\7\u015e\2")
        buf.write("\2\u0d09\u022d\3\2\2\2\u0d0a\u0d0b\7\36\2\2\u0d0b\u022f")
        buf.write("\3\2\2\2\u0d0c\u0d2a\7 \2\2\u0d0d\u0d0e\7\u0106\2\2\u0d0e")
        buf.write("\u0d2a\7 \2\2\u0d0f\u0d2a\7\u015b\2\2\u0d10\u0d11\7\u00db")
        buf.write("\2\2\u0d11\u0d2a\7 \2\2\u0d12\u0d14\7\"\2\2\u0d13\u0d15")
        buf.write("\7\35\2\2\u0d14\u0d13\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15")
        buf.write("\u0d16\3\2\2\2\u0d16\u0d2a\7 \2\2\u0d17\u0d19\7#\2\2\u0d18")
        buf.write("\u0d1a\7\35\2\2\u0d19\u0d18\3\2\2\2\u0d19\u0d1a\3\2\2")
        buf.write("\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d2a\7 \2\2\u0d1c\u0d1e")
        buf.write("\7$\2\2\u0d1d\u0d1f\7\35\2\2\u0d1e\u0d1d\3\2\2\2\u0d1e")
        buf.write("\u0d1f\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d2a\7 \2\2")
        buf.write("\u0d21\u0d22\7\"\2\2\u0d22\u0d23\7\u00e1\2\2\u0d23\u0d2a")
        buf.write("\7 \2\2\u0d24\u0d25\7\"\2\2\u0d25\u0d26\7!\2\2\u0d26\u0d2a")
        buf.write("\7 \2\2\u0d27\u0d28\7!\2\2\u0d28\u0d2a\7 \2\2\u0d29\u0d0c")
        buf.write("\3\2\2\2\u0d29\u0d0d\3\2\2\2\u0d29\u0d0f\3\2\2\2\u0d29")
        buf.write("\u0d10\3\2\2\2\u0d29\u0d12\3\2\2\2\u0d29\u0d17\3\2\2\2")
        buf.write("\u0d29\u0d1c\3\2\2\2\u0d29\u0d21\3\2\2\2\u0d29\u0d24\3")
        buf.write("\2\2\2\u0d29\u0d27\3\2\2\2\u0d2a\u0231\3\2\2\2\u0d2b\u0d2c")
        buf.write("\7\u00e2\2\2\u0d2c\u0d2e\7\u00be\2\2\u0d2d\u0d2f\7\35")
        buf.write("\2\2\u0d2e\u0d2d\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d30")
        buf.write("\3\2\2\2\u0d30\u0d32\5\u0288\u0145\2\u0d31\u0d33\5\u023a")
        buf.write("\u011e\2\u0d32\u0d31\3\2\2\2\u0d32\u0d33\3\2\2\2\u0d33")
        buf.write("\u0d36\3\2\2\2\u0d34\u0d35\7\30\2\2\u0d35\u0d37\5\u021e")
        buf.write("\u0110\2\u0d36\u0d34\3\2\2\2\u0d36\u0d37\3\2\2\2\u0d37")
        buf.write("\u0233\3\2\2\2\u0d38\u0d39\7\u00e2\2\2\u0d39\u0d3a\7(")
        buf.write("\2\2\u0d3a\u0d3b\7\u015d\2\2\u0d3b\u0d3c\5\u0256\u012c")
        buf.write("\2\u0d3c\u0d3e\7\u015e\2\2\u0d3d\u0d3f\7\30\2\2\u0d3e")
        buf.write("\u0d3d\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d40\3\2\2\2")
        buf.write("\u0d40\u0d45\5\u023a\u011e\2\u0d41\u0d42\7\u015d\2\2\u0d42")
        buf.write("\u0d43\5\u021e\u0110\2\u0d43\u0d44\7\u015e\2\2\u0d44\u0d46")
        buf.write("\3\2\2\2\u0d45\u0d41\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46")
        buf.write("\u0235\3\2\2\2\u0d47\u0d48\7\u00e3\2\2\u0d48\u0d51\7\u015d")
        buf.write("\2\2\u0d49\u0d4e\5\u02d6\u016c\2\u0d4a\u0d4b\7\u015b\2")
        buf.write("\2\u0d4b\u0d4d\5\u02d6\u016c\2\u0d4c\u0d4a\3\2\2\2\u0d4d")
        buf.write("\u0d50\3\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2")
        buf.write("\u0d4f\u0d52\3\2\2\2\u0d50\u0d4e\3\2\2\2\u0d51\u0d49\3")
        buf.write("\2\2\2\u0d51\u0d52\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d54")
        buf.write("\7\u00f4\2\2\u0d54\u0d55\5\u014e\u00a8\2\u0d55\u0d56\7")
        buf.write("\u00c0\2\2\u0d56\u0d57\5\u02d8\u016d\2\u0d57\u0d58\7\u015e")
        buf.write("\2\2\u0d58\u0237\3\2\2\2\u0d59\u0d5b\7\u015b\2\2\u0d5a")
        buf.write("\u0d59\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5f\3\2\2\2")
        buf.write("\u0d5c\u0d60\5\u0232\u011a\2\u0d5d\u0d60\5\u0234\u011b")
        buf.write("\2\u0d5e\u0d60\5\u0236\u011c\2\u0d5f\u0d5c\3\2\2\2\u0d5f")
        buf.write("\u0d5d\3\2\2\2\u0d5f\u0d5e\3\2\2\2\u0d60\u0239\3\2\2\2")
        buf.write("\u0d61\u0d62\5\u02f8\u017d\2\u0d62\u023b\3\2\2\2\u0d63")
        buf.write("\u0d64\7\u008c\2\2\u0d64\u0d65\7\u015d\2\2\u0d65\u0d66")
        buf.write("\7\u008d\2\2\u0d66\u0d67\7\u017d\2\2\u0d67\u0d68\7\u008e")
        buf.write("\2\2\u0d68\u0d69\7\u008f\2\2\u0d69\u0d73\7\u017d\2\2\u0d6a")
        buf.write("\u0d6b\7%\2\2\u0d6b\u0d70\5\u02d4\u016b\2\u0d6c\u0d6d")
        buf.write("\7\u015b\2\2\u0d6d\u0d6f\5\u02d4\u016b\2\u0d6e\u0d6c\3")
        buf.write("\2\2\2\u0d6f\u0d72\3\2\2\2\u0d70\u0d6e\3\2\2\2\u0d70\u0d71")
        buf.write("\3\2\2\2\u0d71\u0d74\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d73")
        buf.write("\u0d6a\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d75\3\2\2\2")
        buf.write("\u0d75\u0d76\7\u015e\2\2\u0d76\u023d\3\2\2\2\u0d77\u0d78")
        buf.write("\7\u008c\2\2\u0d78\u0d79\7\u015d\2\2\u0d79\u0d7a\7\u017d")
        buf.write("\2\2\u0d7a\u0d7b\t\23\2\2\u0d7b\u0d81\7\u015e\2\2\u0d7c")
        buf.write("\u0d7d\7\u008c\2\2\u0d7d\u0d7e\7\u015d\2\2\u0d7e\u0d7f")
        buf.write("\7\u017c\2\2\u0d7f\u0d81\7\u015e\2\2\u0d80\u0d77\3\2\2")
        buf.write("\2\u0d80\u0d7c\3\2\2\2\u0d81\u023f\3\2\2\2\u0d82\u0d85")
        buf.write("\5\u023c\u011f\2\u0d83\u0d85\5\u023e\u0120\2\u0d84\u0d82")
        buf.write("\3\2\2\2\u0d84\u0d83\3\2\2\2\u0d85\u0241\3\2\2\2\u0d86")
        buf.write("\u0d88\5\u0246\u0124\2\u0d87\u0d89\5\u0132\u009a\2\u0d88")
        buf.write("\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d8b\3\2\2\2")
        buf.write("\u0d8a\u0d8c\5\u0240\u0121\2\u0d8b\u0d8a\3\2\2\2\u0d8b")
        buf.write("\u0d8c\3\2\2\2\u0d8c\u0d91\3\2\2\2\u0d8d\u0d8f\7\30\2")
        buf.write("\2\u0d8e\u0d8d\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d90")
        buf.write("\3\2\2\2\u0d90\u0d92\5\u02f8\u017d\2\u0d91\u0d8e\3\2\2")
        buf.write("\2\u0d91\u0d92\3\2\2\2\u0d92\u0243\3\2\2\2\u0d93\u0d95")
        buf.write("\5\u0246\u0124\2\u0d94\u0d96\5\u0240\u0121\2\u0d95\u0d94")
        buf.write("\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d9b\3\2\2\2\u0d97")
        buf.write("\u0d99\7\30\2\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2")
        buf.write("\2\u0d99\u0d9a\3\2\2\2\u0d9a\u0d9c\5\u02f8\u017d\2\u0d9b")
        buf.write("\u0d98\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0245\3\2\2\2")
        buf.write("\u0d9d\u0d9e\5\u02f8\u017d\2\u0d9e\u0d9f\7\u0159\2\2\u0d9f")
        buf.write("\u0da0\5\u02f8\u017d\2\u0da0\u0da3\3\2\2\2\u0da1\u0da3")
        buf.write("\5\u02f8\u017d\2\u0da2\u0d9d\3\2\2\2\u0da2\u0da1\3\2\2")
        buf.write("\2\u0da3\u0247\3\2\2\2\u0da4\u0da5\5\u02f8\u017d\2\u0da5")
        buf.write("\u0da6\7\u0159\2\2\u0da6\u0da8\3\2\2\2\u0da7\u0da4\3\2")
        buf.write("\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0daa")
        buf.write("\5\u02f8\u017d\2\u0daa\u0249\3\2\2\2\u0dab\u0dac\7\u015d")
        buf.write("\2\2\u0dac\u0dad\5\u01b2\u00da\2\u0dad\u0daf\7\u015e\2")
        buf.write("\2\u0dae\u0db0\7\30\2\2\u0daf\u0dae\3\2\2\2\u0daf\u0db0")
        buf.write("\3\2\2\2\u0db0\u0db2\3\2\2\2\u0db1\u0db3\5\u02f8\u017d")
        buf.write("\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u024b")
        buf.write("\3\2\2\2\u0db4\u0db6\5\u0282\u0142\2\u0db5\u0db7\5\u027e")
        buf.write("\u0140\2\u0db6\u0db5\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7")
        buf.write("\u0dc0\3\2\2\2\u0db8\u0dc0\5\u027e\u0140\2\u0db9\u0dbb")
        buf.write("\5\u0284\u0143\2\u0dba\u0dbc\5\u0286\u0144\2\u0dbb\u0dba")
        buf.write("\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dc0\3\2\2\2\u0dbd")
        buf.write("\u0dc0\5\u0286\u0144\2\u0dbe\u0dc0\5\u0280\u0141\2\u0dbf")
        buf.write("\u0db4\3\2\2\2\u0dbf\u0db8\3\2\2\2\u0dbf\u0db9\3\2\2\2")
        buf.write("\u0dbf\u0dbd\3\2\2\2\u0dbf\u0dbe\3\2\2\2\u0dc0\u024d\3")
        buf.write("\2\2\2\u0dc1\u0dc5\5\u024a\u0126\2\u0dc2\u0dc5\5\u0242")
        buf.write("\u0122\2\u0dc3\u0dc5\5\u0250\u0129\2\u0dc4\u0dc1\3\2\2")
        buf.write("\2\u0dc4\u0dc2\3\2\2\2\u0dc4\u0dc3\3\2\2\2\u0dc5\u024f")
        buf.write("\3\2\2\2\u0dc6\u0dc7\5\u02f8\u017d\2\u0dc7\u0dc8\7\u015d")
        buf.write("\2\2\u0dc8\u0dc9\7%\2\2\u0dc9\u0dcb\5\u024e\u0128\2\u0dca")
        buf.write("\u0dcc\5\u024c\u0127\2\u0dcb\u0dca\3\2\2\2\u0dcb\u0dcc")
        buf.write("\3\2\2\2\u0dcc\u0ddc\3\2\2\2\u0dcd\u0dce\7\u017e\2\2\u0dce")
        buf.write("\u0dcf\7\u015d\2\2\u0dcf\u0dd0\5\u02d4\u016b\2\u0dd0\u0dd9")
        buf.write("\7\u015e\2\2\u0dd1\u0dd2\7\u015b\2\2\u0dd2\u0dd3\7\u017e")
        buf.write("\2\2\u0dd3\u0dd4\7\u015d\2\2\u0dd4\u0dd5\5\u02d4\u016b")
        buf.write("\2\u0dd5\u0dd6\7\u015e\2\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0dd1")
        buf.write("\3\2\2\2\u0dd8\u0ddb\3\2\2\2\u0dd9\u0dd7\3\2\2\2\u0dd9")
        buf.write("\u0dda\3\2\2\2\u0dda\u0ddd\3\2\2\2\u0ddb\u0dd9\3\2\2\2")
        buf.write("\u0ddc\u0dcd\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0dde\3")
        buf.write("\2\2\2\u0dde\u0de0\7\u015e\2\2\u0ddf\u0de1\5\u02f8\u017d")
        buf.write("\2\u0de0\u0ddf\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0251")
        buf.write("\3\2\2\2\u0de2\u0de3\7\26\2\2\u0de3\u0de4\5\u0254\u012b")
        buf.write("\2\u0de4\u0253\3\2\2\2\u0de5\u0de6\5\u02d4\u016b\2\u0de6")
        buf.write("\u0255\3\2\2\2\u0de7\u0de8\7\u0114\2\2\u0de8\u0de9\5\u0258")
        buf.write("\u012d\2\u0de9\u0257\3\2\2\2\u0dea\u0def\5\u025a\u012e")
        buf.write("\2\u0deb\u0dec\7\u015b\2\2\u0dec\u0dee\5\u025a\u012e\2")
        buf.write("\u0ded\u0deb\3\2\2\2\u0dee\u0df1\3\2\2\2\u0def\u0ded\3")
        buf.write("\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0259\3\2\2\2\u0df1\u0def")
        buf.write("\3\2\2\2\u0df2\u0df3\5\u0272\u013a\2\u0df3\u025b\3\2\2")
        buf.write("\2\u0df4\u0df5\7(\2\2\u0df5\u0df6\7\u015d\2\2\u0df6\u0df7")
        buf.write("\5\u0256\u012c\2\u0df7\u0df9\7\u015e\2\2\u0df8\u0dfa\7")
        buf.write("\30\2\2\u0df9\u0df8\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa")
        buf.write("\u0dfb\3\2\2\2\u0dfb\u0e00\5\u023a\u011e\2\u0dfc\u0dfd")
        buf.write("\7\u015d\2\2\u0dfd\u0dfe\5\u021e\u0110\2\u0dfe\u0dff\7")
        buf.write("\u015e\2\2\u0dff\u0e01\3\2\2\2\u0e00\u0dfc\3\2\2\2\u0e00")
        buf.write("\u0e01\3\2\2\2\u0e01\u025d\3\2\2\2\u0e02\u0e03\7\23\2")
        buf.write("\2\u0e03\u0e04\7\24\2\2\u0e04\u0e05\5\u0260\u0131\2\u0e05")
        buf.write("\u025f\3\2\2\2\u0e06\u0e0a\5\u0264\u0133\2\u0e07\u0e0a")
        buf.write("\5\u0266\u0134\2\u0e08\u0e0a\5\u0262\u0132\2\u0e09\u0e06")
        buf.write("\3\2\2\2\u0e09\u0e07\3\2\2\2\u0e09\u0e08\3\2\2\2\u0e0a")
        buf.write("\u0261\3\2\2\2\u0e0b\u0e0c\7\u015d\2\2\u0e0c\u0e0d\7\u015e")
        buf.write("\2\2\u0e0d\u0263\3\2\2\2\u0e0e\u0e0f\t\24\2\2\u0e0f\u0e10")
        buf.write("\7\u015d\2\2\u0e10\u0e15\5\u02d4\u016b\2\u0e11\u0e12\7")
        buf.write("\u015b\2\2\u0e12\u0e14\5\u02d4\u016b\2\u0e13\u0e11\3\2")
        buf.write("\2\2\u0e14\u0e17\3\2\2\2\u0e15\u0e13\3\2\2\2\u0e15\u0e16")
        buf.write("\3\2\2\2\u0e16\u0e18\3\2\2\2\u0e17\u0e15\3\2\2\2\u0e18")
        buf.write("\u0e19\7\u015e\2\2\u0e19\u0265\3\2\2\2\u0e1a\u0e1f\5\u0274")
        buf.write("\u013b\2\u0e1b\u0e1c\7\u00a1\2\2\u0e1c\u0e20\7\u00f1\2")
        buf.write("\2\u0e1d\u0e1e\7\u00a1\2\2\u0e1e\u0e20\7\u00f2\2\2\u0e1f")
        buf.write("\u0e1b\3\2\2\2\u0e1f\u0e1d\3\2\2\2\u0e1f\u0e20\3\2\2\2")
        buf.write("\u0e20\u0e2e\3\2\2\2\u0e21\u0e22\7\u00ff\2\2\u0e22\u0e23")
        buf.write("\7\u0100\2\2\u0e23\u0e24\7\u015d\2\2\u0e24\u0e29\5\u0268")
        buf.write("\u0135\2\u0e25\u0e26\7\u015b\2\2\u0e26\u0e28\5\u0268\u0135")
        buf.write("\2\u0e27\u0e25\3\2\2\2\u0e28\u0e2b\3\2\2\2\u0e29\u0e27")
        buf.write("\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2c\3\2\2\2\u0e2b")
        buf.write("\u0e29\3\2\2\2\u0e2c\u0e2d\7\u015e\2\2\u0e2d\u0e2f\3\2")
        buf.write("\2\2\u0e2e\u0e21\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0267")
        buf.write("\3\2\2\2\u0e30\u0e33\5\u026a\u0136\2\u0e31\u0e33\5\u026c")
        buf.write("\u0137\2\u0e32\u0e30\3\2\2\2\u0e32\u0e31\3\2\2\2\u0e33")
        buf.write("\u0269\3\2\2\2\u0e34\u0e36\7\u015d\2\2\u0e35\u0e37\5\u02d4")
        buf.write("\u016b\2\u0e36\u0e35\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37")
        buf.write("\u0e3c\3\2\2\2\u0e38\u0e39\7\u015b\2\2\u0e39\u0e3b\5\u02d4")
        buf.write("\u016b\2\u0e3a\u0e38\3\2\2\2\u0e3b\u0e3e\3\2\2\2\u0e3c")
        buf.write("\u0e3a\3\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e3f\3\2\2\2")
        buf.write("\u0e3e\u0e3c\3\2\2\2\u0e3f\u0e40\7\u015e\2\2\u0e40\u026b")
        buf.write("\3\2\2\2\u0e41\u0e42\5\u02d4\u016b\2\u0e42\u026d\3\2\2")
        buf.write("\2\u0e43\u0e44\7\25\2\2\u0e44\u0e45\5\u0270\u0139\2\u0e45")
        buf.write("\u026f\3\2\2\2\u0e46\u0e47\5\u02d4\u016b\2\u0e47\u0271")
        buf.write("\3\2\2\2\u0e48\u0e49\7\u015d\2\2\u0e49\u0e4a\5\u0274\u013b")
        buf.write("\2\u0e4a\u0e4b\7\u015e\2\2\u0e4b\u0273\3\2\2\2\u0e4c\u0e4e")
        buf.write("\5\u02d4\u016b\2\u0e4d\u0e4f\5\u0276\u013c\2\u0e4e\u0e4d")
        buf.write("\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0275\3\2\2\2\u0e50")
        buf.write("\u0e51\7\u015b\2\2\u0e51\u0e53\5\u02d4\u016b\2\u0e52\u0e50")
        buf.write("\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e52\3\2\2\2\u0e54")
        buf.write("\u0e55\3\2\2\2\u0e55\u0277\3\2\2\2\u0e56\u0e59\5\u0272")
        buf.write("\u013a\2\u0e57\u0e59\5\u0274\u013b\2\u0e58\u0e56\3\2\2")
        buf.write("\2\u0e58\u0e57\3\2\2\2\u0e59\u0279\3\2\2\2\u0e5a\u0e5b")
        buf.write("\7\u015d\2\2\u0e5b\u0e60\5\u0182\u00c2\2\u0e5c\u0e5d\7")
        buf.write("\u015b\2\2\u0e5d\u0e5f\5\u0182\u00c2\2\u0e5e\u0e5c\3\2")
        buf.write("\2\2\u0e5f\u0e62\3\2\2\2\u0e60\u0e5e\3\2\2\2\u0e60\u0e61")
        buf.write("\3\2\2\2\u0e61\u0e63\3\2\2\2\u0e62\u0e60\3\2\2\2\u0e63")
        buf.write("\u0e64\7\u015e\2\2\u0e64\u027b\3\2\2\2\u0e65\u0e6a\5\u0182")
        buf.write("\u00c2\2\u0e66\u0e67\7\u015b\2\2\u0e67\u0e69\5\u0182\u00c2")
        buf.write("\2\u0e68\u0e66\3\2\2\2\u0e69\u0e6c\3\2\2\2\u0e6a\u0e68")
        buf.write("\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u027d\3\2\2\2\u0e6c")
        buf.write("\u0e6a\3\2\2\2\u0e6d\u0e6e\7\22\2\2\u0e6e\u0e6f\7\24\2")
        buf.write("\2\u0e6f\u0e74\5\u0182\u00c2\2\u0e70\u0e71\7\u015b\2\2")
        buf.write("\u0e71\u0e73\5\u0182\u00c2\2\u0e72\u0e70\3\2\2\2\u0e73")
        buf.write("\u0e76\3\2\2\2\u0e74\u0e72\3\2\2\2\u0e74\u0e75\3\2\2\2")
        buf.write("\u0e75\u027f\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e77\u0e78\7")
        buf.write("?\2\2\u0e78\u0e79\7\24\2\2\u0e79\u0e7a\5\u0278\u013d\2")
        buf.write("\u0e7a\u0281\3\2\2\2\u0e7b\u0e7c\7&\2\2\u0e7c\u0e7d\7")
        buf.write("\24\2\2\u0e7d\u0e7e\5\u0278\u013d\2\u0e7e\u0283\3\2\2")
        buf.write("\2\u0e7f\u0e80\7@\2\2\u0e80\u0e81\7\24\2\2\u0e81\u0e82")
        buf.write("\5\u0278\u013d\2\u0e82\u0285\3\2\2\2\u0e83\u0e84\7A\2")
        buf.write("\2\u0e84\u0e87\7\24\2\2\u0e85\u0e88\5\u027a\u013e\2\u0e86")
        buf.write("\u0e88\5\u027c\u013f\2\u0e87\u0e85\3\2\2\2\u0e87\u0e86")
        buf.write("\3\2\2\2\u0e88\u0287\3\2\2\2\u0e89\u0e8a\5\u028c\u0147")
        buf.write("\2\u0e8a\u0ea1\7\u015d\2\2\u0e8b\u0ea2\7\u016d\2\2\u0e8c")
        buf.write("\u0e8e\t\21\2\2\u0e8d\u0e8c\3\2\2\2\u0e8d\u0e8e\3\2\2")
        buf.write("\2\u0e8e\u0e97\3\2\2\2\u0e8f\u0e94\5\u0204\u0103\2\u0e90")
        buf.write("\u0e91\7\u015b\2\2\u0e91\u0e93\5\u0204\u0103\2\u0e92\u0e90")
        buf.write("\3\2\2\2\u0e93\u0e96\3\2\2\2\u0e94\u0e92\3\2\2\2\u0e94")
        buf.write("\u0e95\3\2\2\2\u0e95\u0e98\3\2\2\2\u0e96\u0e94\3\2\2\2")
        buf.write("\u0e97\u0e8f\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0ea2\3")
        buf.write("\2\2\2\u0e99\u0e9e\5\u028a\u0146\2\u0e9a\u0e9b\7\u015b")
        buf.write("\2\2\u0e9b\u0e9d\5\u028a\u0146\2\u0e9c\u0e9a\3\2\2\2\u0e9d")
        buf.write("\u0ea0\3\2\2\2\u0e9e\u0e9c\3\2\2\2\u0e9e\u0e9f\3\2\2\2")
        buf.write("\u0e9f\u0ea2\3\2\2\2\u0ea0\u0e9e\3\2\2\2\u0ea1\u0e8b\3")
        buf.write("\2\2\2\u0ea1\u0e8d\3\2\2\2\u0ea1\u0e99\3\2\2\2\u0ea2\u0ea3")
        buf.write("\3\2\2\2\u0ea3\u0ea6\7\u015e\2\2\u0ea4\u0ea5\7\u00fe\2")
        buf.write("\2\u0ea5\u0ea7\5\u020c\u0107\2\u0ea6\u0ea4\3\2\2\2\u0ea6")
        buf.write("\u0ea7\3\2\2\2\u0ea7\u0289\3\2\2\2\u0ea8\u0eab\5\u02d4")
        buf.write("\u016b\2\u0ea9\u0eab\5\u0302\u0182\2\u0eaa\u0ea8\3\2\2")
        buf.write("\2\u0eaa\u0ea9\3\2\2\2\u0eab\u0eae\3\2\2\2\u0eac\u0ead")
        buf.write("\7\30\2\2\u0ead\u0eaf\5\u02f8\u017d\2\u0eae\u0eac\3\2")
        buf.write("\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u028b\3\2\2\2\u0eb0\u0eb3")
        buf.write("\5\u02fa\u017e\2\u0eb1\u0eb3\5\u0300\u0181\2\u0eb2\u0eb0")
        buf.write("\3\2\2\2\u0eb2\u0eb1\3\2\2\2\u0eb3\u028d\3\2\2\2\u0eb4")
        buf.write("\u0eb5\t\25\2\2\u0eb5\u028f\3\2\2\2\u0eb6\u0eb7\5\u028e")
        buf.write("\u0148\2\u0eb7\u0eb8\7\u015d\2\2\u0eb8\u0ebd\5\u02d4\u016b")
        buf.write("\2\u0eb9\u0eba\7\u015b\2\2\u0eba\u0ebc\5\u02d4\u016b\2")
        buf.write("\u0ebb\u0eb9\3\2\2\2\u0ebc\u0ebf\3\2\2\2\u0ebd\u0ebb\3")
        buf.write("\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ec0\3\2\2\2\u0ebf\u0ebd")
        buf.write("\3\2\2\2\u0ec0\u0ec6\7\u015b\2\2\u0ec1\u0ec7\5\u02f8\u017d")
        buf.write("\2\u0ec2\u0ec3\7\u015d\2\2\u0ec3\u0ec4\5\u021e\u0110\2")
        buf.write("\u0ec4\u0ec5\7\u015e\2\2\u0ec5\u0ec7\3\2\2\2\u0ec6\u0ec1")
        buf.write("\3\2\2\2\u0ec6\u0ec2\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8")
        buf.write("\u0ec9\7\u0170\2\2\u0ec9\u0eca\5\u02d4\u016b\2\u0eca\u0ecb")
        buf.write("\7\u015e\2\2\u0ecb\u0291\3\2\2\2\u0ecc\u0ecd\7\u0091\2")
        buf.write("\2\u0ecd\u0ece\7\u015d\2\2\u0ece\u0ecf\5\u02d4\u016b\2")
        buf.write("\u0ecf\u0ed5\7\30\2\2\u0ed0\u0ed6\5\u01a6\u00d4\2\u0ed1")
        buf.write("\u0ed6\5\u01a8\u00d5\2\u0ed2\u0ed6\5\u01aa\u00d6\2\u0ed3")
        buf.write("\u0ed6\5\u01ac\u00d7\2\u0ed4\u0ed6\5\u01ae\u00d8\2\u0ed5")
        buf.write("\u0ed0\3\2\2\2\u0ed5\u0ed1\3\2\2\2\u0ed5\u0ed2\3\2\2\2")
        buf.write("\u0ed5\u0ed3\3\2\2\2\u0ed5\u0ed4\3\2\2\2\u0ed6\u0ed7\3")
        buf.write("\2\2\2\u0ed7\u0ed8\7\u015e\2\2\u0ed8\u0293\3\2\2\2\u0ed9")
        buf.write("\u0eda\7\u00ae\2\2\u0eda\u0ee2\5\u02d4\u016b\2\u0edb\u0edc")
        buf.write("\7\u00af\2\2\u0edc\u0edd\5\u02d4\u016b\2\u0edd\u0ee0\7")
        buf.write("\u00b0\2\2\u0ede\u0ee1\5\u02d6\u016c\2\u0edf\u0ee1\5\u02d8")
        buf.write("\u016d\2\u0ee0\u0ede\3\2\2\2\u0ee0\u0edf\3\2\2\2\u0ee1")
        buf.write("\u0ee3\3\2\2\2\u0ee2\u0edb\3\2\2\2\u0ee3\u0ee4\3\2\2\2")
        buf.write("\u0ee4\u0ee2\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0eeb\3")
        buf.write("\2\2\2\u0ee6\u0ee9\7\u00b1\2\2\u0ee7\u0eea\5\u02d6\u016c")
        buf.write("\2\u0ee8\u0eea\5\u02d8\u016d\2\u0ee9\u0ee7\3\2\2\2\u0ee9")
        buf.write("\u0ee8\3\2\2\2\u0eea\u0eec\3\2\2\2\u0eeb\u0ee6\3\2\2\2")
        buf.write("\u0eeb\u0eec\3\2\2\2\u0eec\u0eee\3\2\2\2\u0eed\u0eef\7")
        buf.write("\u00b2\2\2\u0eee\u0eed\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef")
        buf.write("\u0295\3\2\2\2\u0ef0\u0ef8\7\u00ae\2\2\u0ef1\u0ef2\7\u00af")
        buf.write("\2\2\u0ef2\u0ef3\5\u02d4\u016b\2\u0ef3\u0ef6\7\u00b0\2")
        buf.write("\2\u0ef4\u0ef7\5\u02d6\u016c\2\u0ef5\u0ef7\5\u02d8\u016d")
        buf.write("\2\u0ef6\u0ef4\3\2\2\2\u0ef6\u0ef5\3\2\2\2\u0ef7\u0ef9")
        buf.write("\3\2\2\2\u0ef8\u0ef1\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa")
        buf.write("\u0ef8\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0f01\3\2\2\2")
        buf.write("\u0efc\u0eff\7\u00b1\2\2\u0efd\u0f00\5\u02d6\u016c\2\u0efe")
        buf.write("\u0f00\5\u02d8\u016d\2\u0eff\u0efd\3\2\2\2\u0eff\u0efe")
        buf.write("\3\2\2\2\u0f00\u0f02\3\2\2\2\u0f01\u0efc\3\2\2\2\u0f01")
        buf.write("\u0f02\3\2\2\2\u0f02\u0f04\3\2\2\2\u0f03\u0f05\7\u00b2")
        buf.write("\2\2\u0f04\u0f03\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0297")
        buf.write("\3\2\2\2\u0f06\u0f07\7\u0139\2\2\u0f07\u0f08\7\u015d\2")
        buf.write("\2\u0f08\u0f0b\5\u02d4\u016b\2\u0f09\u0f0a\7W\2\2\u0f0a")
        buf.write("\u0f0c\5\u029a\u014e\2\u0f0b\u0f09\3\2\2\2\u0f0b\u0f0c")
        buf.write("\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0e\7\u015e\2\2\u0f0e")
        buf.write("\u0299\3\2\2\2\u0f0f\u0f10\t\26\2\2\u0f10\u029b\3\2\2")
        buf.write("\2\u0f11\u0f12\7\u0138\2\2\u0f12\u0f13\7\u015d\2\2\u0f13")
        buf.write("\u0f14\5\u029e\u0150\2\u0f14\u0f15\7\27\2\2\u0f15\u0f16")
        buf.write("\5\u02d4\u016b\2\u0f16\u0f17\7\u015e\2\2\u0f17\u029d\3")
        buf.write("\2\2\2\u0f18\u0f19\t\27\2\2\u0f19\u029f\3\2\2\2\u0f1a")
        buf.write("\u0f27\5\u02ae\u0158\2\u0f1b\u0f27\7\u017d\2\2\u0f1c\u0f27")
        buf.write("\5\u02a6\u0154\2\u0f1d\u0f27\5\u02a8\u0155\2\u0f1e\u0f27")
        buf.write("\5\u02aa\u0156\2\u0f1f\u0f27\7\u0178\2\2\u0f20\u0f27\5")
        buf.write("\u02a2\u0152\2\u0f21\u0f27\7\u017a\2\2\u0f22\u0f27\7\u017b")
        buf.write("\2\2\u0f23\u0f27\5\u02a4\u0153\2\u0f24\u0f27\5\u02e4\u0173")
        buf.write("\2\u0f25\u0f27\7L\2\2\u0f26\u0f1a\3\2\2\2\u0f26\u0f1b")
        buf.write("\3\2\2\2\u0f26\u0f1c\3\2\2\2\u0f26\u0f1d\3\2\2\2\u0f26")
        buf.write("\u0f1e\3\2\2\2\u0f26\u0f1f\3\2\2\2\u0f26\u0f20\3\2\2\2")
        buf.write("\u0f26\u0f21\3\2\2\2\u0f26\u0f22\3\2\2\2\u0f26\u0f23\3")
        buf.write("\2\2\2\u0f26\u0f24\3\2\2\2\u0f26\u0f25\3\2\2\2\u0f27\u02a1")
        buf.write("\3\2\2\2\u0f28\u0f2a\7\u0178\2\2\u0f29\u0f2b\7\u0178\2")
        buf.write("\2\u0f2a\u0f29\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2a")
        buf.write("\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d\u02a3\3\2\2\2\u0f2e")
        buf.write("\u0f2f\7\u0180\2\2\u0f2f\u0f30\7\u0179\2\2\u0f30\u02a5")
        buf.write("\3\2\2\2\u0f31\u0f32\7a\2\2\u0f32\u0f35\7\u0178\2\2\u0f33")
        buf.write("\u0f35\7\u00fa\2\2\u0f34\u0f31\3\2\2\2\u0f34\u0f33\3\2")
        buf.write("\2\2\u0f35\u02a7\3\2\2\2\u0f36\u0f37\7c\2\2\u0f37\u0f3a")
        buf.write("\7\u0178\2\2\u0f38\u0f3a\7\u00fb\2\2\u0f39\u0f36\3\2\2")
        buf.write("\2\u0f39\u0f38\3\2\2\2\u0f3a\u02a9\3\2\2\2\u0f3b\u0f3c")
        buf.write("\7d\2\2\u0f3c\u0f3d\7\u0178\2\2\u0f3d\u02ab\3\2\2\2\u0f3e")
        buf.write("\u0f3f\t\30\2\2\u0f3f\u02ad\3\2\2\2\u0f40\u0f41\5\u02ac")
        buf.write("\u0157\2\u0f41\u0f42\5\u02b2\u015a\2\u0f42\u02af\3\2\2")
        buf.write("\2\u0f43\u0f44\7\u015d\2\2\u0f44\u0f45\5\u02ac\u0157\2")
        buf.write("\u0f45\u0f46\7\u015e\2\2\u0f46\u0f47\5\u02b2\u015a\2\u0f47")
        buf.write("\u0f53\3\2\2\2\u0f48\u0f49\7g\2\2\u0f49\u0f4a\5\u02ac")
        buf.write("\u0157\2\u0f4a\u0f4b\5\u02b2\u015a\2\u0f4b\u0f53\3\2\2")
        buf.write("\2\u0f4c\u0f4d\7g\2\2\u0f4d\u0f4e\7\u015d\2\2\u0f4e\u0f4f")
        buf.write("\5\u02d4\u016b\2\u0f4f\u0f50\7\u015e\2\2\u0f50\u0f51\5")
        buf.write("\u02b2\u015a\2\u0f51\u0f53\3\2\2\2\u0f52\u0f43\3\2\2\2")
        buf.write("\u0f52\u0f48\3\2\2\2\u0f52\u0f4c\3\2\2\2\u0f53\u02b1\3")
        buf.write("\2\2\2\u0f54\u0f55\7\u0116\2\2\u0f55\u0f56\7W\2\2\u0f56")
        buf.write("\u0f61\7\u0119\2\2\u0f57\u0f58\7\u011b\2\2\u0f58\u0f59")
        buf.write("\7W\2\2\u0f59\u0f61\7\u011f\2\2\u0f5a\u0f61\7\u0116\2")
        buf.write("\2\u0f5b\u0f61\7\u0119\2\2\u0f5c\u0f61\7\u011b\2\2\u0f5d")
        buf.write("\u0f61\7\u011d\2\2\u0f5e\u0f61\7\u011e\2\2\u0f5f\u0f61")
        buf.write("\7\u011f\2\2\u0f60\u0f54\3\2\2\2\u0f60\u0f57\3\2\2\2\u0f60")
        buf.write("\u0f5a\3\2\2\2\u0f60\u0f5b\3\2\2\2\u0f60\u0f5c\3\2\2\2")
        buf.write("\u0f60\u0f5d\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f60\u0f5f\3")
        buf.write("\2\2\2\u0f61\u02b3\3\2\2\2\u0f62\u0f6f\5\u02a0\u0151\2")
        buf.write("\u0f63\u0f6f\5\u02b0\u0159\2\u0f64\u0f6f\5\u0292\u014a")
        buf.write("\2\u0f65\u0f6f\5\u029c\u014f\2\u0f66\u0f6f\5\u0298\u014d")
        buf.write("\2\u0f67\u0f6f\5\u0294\u014b\2\u0f68\u0f6f\5\u0296\u014c")
        buf.write("\2\u0f69\u0f6f\5\u02da\u016e\2\u0f6a\u0f6f\5\u0288\u0145")
        buf.write("\2\u0f6b\u0f6f\5\u0290\u0149\2\u0f6c\u0f6f\5\u021a\u010e")
        buf.write("\2\u0f6d\u0f6f\5\u0272\u013a\2\u0f6e\u0f62\3\2\2\2\u0f6e")
        buf.write("\u0f63\3\2\2\2\u0f6e\u0f64\3\2\2\2\u0f6e\u0f65\3\2\2\2")
        buf.write("\u0f6e\u0f66\3\2\2\2\u0f6e\u0f67\3\2\2\2\u0f6e\u0f68\3")
        buf.write("\2\2\2\u0f6e\u0f69\3\2\2\2\u0f6e\u0f6a\3\2\2\2\u0f6e\u0f6b")
        buf.write("\3\2\2\2\u0f6e\u0f6c\3\2\2\2\u0f6e\u0f6d\3\2\2\2\u0f6f")
        buf.write("\u02b5\3\2\2\2\u0f70\u0f71\t\31\2\2\u0f71\u02b7\3\2\2")
        buf.write("\2\u0f72\u0f7c\7L\2\2\u0f73\u0f7c\7\3\2\2\u0f74\u0f7c")
        buf.write("\7\4\2\2\u0f75\u0f76\7\t\2\2\u0f76\u0f7c\7L\2\2\u0f77")
        buf.write("\u0f78\7\t\2\2\u0f78\u0f7c\7\3\2\2\u0f79\u0f7a\7\t\2\2")
        buf.write("\u0f7a\u0f7c\7\4\2\2\u0f7b\u0f72\3\2\2\2\u0f7b\u0f73\3")
        buf.write("\2\2\2\u0f7b\u0f74\3\2\2\2\u0f7b\u0f75\3\2\2\2\u0f7b\u0f77")
        buf.write("\3\2\2\2\u0f7b\u0f79\3\2\2\2\u0f7c\u02b9\3\2\2\2\u0f7d")
        buf.write("\u0f7e\7\u0175\2\2\u0f7e\u02bb\3\2\2\2\u0f7f\u0f80\t\32")
        buf.write("\2\2\u0f80\u02bd\3\2\2\2\u0f81\u0f82\t\33\2\2\u0f82\u02bf")
        buf.write("\3\2\2\2\u0f83\u0f84\7\u0174\2\2\u0f84\u02c1\3\2\2\2\u0f85")
        buf.write("\u0f86\7\u0171\2\2\u0f86\u02c3\3\2\2\2\u0f87\u0f88\7\u0173")
        buf.write("\2\2\u0f88\u02c5\3\2\2\2\u0f89\u0f8a\t\34\2\2\u0f8a\u02c7")
        buf.write("\3\2\2\2\u0f8b\u0f91\5\u02c6\u0164\2\u0f8c\u0f91\7\u0166")
        buf.write("\2\2\u0f8d\u0f91\7\u0167\2\2\u0f8e\u0f91\7\u0168\2\2\u0f8f")
        buf.write("\u0f91\7\u0169\2\2\u0f90\u0f8b\3\2\2\2\u0f90\u0f8c\3\2")
        buf.write("\2\2\u0f90\u0f8d\3\2\2\2\u0f90\u0f8e\3\2\2\2\u0f90\u0f8f")
        buf.write("\3\2\2\2\u0f91\u02c9\3\2\2\2\u0f92\u0f93\7K\2\2\u0f93")
        buf.write("\u0f94\7\32\2\2\u0f94\u0f95\7\27\2\2\u0f95\u02cb\3\2\2")
        buf.write("\2\u0f96\u0f9e\7\u0163\2\2\u0f97\u0f9e\7\u0164\2\2\u0f98")
        buf.write("\u0f9e\7\u0165\2\2\u0f99\u0f9a\7K\2\2\u0f9a\u0f9b\7\t")
        buf.write("\2\2\u0f9b\u0f9c\7\32\2\2\u0f9c\u0f9e\7\27\2\2\u0f9d\u0f96")
        buf.write("\3\2\2\2\u0f9d\u0f97\3\2\2\2\u0f9d\u0f98\3\2\2\2\u0f9d")
        buf.write("\u0f99\3\2\2\2\u0f9e\u02cd\3\2\2\2\u0f9f\u0fa0\7\t\2\2")
        buf.write("\u0fa0\u02cf\3\2\2\2\u0fa1\u0fa2\7\7\2\2\u0fa2\u02d1\3")
        buf.write("\2\2\2\u0fa3\u0fa4\7\b\2\2\u0fa4\u02d3\3\2\2\2\u0fa5\u0fa6")
        buf.write("\b\u016b\1\2\u0fa6\u0fb1\5\u02b4\u015b\2\u0fa7\u0fa8\7")
        buf.write("\u015f\2\2\u0fa8\u0fa9\5\u02d4\u016b\2\u0fa9\u0faa\7\u0160")
        buf.write("\2\2\u0faa\u0fb0\3\2\2\2\u0fab\u0fac\7\u0159\2\2\u0fac")
        buf.write("\u0fb0\5\u02f8\u017d\2\u0fad\u0fae\7\u0159\2\2\u0fae\u0fb0")
        buf.write("\5\u0302\u0182\2\u0faf\u0fa7\3\2\2\2\u0faf\u0fab\3\2\2")
        buf.write("\2\u0faf\u0fad\3\2\2\2\u0fb0\u0fb3\3\2\2\2\u0fb1\u0faf")
        buf.write("\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fc2\3\2\2\2\u0fb3")
        buf.write("\u0fb1\3\2\2\2\u0fb4\u0fb5\5\u02b6\u015c\2\u0fb5\u0fb6")
        buf.write("\5\u02d4\u016b\22\u0fb6\u0fc2\3\2\2\2\u0fb7\u0fb8\7\r")
        buf.write("\2\2\u0fb8\u0fc2\5\u02da\u016e\2\u0fb9\u0fba\5\u02ce\u0168")
        buf.write("\2\u0fba\u0fbb\5\u02d4\u016b\7\u0fbb\u0fc2\3\2\2\2\u0fbc")
        buf.write("\u0fc2\5\u02d8\u016d\2\u0fbd\u0fbe\7\u015d\2\2\u0fbe\u0fbf")
        buf.write("\5\u02d4\u016b\2\u0fbf\u0fc0\7\u015e\2\2\u0fc0\u0fc2\3")
        buf.write("\2\2\2\u0fc1\u0fa5\3\2\2\2\u0fc1\u0fb4\3\2\2\2\u0fc1\u0fb7")
        buf.write("\3\2\2\2\u0fc1\u0fb9\3\2\2\2\u0fc1\u0fbc\3\2\2\2\u0fc1")
        buf.write("\u0fbd\3\2\2\2\u0fc2\u0ff1\3\2\2\2\u0fc3\u0fc4\f\20\2")
        buf.write("\2\u0fc4\u0fc5\5\u02ba\u015e\2\u0fc5\u0fc6\5\u02d4\u016b")
        buf.write("\21\u0fc6\u0ff0\3\2\2\2\u0fc7\u0fc8\f\17\2\2\u0fc8\u0fc9")
        buf.write("\5\u02bc\u015f\2\u0fc9\u0fca\5\u02d4\u016b\20\u0fca\u0ff0")
        buf.write("\3\2\2\2\u0fcb\u0fcc\f\16\2\2\u0fcc\u0fcd\5\u02be\u0160")
        buf.write("\2\u0fcd\u0fce\5\u02d4\u016b\17\u0fce\u0ff0\3\2\2\2\u0fcf")
        buf.write("\u0fd0\f\r\2\2\u0fd0\u0fd1\5\u02c0\u0161\2\u0fd1\u0fd2")
        buf.write("\5\u02d4\u016b\16\u0fd2\u0ff0\3\2\2\2\u0fd3\u0fd4\f\f")
        buf.write("\2\2\u0fd4\u0fd5\5\u02c2\u0162\2\u0fd5\u0fd6\5\u02d4\u016b")
        buf.write("\r\u0fd6\u0ff0\3\2\2\2\u0fd7\u0fd8\f\13\2\2\u0fd8\u0fd9")
        buf.write("\5\u02c4\u0163\2\u0fd9\u0fda\5\u02d4\u016b\f\u0fda\u0ff0")
        buf.write("\3\2\2\2\u0fdb\u0fde\f\b\2\2\u0fdc\u0fdf\5\u02cc\u0167")
        buf.write("\2\u0fdd\u0fdf\5\u02ca\u0166\2\u0fde\u0fdc\3\2\2\2\u0fde")
        buf.write("\u0fdd\3\2\2\2\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe1\5\u02d4")
        buf.write("\u016b\t\u0fe1\u0ff0\3\2\2\2\u0fe2\u0fe3\f\6\2\2\u0fe3")
        buf.write("\u0fe4\5\u02d0\u0169\2\u0fe4\u0fe5\5\u02d4\u016b\7\u0fe5")
        buf.write("\u0ff0\3\2\2\2\u0fe6\u0fe7\f\5\2\2\u0fe7\u0fe8\5\u02d2")
        buf.write("\u016a\2\u0fe8\u0fe9\5\u02d4\u016b\6\u0fe9\u0ff0\3\2\2")
        buf.write("\2\u0fea\u0feb\f\21\2\2\u0feb\u0fec\7K\2\2\u0fec\u0ff0")
        buf.write("\5\u02b8\u015d\2\u0fed\u0fee\f\n\2\2\u0fee\u0ff0\5\u02dc")
        buf.write("\u016f\2\u0fef\u0fc3\3\2\2\2\u0fef\u0fc7\3\2\2\2\u0fef")
        buf.write("\u0fcb\3\2\2\2\u0fef\u0fcf\3\2\2\2\u0fef\u0fd3\3\2\2\2")
        buf.write("\u0fef\u0fd7\3\2\2\2\u0fef\u0fdb\3\2\2\2\u0fef\u0fe2\3")
        buf.write("\2\2\2\u0fef\u0fe6\3\2\2\2\u0fef\u0fea\3\2\2\2\u0fef\u0fed")
        buf.write("\3\2\2\2\u0ff0\u0ff3\3\2\2\2\u0ff1\u0fef\3\2\2\2\u0ff1")
        buf.write("\u0ff2\3\2\2\2\u0ff2\u02d5\3\2\2\2\u0ff3\u0ff1\3\2\2\2")
        buf.write("\u0ff4\u0ff7\5\u02d4\u016b\2\u0ff5\u0ff6\7\30\2\2\u0ff6")
        buf.write("\u0ff8\5\u02f8\u017d\2\u0ff7\u0ff5\3\2\2\2\u0ff7\u0ff8")
        buf.write("\3\2\2\2\u0ff8\u02d7\3\2\2\2\u0ff9\u0ffa\7\u015d\2\2\u0ffa")
        buf.write("\u0fff\5\u02d6\u016c\2\u0ffb\u0ffc\7\u015b\2\2\u0ffc\u0ffe")
        buf.write("\5\u02d6\u016c\2\u0ffd\u0ffb\3\2\2\2\u0ffe\u1001\3\2\2")
        buf.write("\2\u0fff\u0ffd\3\2\2\2\u0fff\u1000\3\2\2\2\u1000\u1002")
        buf.write("\3\2\2\2\u1001\u0fff\3\2\2\2\u1002\u1003\7\u015e\2\2\u1003")
        buf.write("\u02d9\3\2\2\2\u1004\u1005\7\u015d\2\2\u1005\u1006\5\u01c2")
        buf.write("\u00e2\2\u1006\u1007\7\u015e\2\2\u1007\u02db\3\2\2\2\u1008")
        buf.write("\u1009\5\u02c8\u0165\2\u1009\u100a\5\u02d4\u016b\2\u100a")
        buf.write("\u100f\3\2\2\2\u100b\u100f\5\u02de\u0170\2\u100c\u100d")
        buf.write("\7\t\2\2\u100d\u100f\5\u02e2\u0172\2\u100e\u1008\3\2\2")
        buf.write("\2\u100e\u100b\3\2\2\2\u100e\u100c\3\2\2\2\u100f\u02dd")
        buf.write("\3\2\2\2\u1010\u1011\7\u00c0\2\2\u1011\u101e\5\u02e0\u0171")
        buf.write("\2\u1012\u1013\7\u00d8\2\2\u1013\u1014\5\u02d4\u016b\2")
        buf.write("\u1014\u1015\7\7\2\2\u1015\u1016\5\u02d4\u016b\2\u1016")
        buf.write("\u101e\3\2\2\2\u1017\u1018\7\n\2\2\u1018\u1019\7\13\2")
        buf.write("\2\u1019\u101e\5\u0272\u013a\2\u101a\u101b\7\n\2\2\u101b")
        buf.write("\u101c\7\5\2\2\u101c\u101e\5\u0272\u013a\2\u101d\u1010")
        buf.write("\3\2\2\2\u101d\u1012\3\2\2\2\u101d\u1017\3\2\2\2\u101d")
        buf.write("\u101a\3\2\2\2\u101e\u02df\3\2\2\2\u101f\u1023\5\u02da")
        buf.write("\u016e\2\u1020\u1023\5\u0272\u013a\2\u1021\u1023\5\u02f8")
        buf.write("\u017d\2\u1022\u101f\3\2\2\2\u1022\u1020\3\2\2\2\u1022")
        buf.write("\u1021\3\2\2\2\u1023\u02e1\3\2\2\2\u1024\u1025\5\u02c6")
        buf.write("\u0164\2\u1025\u1026\5\u02d4\u016b\2\u1026\u1029\3\2\2")
        buf.write("\2\u1027\u1029\5\u02de\u0170\2\u1028\u1024\3\2\2\2\u1028")
        buf.write("\u1027\3\2\2\2\u1029\u02e3\3\2\2\2\u102a\u102b\t\35\2")
        buf.write("\2\u102b\u02e5\3\2\2\2\u102c\u102d\t\35\2\2\u102d\u02e7")
        buf.write("\3\2\2\2\u102e\u1030\5\u0246\u0124\2\u102f\u1031\5\u02ea")
        buf.write("\u0176\2\u1030\u102f\3\2\2\2\u1030\u1031\3\2\2\2\u1031")
        buf.write("\u02e9\3\2\2\2\u1032\u1033\7&\2\2\u1033\u1034\7\u015d")
        buf.write("\2\2\u1034\u1039\5\u02ec\u0177\2\u1035\u1036\7\u015b\2")
        buf.write("\2\u1036\u1038\5\u02ec\u0177\2\u1037\u1035\3\2\2\2\u1038")
        buf.write("\u103b\3\2\2\2\u1039\u1037\3\2\2\2\u1039\u103a\3\2\2\2")
        buf.write("\u103a\u103c\3\2\2\2\u103b\u1039\3\2\2\2\u103c\u103d\7")
        buf.write("\u015e\2\2\u103d\u02eb\3\2\2\2\u103e\u1041\5\u02f8\u017d")
        buf.write("\2\u103f\u1040\7\u0163\2\2\u1040\u1042\5\u02a0\u0151\2")
        buf.write("\u1041\u103f\3\2\2\2\u1041\u1042\3\2\2\2\u1042\u02ed\3")
        buf.write("\2\2\2\u1043\u1044\7&\2\2\u1044\u1045\7\u015d\2\2\u1045")
        buf.write("\u104a\5\u02f0\u0179\2\u1046\u1047\7\u015b\2\2\u1047\u1049")
        buf.write("\5\u02f0\u0179\2\u1048\u1046\3\2\2\2\u1049\u104c\3\2\2")
        buf.write("\2\u104a\u1048\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104d")
        buf.write("\3\2\2\2\u104c\u104a\3\2\2\2\u104d\u104e\7\u015e\2\2\u104e")
        buf.write("\u02ef\3\2\2\2\u104f\u1050\5\u02f8\u017d\2\u1050\u1051")
        buf.write("\5\u02f2\u017a\2\u1051\u1052\5\u02a0\u0151\2\u1052\u02f1")
        buf.write("\3\2\2\2\u1053\u1054\t\36\2\2\u1054\u02f3\3\2\2\2\u1055")
        buf.write("\u1056\t\37\2\2\u1056\u02f5\3\2\2\2\u1057\u105b\5\u02f4")
        buf.write("\u017b\2\u1058\u105b\7\u0178\2\2\u1059\u105b\5\u02fa\u017e")
        buf.write("\2\u105a\u1057\3\2\2\2\u105a\u1058\3\2\2\2\u105a\u1059")
        buf.write("\3\2\2\2\u105b\u02f7\3\2\2\2\u105c\u105f\7\u017e\2\2\u105d")
        buf.write("\u105f\5\u02fe\u0180\2\u105e\u105c\3\2\2\2\u105e\u105d")
        buf.write("\3\2\2\2\u105f\u02f9\3\2\2\2\u1060\u1061\5\u02f8\u017d")
        buf.write("\2\u1061\u1062\7\u0159\2\2\u1062\u1063\5\u02f8\u017d\2")
        buf.write("\u1063\u1066\3\2\2\2\u1064\u1066\5\u02f8\u017d\2\u1065")
        buf.write("\u1060\3\2\2\2\u1065\u1064\3\2\2\2\u1066\u02fb\3\2\2\2")
        buf.write("\u1067\u106a\5\u02f8\u017d\2\u1068\u106a\7\u017f\2\2\u1069")
        buf.write("\u1067\3\2\2\2\u1069\u1068\3\2\2\2\u106a\u02fd\3\2\2\2")
        buf.write("\u106b\u106c\t \2\2\u106c\u02ff\3\2\2\2\u106d\u1080\7")
        buf.write("\f\2\2\u106e\u1080\7l\2\2\u106f\u1080\7n\2\2\u1070\u1080")
        buf.write("\7]\2\2\u1071\u1080\7\u00da\2\2\u1072\u1080\7Y\2\2\u1073")
        buf.write("\u1080\7\u00fa\2\2\u1074\u1080\7\u00fb\2\2\u1075\u1080")
        buf.write("\7a\2\2\u1076\u1080\7_\2\2\u1077\u1080\7^\2\2\u1078\u1080")
        buf.write("\7\u00ff\2\2\u1079\u1080\7\\\2\2\u107a\u1080\7[\2\2\u107b")
        buf.write("\u1080\7c\2\2\u107c\u1080\7\"\2\2\u107d\u1080\7#\2\2\u107e")
        buf.write("\u1080\5\u028e\u0148\2\u107f\u106d\3\2\2\2\u107f\u106e")
        buf.write("\3\2\2\2\u107f\u106f\3\2\2\2\u107f\u1070\3\2\2\2\u107f")
        buf.write("\u1071\3\2\2\2\u107f\u1072\3\2\2\2\u107f\u1073\3\2\2\2")
        buf.write("\u107f\u1074\3\2\2\2\u107f\u1075\3\2\2\2\u107f\u1076\3")
        buf.write("\2\2\2\u107f\u1077\3\2\2\2\u107f\u1078\3\2\2\2\u107f\u1079")
        buf.write("\3\2\2\2\u107f\u107a\3\2\2\2\u107f\u107b\3\2\2\2\u107f")
        buf.write("\u107c\3\2\2\2\u107f\u107d\3\2\2\2\u107f\u107e\3\2\2\2")
        buf.write("\u1080\u0301\3\2\2\2\u1081\u1082\t!\2\2\u1082\u0303\3")
        buf.write("\2\2\2\u01ff\u030a\u030e\u0310\u031b\u0321\u0327\u0332")
        buf.write("\u0335\u0337\u0349\u034e\u0353\u0359\u035d\u036a\u036e")
        buf.write("\u0372\u0377\u037e\u0384\u0388\u038a\u038e\u0395\u0397")
        buf.write("\u039d\u03a8\u03b0\u03b4\u03de\u03f9\u03fd\u0400\u0405")
        buf.write("\u0413\u041c\u0420\u0427\u042a\u042e\u0434\u0437\u043a")
        buf.write("\u043d\u0443\u0446\u0449\u044c\u044f\u0452\u0455\u0458")
        buf.write("\u045b\u045f\u0461\u046b\u0470\u0474\u0477\u0482\u0492")
        buf.write("\u04a1\u04a5\u04b4\u04c1\u04c5\u04ca\u04e5\u04ea\u04f2")
        buf.write("\u04f8\u04fc\u04ff\u0502\u0508\u050f\u0519\u051d\u0522")
        buf.write("\u0526\u052c\u0533\u053a\u0542\u0549\u054d\u0550\u0558")
        buf.write("\u055b\u0563\u0566\u056a\u0574\u0579\u057f\u058c\u059c")
        buf.write("\u05ac\u05bc\u05c3\u05d7\u05db\u05e0\u05e5\u05e8\u05eb")
        buf.write("\u05ef\u05f2\u05f5\u05fc\u0607\u060f\u0615\u0625\u0628")
        buf.write("\u0632\u063a\u063e\u0641\u0645\u0649\u064c\u0651\u0656")
        buf.write("\u065c\u0667\u0669\u066d\u0673\u0679\u067e\u0684\u0689")
        buf.write("\u0690\u0695\u069d\u06a2\u06a9\u06af\u06b7\u06be\u06c3")
        buf.write("\u06cb\u06d2\u06d5\u06d8\u06da\u06e8\u06ea\u06f0\u06ff")
        buf.write("\u0710\u0715\u0719\u071d\u0724\u072a\u072e\u0731\u0748")
        buf.write("\u074d\u0751\u0759\u0761\u0765\u076b\u0770\u0777\u077a")
        buf.write("\u0780\u0787\u078f\u0798\u07a1\u07b5\u07bb\u07be\u07c0")
        buf.write("\u07c7\u07d1\u07d9\u07dd\u07e1\u07ee\u07f7\u07fd\u0800")
        buf.write("\u0804\u080b\u080e\u0811\u0814\u081d\u0821\u0824\u0827")
        buf.write("\u082a\u082d\u0830\u083e\u0846\u084c\u0850\u085d\u086d")
        buf.write("\u087d\u0881\u0890\u0896\u0899\u089c\u089f\u08a2\u08a6")
        buf.write("\u08b4\u08bc\u08bf\u08ce\u08f0\u08f8\u08fd\u0907\u090f")
        buf.write("\u0917\u091f\u092a\u092e\u0936\u093f\u0942\u094b\u094f")
        buf.write("\u0951\u0955\u0959\u095f\u0966\u096f\u097a\u097e\u0985")
        buf.write("\u0991\u0998\u09a0\u09a4\u09a7\u09ae\u09b4\u09b8\u09bb")
        buf.write("\u09c1\u09c5\u09c9\u09ce\u09d2\u09d6\u09da\u09e2\u09e6")
        buf.write("\u09ea\u09ee\u09f2\u09fa\u09fe\u0a02\u0a12\u0a1b\u0a23")
        buf.write("\u0a2e\u0a40\u0a43\u0a4d\u0a69\u0a6f\u0a75\u0a7b\u0a7d")
        buf.write("\u0a80\u0a86\u0a8e\u0a93\u0a9f\u0aa6\u0aab\u0aae\u0ab2")
        buf.write("\u0ab5\u0ab8\u0abb\u0abe\u0ac4\u0ac8\u0acb\u0ace\u0ad1")
        buf.write("\u0ad4\u0ad7\u0ade\u0ae1\u0ae8\u0aeb\u0aee\u0af1\u0af4")
        buf.write("\u0af7\u0afa\u0afd\u0b00\u0b03\u0b07\u0b0a\u0b0d\u0b10")
        buf.write("\u0b13\u0b16\u0b19\u0b1c\u0b1f\u0b22\u0b24\u0b2a\u0b2f")
        buf.write("\u0b36\u0b38\u0b3b\u0b40\u0b43\u0b47\u0b4c\u0b53\u0b59")
        buf.write("\u0b65\u0b6c\u0b72\u0b7b\u0b7e\u0b82\u0b88\u0b92\u0b96")
        buf.write("\u0ba1\u0ba7\u0baa\u0bb4\u0bb6\u0bba\u0bc1\u0bd7\u0bde")
        buf.write("\u0be2\u0be5\u0bea\u0bed\u0bf4\u0bfb\u0bfe\u0c06\u0c0c")
        buf.write("\u0c0e\u0c10\u0c13\u0c16\u0c1b\u0c23\u0c25\u0c2b\u0c2e")
        buf.write("\u0c31\u0c39\u0c3f\u0c41\u0c43\u0c46\u0c49\u0c4d\u0c54")
        buf.write("\u0c5d\u0c67\u0c6a\u0c6d\u0c70\u0c74\u0c7e\u0c88\u0c90")
        buf.write("\u0c9b\u0ca2\u0cab\u0cb3\u0cbf\u0cc2\u0cc8\u0ccf\u0cd6")
        buf.write("\u0cdd\u0ce4\u0ced\u0cf1\u0cf8\u0cfd\u0d01\u0d14\u0d19")
        buf.write("\u0d1e\u0d29\u0d2e\u0d32\u0d36\u0d3e\u0d45\u0d4e\u0d51")
        buf.write("\u0d5a\u0d5f\u0d70\u0d73\u0d80\u0d84\u0d88\u0d8b\u0d8e")
        buf.write("\u0d91\u0d95\u0d98\u0d9b\u0da2\u0da7\u0daf\u0db2\u0db6")
        buf.write("\u0dbb\u0dbf\u0dc4\u0dcb\u0dd9\u0ddc\u0de0\u0def\u0df9")
        buf.write("\u0e00\u0e09\u0e15\u0e1f\u0e29\u0e2e\u0e32\u0e36\u0e3c")
        buf.write("\u0e4e\u0e54\u0e58\u0e60\u0e6a\u0e74\u0e87\u0e8d\u0e94")
        buf.write("\u0e97\u0e9e\u0ea1\u0ea6\u0eaa\u0eae\u0eb2\u0ebd\u0ec6")
        buf.write("\u0ed5\u0ee0\u0ee4\u0ee9\u0eeb\u0eee\u0ef6\u0efa\u0eff")
        buf.write("\u0f01\u0f04\u0f0b\u0f26\u0f2c\u0f34\u0f39\u0f52\u0f60")
        buf.write("\u0f6e\u0f7b\u0f90\u0f9d\u0faf\u0fb1\u0fc1\u0fde\u0fef")
        buf.write("\u0ff1\u0ff7\u0fff\u100e\u101d\u1022\u1028\u1030\u1039")
        buf.write("\u1041\u104a\u105a\u105e\u1065\u1069\u107f")
        return buf.getvalue()


class HiveParser ( Parser ):

    grammarFileName = "HiveParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "':'", 
                     "','", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "<INVALID>", "'<=>'", "<INVALID>", "'<='", "'<'", "'>='", 
                     "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", 
                     "'->'", "'&'", "'~'", "'|'", "'||'", "'^'", "'?'", 
                     "'$'" ]

    symbolicNames = [ "<INVALID>", "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", 
                      "KW_AND", "KW_OR", "KW_NOT", "KW_LIKE", "KW_ANY", 
                      "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", "KW_NULLS", 
                      "KW_LAST", "KW_ORDER", "KW_GROUP", "KW_BY", "KW_HAVING", 
                      "KW_WHERE", "KW_FROM", "KW_AS", "KW_SELECT", "KW_DISTINCT", 
                      "KW_INSERT", "KW_OVERWRITE", "KW_OUTER", "KW_UNIQUEJOIN", 
                      "KW_PRESERVE", "KW_JOIN", "KW_ANTI", "KW_LEFT", "KW_RIGHT", 
                      "KW_FULL", "KW_ON", "KW_PARTITION", "KW_PARTITIONS", 
                      "KW_TABLE", "KW_TABLES", "KW_COLUMNS", "KW_INDEX", 
                      "KW_INDEXES", "KW_REBUILD", "KW_FUNCTIONS", "KW_SHOW", 
                      "KW_MSCK", "KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", 
                      "KW_TRANSFORM", "KW_TRANSFORM_KEYS", "KW_TRANSFORM_VALUES", 
                      "KW_FILTER", "KW_ARRAY_SORT", "KW_ZIP_WITH", "KW_AGGREGATE", 
                      "KW_FORALL", "KW_MAP_FILTER", "KW_MAP_ZIP_WITH", "KW_USING", 
                      "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", "KW_UNION", 
                      "KW_EXCEPT", "KW_LOAD", "KW_EXPORT", "KW_IMPORT", 
                      "KW_REPLICATION", "KW_METADATA", "KW_DATA", "KW_INPATH", 
                      "KW_IS", "KW_NULL", "KW_CREATE", "KW_EXTERNAL", "KW_ALTER", 
                      "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", 
                      "KW_DESCRIBE", "KW_DROP", "KW_RENAME", "KW_TO", "KW_COMMENT", 
                      "KW_BOOLEAN", "KW_TINYINT", "KW_SMALLINT", "KW_INT", 
                      "KW_BIGINT", "KW_FLOAT", "KW_DOUBLE", "KW_PRECISION", 
                      "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", 
                      "KW_TIME", "KW_ZONE", "KW_INTERVAL", "KW_DECIMAL", 
                      "KW_STRING", "KW_CHAR", "KW_VARCHAR", "KW_ARRAY", 
                      "KW_STRUCT", "KW_MAP", "KW_UNIONTYPE", "KW_REDUCE", 
                      "KW_PARTITIONED", "KW_CLUSTERED", "KW_SORTED", "KW_INTO", 
                      "KW_BUCKETS", "KW_ROW", "KW_ROWS", "KW_FORMAT", "KW_DELIMITED", 
                      "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", 
                      "KW_ITEMS", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LINES", 
                      "KW_STORED", "KW_FILEFORMAT", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", 
                      "KW_INPUTDRIVER", "KW_OUTPUTDRIVER", "KW_ENABLE", 
                      "KW_DISABLE", "KW_LOCATION", "KW_TABLESAMPLE", "KW_BUCKET", 
                      "KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", "KW_ADD", 
                      "KW_REPLACE", "KW_RLIKE", "KW_REGEXP", "KW_TEMPORARY", 
                      "KW_FUNCTION", "KW_MACRO", "KW_FILE", "KW_JAR", "KW_EXPLAIN", 
                      "KW_EXTENDED", "KW_FORMATTED", "KW_DEPENDENCY", "KW_LOGICAL", 
                      "KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
                      "KW_DBPROPERTIES", "KW_LIMIT", "KW_OFFSET", "KW_SET", 
                      "KW_UNSET", "KW_TBLPROPERTIES", "KW_IDXPROPERTIES", 
                      "KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", "KW_CASE", 
                      "KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "KW_MAPJOIN", 
                      "KW_STREAMTABLE", "KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", 
                      "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS", "KW_FETCH", 
                      "KW_INTERSECT", "KW_VIEW", "KW_VIEWS", "KW_IN", "KW_DATABASE", 
                      "KW_DATABASES", "KW_MATERIALIZED", "KW_SCHEMA", "KW_SCHEMAS", 
                      "KW_GRANT", "KW_REVOKE", "KW_SSL", "KW_UNDO", "KW_LOCK", 
                      "KW_LOCKS", "KW_UNLOCK", "KW_SHARED", "KW_EXCLUSIVE", 
                      "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", 
                      "KW_READS", "KW_PURGE", "KW_RANGE", "KW_ANALYZE", 
                      "KW_BEFORE", "KW_BETWEEN", "KW_BOTH", "KW_BINARY", 
                      "KW_CROSS", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", 
                      "KW_RECORDREADER", "KW_RECORDWRITER", "KW_SEMI", "KW_LATERAL", 
                      "KW_PIVOT", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", 
                      "KW_COMPUTE", "KW_STATISTICS", "KW_USE", "KW_OPTION", 
                      "KW_CONCATENATE", "KW_SHOW_DATABASE", "KW_UPDATE", 
                      "KW_RESTRICT", "KW_CASCADE", "KW_SKEWED", "KW_ROLLUP", 
                      "KW_CUBE", "KW_DIRECTORIES", "KW_FOR", "KW_WINDOW", 
                      "KW_UNBOUNDED", "KW_PRECEDING", "KW_FOLLOWING", "KW_CURRENT", 
                      "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", "KW_LESS", 
                      "KW_MORE", "KW_OVER", "KW_GROUPING", "KW_SETS", "KW_TRUNCATE", 
                      "KW_NOSCAN", "KW_USER", "KW_ROLE", "KW_ROLES", "KW_INNER", 
                      "KW_EXCHANGE", "KW_URI", "KW_SERVER", "KW_ADMIN", 
                      "KW_OWNER", "KW_PRINCIPALS", "KW_COMPACT", "KW_COMPACTIONS", 
                      "KW_TRANSACTIONS", "KW_REWRITE", "KW_AUTHORIZATION", 
                      "KW_REOPTIMIZATION", "KW_CONF", "KW_VALUES", "KW_RELOAD", 
                      "KW_YEAR", "KW_QUERY", "KW_QUARTER", "KW_MONTH", "KW_WEEK", 
                      "KW_DAY", "KW_DOW", "KW_HOUR", "KW_MINUTE", "KW_SECOND", 
                      "KW_START", "KW_TRANSACTION", "KW_COMMIT", "KW_ROLLBACK", 
                      "KW_WORK", "KW_ONLY", "KW_WRITE", "KW_ISOLATION", 
                      "KW_LEVEL", "KW_SNAPSHOT", "KW_AUTOCOMMIT", "KW_CACHE", 
                      "KW_PRIMARY", "KW_FOREIGN", "KW_REFERENCES", "KW_CONSTRAINT", 
                      "KW_ENFORCED", "KW_VALIDATE", "KW_NOVALIDATE", "KW_RELY", 
                      "KW_NORELY", "KW_UNIQUE", "KW_KEY", "KW_ABORT", "KW_EXTRACT", 
                      "KW_FLOOR", "KW_MERGE", "KW_MATCHED", "KW_REPL", "KW_DUMP", 
                      "KW_STATUS", "KW_VECTORIZATION", "KW_SUMMARY", "KW_OPERATOR", 
                      "KW_EXPRESSION", "KW_DETAIL", "KW_WAIT", "KW_RESOURCE", 
                      "KW_PLAN", "KW_QUERY_PARALLELISM", "KW_PLANS", "KW_ACTIVATE", 
                      "KW_DEFAULT", "KW_CHECK", "KW_POOL", "KW_MOVE", "KW_DO", 
                      "KW_ALLOC_FRACTION", "KW_SCHEDULING_POLICY", "KW_PATH", 
                      "KW_MAPPING", "KW_WORKLOAD", "KW_MANAGEMENT", "KW_ACTIVE", 
                      "KW_UNMANAGED", "KW_APPLICATION", "KW_SYNC", "DOT", 
                      "COLON", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
                      "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", 
                      "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", 
                      "GREATERTHANOREQUALTO", "GREATERTHAN", "DIVIDE", "PLUS", 
                      "MINUS", "STAR", "MOD", "DIV", "PROCESSTO", "AMPERSAND", 
                      "TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", 
                      "QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", 
                      "IntegralLiteral", "NumberLiteral", "ByteLengthLiteral", 
                      "Number", "Identifier", "QuotedIdentifier", "CharSetName", 
                      "WS", "LINE_COMMENT", "MULTI_LINE_COMMENT", "QUERY_HINT", 
                      "SHOW_HINT", "HIDDEN_HINT" ]

    RULE_statements = 0
    RULE_statementSeparator = 1
    RULE_empty_ = 2
    RULE_statement = 3
    RULE_explainStatement = 4
    RULE_explainOption = 5
    RULE_vectorizationOnly = 6
    RULE_vectorizatonDetail = 7
    RULE_execStatement = 8
    RULE_loadStatement = 9
    RULE_replicationClause = 10
    RULE_exportStatement = 11
    RULE_importStatement = 12
    RULE_replDumpStatement = 13
    RULE_replLoadStatement = 14
    RULE_replConfigs = 15
    RULE_replConfigsList = 16
    RULE_replStatusStatement = 17
    RULE_ddlStatement = 18
    RULE_ifExists = 19
    RULE_restrictOrCascade = 20
    RULE_ifNotExists = 21
    RULE_rewriteEnabled = 22
    RULE_rewriteDisabled = 23
    RULE_storedAsDirs = 24
    RULE_orReplace = 25
    RULE_createDatabaseStatement = 26
    RULE_dbLocation = 27
    RULE_dbProperties = 28
    RULE_dbPropertiesList = 29
    RULE_switchDatabaseStatement = 30
    RULE_dropDatabaseStatement = 31
    RULE_databaseComment = 32
    RULE_createTableStatement = 33
    RULE_truncateTableStatement = 34
    RULE_dropTableStatement = 35
    RULE_alterStatement = 36
    RULE_alterTableStatementSuffix = 37
    RULE_alterTblPartitionStatementSuffix = 38
    RULE_alterStatementPartitionKeyType = 39
    RULE_alterViewStatementSuffix = 40
    RULE_alterMaterializedViewStatementSuffix = 41
    RULE_alterDatabaseStatementSuffix = 42
    RULE_alterDatabaseSuffixProperties = 43
    RULE_alterDatabaseSuffixSetOwner = 44
    RULE_alterDatabaseSuffixSetLocation = 45
    RULE_alterStatementSuffixRename = 46
    RULE_alterStatementSuffixAddCol = 47
    RULE_alterStatementSuffixAddConstraint = 48
    RULE_alterStatementSuffixDropConstraint = 49
    RULE_alterStatementSuffixRenameCol = 50
    RULE_alterStatementSuffixUpdateStatsCol = 51
    RULE_alterStatementSuffixUpdateStats = 52
    RULE_alterStatementChangeColPosition = 53
    RULE_alterStatementSuffixAddPartitions = 54
    RULE_alterStatementSuffixAddPartitionsElement = 55
    RULE_alterStatementSuffixTouch = 56
    RULE_alterStatementSuffixArchive = 57
    RULE_alterStatementSuffixUnArchive = 58
    RULE_partitionLocation = 59
    RULE_alterStatementSuffixDropPartitions = 60
    RULE_alterStatementSuffixProperties = 61
    RULE_alterViewSuffixProperties = 62
    RULE_alterMaterializedViewSuffixRewrite = 63
    RULE_alterMaterializedViewSuffixRebuild = 64
    RULE_alterStatementSuffixSerdeProperties = 65
    RULE_alterIndexStatementSuffix = 66
    RULE_alterStatementSuffixFileFormat = 67
    RULE_alterStatementSuffixClusterbySortby = 68
    RULE_alterTblPartitionStatementSuffixSkewedLocation = 69
    RULE_skewedLocations = 70
    RULE_skewedLocationsList = 71
    RULE_skewedLocationMap = 72
    RULE_alterStatementSuffixLocation = 73
    RULE_alterStatementSuffixSkewedby = 74
    RULE_alterStatementSuffixExchangePartition = 75
    RULE_alterStatementSuffixRenamePart = 76
    RULE_alterStatementSuffixStatsPart = 77
    RULE_alterStatementSuffixMergeFiles = 78
    RULE_alterStatementSuffixBucketNum = 79
    RULE_createIndexStatement = 80
    RULE_locationPath = 81
    RULE_dropIndexStatement = 82
    RULE_tablePartitionPrefix = 83
    RULE_blocking = 84
    RULE_alterStatementSuffixCompact = 85
    RULE_alterStatementSuffixSetOwner = 86
    RULE_fileFormat = 87
    RULE_inputFileFormat = 88
    RULE_tabTypeExpr = 89
    RULE_partTypeExpr = 90
    RULE_tabPartColTypeExpr = 91
    RULE_descStatement = 92
    RULE_analyzeStatement = 93
    RULE_showStatement = 94
    RULE_lockStatement = 95
    RULE_lockDatabase = 96
    RULE_lockMode = 97
    RULE_unlockStatement = 98
    RULE_unlockDatabase = 99
    RULE_createRoleStatement = 100
    RULE_dropRoleStatement = 101
    RULE_grantPrivileges = 102
    RULE_revokePrivileges = 103
    RULE_grantRole = 104
    RULE_revokeRole = 105
    RULE_showRoleGrants = 106
    RULE_showRoles = 107
    RULE_showCurrentRole = 108
    RULE_setRole = 109
    RULE_showGrants = 110
    RULE_showRolePrincipals = 111
    RULE_privilegeIncludeColObject = 112
    RULE_privilegeObject = 113
    RULE_privObject = 114
    RULE_privObjectCols = 115
    RULE_privilegeList = 116
    RULE_privlegeDef = 117
    RULE_privilegeType = 118
    RULE_principalSpecification = 119
    RULE_principalName = 120
    RULE_withGrantOption = 121
    RULE_grantOptionFor = 122
    RULE_adminOptionFor = 123
    RULE_withAdminOption = 124
    RULE_metastoreCheck = 125
    RULE_resourceList = 126
    RULE_resource = 127
    RULE_resourceType = 128
    RULE_createFunctionStatement = 129
    RULE_dropFunctionStatement = 130
    RULE_reloadFunctionStatement = 131
    RULE_createMacroStatement = 132
    RULE_dropMacroStatement = 133
    RULE_createViewStatement = 134
    RULE_createMaterializedViewStatement = 135
    RULE_viewPartition = 136
    RULE_dropViewStatement = 137
    RULE_dropMaterializedViewStatement = 138
    RULE_showFunctionIdentifier = 139
    RULE_showStmtIdentifier = 140
    RULE_tableComment = 141
    RULE_tablePartition = 142
    RULE_tableBuckets = 143
    RULE_tableSkewed = 144
    RULE_rowFormat = 145
    RULE_recordReader = 146
    RULE_recordWriter = 147
    RULE_rowFormatSerde = 148
    RULE_rowFormatDelimited = 149
    RULE_tableRowFormat = 150
    RULE_tablePropertiesPrefixed = 151
    RULE_tableProperties = 152
    RULE_tablePropertiesList = 153
    RULE_keyValueProperty = 154
    RULE_keyProperty = 155
    RULE_tableRowFormatFieldIdentifier = 156
    RULE_tableRowFormatCollItemsIdentifier = 157
    RULE_tableRowFormatMapKeysIdentifier = 158
    RULE_tableRowFormatLinesIdentifier = 159
    RULE_tableRowNullFormat = 160
    RULE_tableFileFormat = 161
    RULE_tableLocation = 162
    RULE_columnNameTypeList = 163
    RULE_columnNameTypeOrConstraintList = 164
    RULE_columnNameColonTypeList = 165
    RULE_columnNameList = 166
    RULE_columnName = 167
    RULE_extColumnName = 168
    RULE_columnNameOrderList = 169
    RULE_columnParenthesesList = 170
    RULE_enableValidateSpecification = 171
    RULE_enableSpecification = 172
    RULE_validateSpecification = 173
    RULE_enforcedSpecification = 174
    RULE_relySpecification = 175
    RULE_createConstraint = 176
    RULE_alterConstraintWithName = 177
    RULE_pkConstraint = 178
    RULE_createForeignKey = 179
    RULE_alterForeignKeyWithName = 180
    RULE_skewedValueElement = 181
    RULE_skewedColumnValuePairList = 182
    RULE_skewedColumnValuePair = 183
    RULE_skewedColumnValues = 184
    RULE_skewedColumnValue = 185
    RULE_skewedValueLocationElement = 186
    RULE_orderSpecification = 187
    RULE_nullOrdering = 188
    RULE_columnNameOrder = 189
    RULE_columnNameCommentList = 190
    RULE_columnNameComment = 191
    RULE_columnRefOrder = 192
    RULE_columnNameType = 193
    RULE_columnNameTypeOrConstraint = 194
    RULE_tableConstraint = 195
    RULE_columnNameTypeConstraint = 196
    RULE_columnConstraint = 197
    RULE_foreignKeyConstraint = 198
    RULE_colConstraint = 199
    RULE_alterColumnConstraint = 200
    RULE_alterForeignKeyConstraint = 201
    RULE_alterColConstraint = 202
    RULE_tableConstraintPrimaryKey = 203
    RULE_constraintOptsCreate = 204
    RULE_constraintOptsAlter = 205
    RULE_columnNameColonType = 206
    RULE_colType = 207
    RULE_colTypeList = 208
    RULE_type_db_col = 209
    RULE_primitiveType = 210
    RULE_listType = 211
    RULE_structType = 212
    RULE_mapType = 213
    RULE_unionType = 214
    RULE_setOperator = 215
    RULE_queryStatementExpression = 216
    RULE_queryStatementExpressionBody = 217
    RULE_withClause = 218
    RULE_cteStatement = 219
    RULE_fromStatement = 220
    RULE_singleFromStatement = 221
    RULE_regularBody = 222
    RULE_atomSelectStatement = 223
    RULE_selectStatement = 224
    RULE_setOpSelectStatement = 225
    RULE_selectStatementWithCTE = 226
    RULE_body = 227
    RULE_insertClause = 228
    RULE_destination = 229
    RULE_limitClause = 230
    RULE_deleteStatement = 231
    RULE_columnAssignmentClause = 232
    RULE_setColumnsClause = 233
    RULE_updateStatement = 234
    RULE_sqlTransactionStatement = 235
    RULE_startTransactionStatement = 236
    RULE_transactionMode = 237
    RULE_transactionAccessMode = 238
    RULE_isolationLevel = 239
    RULE_levelOfIsolation = 240
    RULE_commitStatement = 241
    RULE_rollbackStatement = 242
    RULE_setAutoCommitStatement = 243
    RULE_abortTransactionStatement = 244
    RULE_mergeStatement = 245
    RULE_whenClauses = 246
    RULE_whenNotMatchedClause = 247
    RULE_whenMatchedAndClause = 248
    RULE_whenMatchedThenClause = 249
    RULE_updateOrDelete = 250
    RULE_killQueryStatement = 251
    RULE_selectClause = 252
    RULE_selectList = 253
    RULE_selectTrfmClause = 254
    RULE_selectItem = 255
    RULE_trfmClause = 256
    RULE_selectExpression = 257
    RULE_selectExpressionList = 258
    RULE_window_clause = 259
    RULE_window_defn = 260
    RULE_window_specification = 261
    RULE_window_frame = 262
    RULE_window_range_expression = 263
    RULE_window_value_expression = 264
    RULE_window_frame_start_boundary = 265
    RULE_window_frame_boundary = 266
    RULE_tableAllColumns = 267
    RULE_tableOrColumn = 268
    RULE_expressionList = 269
    RULE_aliasList = 270
    RULE_fromClause = 271
    RULE_fromSource = 272
    RULE_atomjoinSource = 273
    RULE_joinSource = 274
    RULE_joinSourcePart = 275
    RULE_uniqueJoinSource = 276
    RULE_uniqueJoinExpr = 277
    RULE_uniqueJoinToken = 278
    RULE_joinToken = 279
    RULE_lateralViewWithView = 280
    RULE_lateralViewWithTable = 281
    RULE_pivotView = 282
    RULE_lateralOrPivotView = 283
    RULE_tableAlias = 284
    RULE_tableBucketSample = 285
    RULE_splitSample = 286
    RULE_tableSample = 287
    RULE_tableSource = 288
    RULE_uniqueJoinTableSource = 289
    RULE_tableName = 290
    RULE_viewName = 291
    RULE_subQuerySource = 292
    RULE_partitioningSpec = 293
    RULE_partitionTableFunctionSource = 294
    RULE_partitionedTableFunction = 295
    RULE_whereClause = 296
    RULE_searchCondition = 297
    RULE_valuesClause = 298
    RULE_valuesTableConstructor = 299
    RULE_valueRowConstructor = 300
    RULE_virtualTableSource = 301
    RULE_groupByClause = 302
    RULE_groupby_expression = 303
    RULE_groupByEmpty = 304
    RULE_rollupStandard = 305
    RULE_rollupOldSyntax = 306
    RULE_groupingSetExpression = 307
    RULE_groupingSetExpressionMultiple = 308
    RULE_groupingExpressionSingle = 309
    RULE_havingClause = 310
    RULE_havingCondition = 311
    RULE_expressionsInParenthesis = 312
    RULE_expressionsNotInParenthesis = 313
    RULE_expressionPart = 314
    RULE_expressions = 315
    RULE_columnRefOrderInParenthesis = 316
    RULE_columnRefOrderNotInParenthesis = 317
    RULE_orderByClause = 318
    RULE_clusterByClause = 319
    RULE_partitionByClause = 320
    RULE_distributeByClause = 321
    RULE_sortByClause = 322
    RULE_function_ = 323
    RULE_functionArgument = 324
    RULE_functionName = 325
    RULE_functionalName = 326
    RULE_functional = 327
    RULE_castExpression = 328
    RULE_caseExpression = 329
    RULE_whenExpression = 330
    RULE_floorExpression = 331
    RULE_floorDateQualifiers = 332
    RULE_extractExpression = 333
    RULE_timeQualifiers = 334
    RULE_constant = 335
    RULE_stringLiteralSequence = 336
    RULE_charSetStringLiteral = 337
    RULE_dateLiteral = 338
    RULE_timestampLiteral = 339
    RULE_timestampLocalTZLiteral = 340
    RULE_intervalValue = 341
    RULE_intervalLiteral = 342
    RULE_intervalExpression = 343
    RULE_intervalQualifiers = 344
    RULE_atomExpression = 345
    RULE_precedenceUnaryOperator = 346
    RULE_isCondition = 347
    RULE_precedenceBitwiseXorOperator = 348
    RULE_precedenceStarOperator = 349
    RULE_precedencePlusOperator = 350
    RULE_precedenceConcatenateOperator = 351
    RULE_precedenceAmpersandOperator = 352
    RULE_precedenceBitwiseOrOperator = 353
    RULE_precedenceRegexpOperator = 354
    RULE_precedenceSimilarOperator = 355
    RULE_precedenceDistinctOperator = 356
    RULE_precedenceEqualOperator = 357
    RULE_precedenceNotOperator = 358
    RULE_precedenceAndOperator = 359
    RULE_precedenceOrOperator = 360
    RULE_expression = 361
    RULE_asExpression = 362
    RULE_multiNamedExpression = 363
    RULE_subQueryExpression = 364
    RULE_precedenceSimilarExpressionPart = 365
    RULE_precedenceSimilarExpressionAtom = 366
    RULE_precedenceSimilarExpressionIn = 367
    RULE_precedenceSimilarExpressionPartNot = 368
    RULE_booleanValue = 369
    RULE_booleanValueTok = 370
    RULE_tableOrPartition = 371
    RULE_partitionSpec = 372
    RULE_partitionVal = 373
    RULE_dropPartitionSpec = 374
    RULE_dropPartitionVal = 375
    RULE_dropPartitionOperator = 376
    RULE_sysFuncNames = 377
    RULE_descFuncNames = 378
    RULE_identifier = 379
    RULE_functionIdentifier = 380
    RULE_principalIdentifier = 381
    RULE_nonReserved = 382
    RULE_sql11ReservedKeywordsUsedAsFunctionName = 383
    RULE_nonReservedColumnName = 384

    ruleNames =  [ "statements", "statementSeparator", "empty_", "statement", 
                   "explainStatement", "explainOption", "vectorizationOnly", 
                   "vectorizatonDetail", "execStatement", "loadStatement", 
                   "replicationClause", "exportStatement", "importStatement", 
                   "replDumpStatement", "replLoadStatement", "replConfigs", 
                   "replConfigsList", "replStatusStatement", "ddlStatement", 
                   "ifExists", "restrictOrCascade", "ifNotExists", "rewriteEnabled", 
                   "rewriteDisabled", "storedAsDirs", "orReplace", "createDatabaseStatement", 
                   "dbLocation", "dbProperties", "dbPropertiesList", "switchDatabaseStatement", 
                   "dropDatabaseStatement", "databaseComment", "createTableStatement", 
                   "truncateTableStatement", "dropTableStatement", "alterStatement", 
                   "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
                   "alterStatementPartitionKeyType", "alterViewStatementSuffix", 
                   "alterMaterializedViewStatementSuffix", "alterDatabaseStatementSuffix", 
                   "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
                   "alterDatabaseSuffixSetLocation", "alterStatementSuffixRename", 
                   "alterStatementSuffixAddCol", "alterStatementSuffixAddConstraint", 
                   "alterStatementSuffixDropConstraint", "alterStatementSuffixRenameCol", 
                   "alterStatementSuffixUpdateStatsCol", "alterStatementSuffixUpdateStats", 
                   "alterStatementChangeColPosition", "alterStatementSuffixAddPartitions", 
                   "alterStatementSuffixAddPartitionsElement", "alterStatementSuffixTouch", 
                   "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
                   "partitionLocation", "alterStatementSuffixDropPartitions", 
                   "alterStatementSuffixProperties", "alterViewSuffixProperties", 
                   "alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
                   "alterStatementSuffixSerdeProperties", "alterIndexStatementSuffix", 
                   "alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
                   "alterTblPartitionStatementSuffixSkewedLocation", "skewedLocations", 
                   "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
                   "alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
                   "alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", 
                   "alterStatementSuffixMergeFiles", "alterStatementSuffixBucketNum", 
                   "createIndexStatement", "locationPath", "dropIndexStatement", 
                   "tablePartitionPrefix", "blocking", "alterStatementSuffixCompact", 
                   "alterStatementSuffixSetOwner", "fileFormat", "inputFileFormat", 
                   "tabTypeExpr", "partTypeExpr", "tabPartColTypeExpr", 
                   "descStatement", "analyzeStatement", "showStatement", 
                   "lockStatement", "lockDatabase", "lockMode", "unlockStatement", 
                   "unlockDatabase", "createRoleStatement", "dropRoleStatement", 
                   "grantPrivileges", "revokePrivileges", "grantRole", "revokeRole", 
                   "showRoleGrants", "showRoles", "showCurrentRole", "setRole", 
                   "showGrants", "showRolePrincipals", "privilegeIncludeColObject", 
                   "privilegeObject", "privObject", "privObjectCols", "privilegeList", 
                   "privlegeDef", "privilegeType", "principalSpecification", 
                   "principalName", "withGrantOption", "grantOptionFor", 
                   "adminOptionFor", "withAdminOption", "metastoreCheck", 
                   "resourceList", "resource", "resourceType", "createFunctionStatement", 
                   "dropFunctionStatement", "reloadFunctionStatement", "createMacroStatement", 
                   "dropMacroStatement", "createViewStatement", "createMaterializedViewStatement", 
                   "viewPartition", "dropViewStatement", "dropMaterializedViewStatement", 
                   "showFunctionIdentifier", "showStmtIdentifier", "tableComment", 
                   "tablePartition", "tableBuckets", "tableSkewed", "rowFormat", 
                   "recordReader", "recordWriter", "rowFormatSerde", "rowFormatDelimited", 
                   "tableRowFormat", "tablePropertiesPrefixed", "tableProperties", 
                   "tablePropertiesList", "keyValueProperty", "keyProperty", 
                   "tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
                   "tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", 
                   "tableRowNullFormat", "tableFileFormat", "tableLocation", 
                   "columnNameTypeList", "columnNameTypeOrConstraintList", 
                   "columnNameColonTypeList", "columnNameList", "columnName", 
                   "extColumnName", "columnNameOrderList", "columnParenthesesList", 
                   "enableValidateSpecification", "enableSpecification", 
                   "validateSpecification", "enforcedSpecification", "relySpecification", 
                   "createConstraint", "alterConstraintWithName", "pkConstraint", 
                   "createForeignKey", "alterForeignKeyWithName", "skewedValueElement", 
                   "skewedColumnValuePairList", "skewedColumnValuePair", 
                   "skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
                   "orderSpecification", "nullOrdering", "columnNameOrder", 
                   "columnNameCommentList", "columnNameComment", "columnRefOrder", 
                   "columnNameType", "columnNameTypeOrConstraint", "tableConstraint", 
                   "columnNameTypeConstraint", "columnConstraint", "foreignKeyConstraint", 
                   "colConstraint", "alterColumnConstraint", "alterForeignKeyConstraint", 
                   "alterColConstraint", "tableConstraintPrimaryKey", "constraintOptsCreate", 
                   "constraintOptsAlter", "columnNameColonType", "colType", 
                   "colTypeList", "type_db_col", "primitiveType", "listType", 
                   "structType", "mapType", "unionType", "setOperator", 
                   "queryStatementExpression", "queryStatementExpressionBody", 
                   "withClause", "cteStatement", "fromStatement", "singleFromStatement", 
                   "regularBody", "atomSelectStatement", "selectStatement", 
                   "setOpSelectStatement", "selectStatementWithCTE", "body", 
                   "insertClause", "destination", "limitClause", "deleteStatement", 
                   "columnAssignmentClause", "setColumnsClause", "updateStatement", 
                   "sqlTransactionStatement", "startTransactionStatement", 
                   "transactionMode", "transactionAccessMode", "isolationLevel", 
                   "levelOfIsolation", "commitStatement", "rollbackStatement", 
                   "setAutoCommitStatement", "abortTransactionStatement", 
                   "mergeStatement", "whenClauses", "whenNotMatchedClause", 
                   "whenMatchedAndClause", "whenMatchedThenClause", "updateOrDelete", 
                   "killQueryStatement", "selectClause", "selectList", "selectTrfmClause", 
                   "selectItem", "trfmClause", "selectExpression", "selectExpressionList", 
                   "window_clause", "window_defn", "window_specification", 
                   "window_frame", "window_range_expression", "window_value_expression", 
                   "window_frame_start_boundary", "window_frame_boundary", 
                   "tableAllColumns", "tableOrColumn", "expressionList", 
                   "aliasList", "fromClause", "fromSource", "atomjoinSource", 
                   "joinSource", "joinSourcePart", "uniqueJoinSource", "uniqueJoinExpr", 
                   "uniqueJoinToken", "joinToken", "lateralViewWithView", 
                   "lateralViewWithTable", "pivotView", "lateralOrPivotView", 
                   "tableAlias", "tableBucketSample", "splitSample", "tableSample", 
                   "tableSource", "uniqueJoinTableSource", "tableName", 
                   "viewName", "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
                   "partitionedTableFunction", "whereClause", "searchCondition", 
                   "valuesClause", "valuesTableConstructor", "valueRowConstructor", 
                   "virtualTableSource", "groupByClause", "groupby_expression", 
                   "groupByEmpty", "rollupStandard", "rollupOldSyntax", 
                   "groupingSetExpression", "groupingSetExpressionMultiple", 
                   "groupingExpressionSingle", "havingClause", "havingCondition", 
                   "expressionsInParenthesis", "expressionsNotInParenthesis", 
                   "expressionPart", "expressions", "columnRefOrderInParenthesis", 
                   "columnRefOrderNotInParenthesis", "orderByClause", "clusterByClause", 
                   "partitionByClause", "distributeByClause", "sortByClause", 
                   "function_", "functionArgument", "functionName", "functionalName", 
                   "functional", "castExpression", "caseExpression", "whenExpression", 
                   "floorExpression", "floorDateQualifiers", "extractExpression", 
                   "timeQualifiers", "constant", "stringLiteralSequence", 
                   "charSetStringLiteral", "dateLiteral", "timestampLiteral", 
                   "timestampLocalTZLiteral", "intervalValue", "intervalLiteral", 
                   "intervalExpression", "intervalQualifiers", "atomExpression", 
                   "precedenceUnaryOperator", "isCondition", "precedenceBitwiseXorOperator", 
                   "precedenceStarOperator", "precedencePlusOperator", "precedenceConcatenateOperator", 
                   "precedenceAmpersandOperator", "precedenceBitwiseOrOperator", 
                   "precedenceRegexpOperator", "precedenceSimilarOperator", 
                   "precedenceDistinctOperator", "precedenceEqualOperator", 
                   "precedenceNotOperator", "precedenceAndOperator", "precedenceOrOperator", 
                   "expression", "asExpression", "multiNamedExpression", 
                   "subQueryExpression", "precedenceSimilarExpressionPart", 
                   "precedenceSimilarExpressionAtom", "precedenceSimilarExpressionIn", 
                   "precedenceSimilarExpressionPartNot", "booleanValue", 
                   "booleanValueTok", "tableOrPartition", "partitionSpec", 
                   "partitionVal", "dropPartitionSpec", "dropPartitionVal", 
                   "dropPartitionOperator", "sysFuncNames", "descFuncNames", 
                   "identifier", "functionIdentifier", "principalIdentifier", 
                   "nonReserved", "sql11ReservedKeywordsUsedAsFunctionName", 
                   "nonReservedColumnName" ]

    EOF = Token.EOF
    KW_TRUE=1
    KW_FALSE=2
    KW_ALL=3
    KW_NONE=4
    KW_AND=5
    KW_OR=6
    KW_NOT=7
    KW_LIKE=8
    KW_ANY=9
    KW_IF=10
    KW_EXISTS=11
    KW_ASC=12
    KW_DESC=13
    KW_NULLS=14
    KW_LAST=15
    KW_ORDER=16
    KW_GROUP=17
    KW_BY=18
    KW_HAVING=19
    KW_WHERE=20
    KW_FROM=21
    KW_AS=22
    KW_SELECT=23
    KW_DISTINCT=24
    KW_INSERT=25
    KW_OVERWRITE=26
    KW_OUTER=27
    KW_UNIQUEJOIN=28
    KW_PRESERVE=29
    KW_JOIN=30
    KW_ANTI=31
    KW_LEFT=32
    KW_RIGHT=33
    KW_FULL=34
    KW_ON=35
    KW_PARTITION=36
    KW_PARTITIONS=37
    KW_TABLE=38
    KW_TABLES=39
    KW_COLUMNS=40
    KW_INDEX=41
    KW_INDEXES=42
    KW_REBUILD=43
    KW_FUNCTIONS=44
    KW_SHOW=45
    KW_MSCK=46
    KW_REPAIR=47
    KW_DIRECTORY=48
    KW_LOCAL=49
    KW_TRANSFORM=50
    KW_TRANSFORM_KEYS=51
    KW_TRANSFORM_VALUES=52
    KW_FILTER=53
    KW_ARRAY_SORT=54
    KW_ZIP_WITH=55
    KW_AGGREGATE=56
    KW_FORALL=57
    KW_MAP_FILTER=58
    KW_MAP_ZIP_WITH=59
    KW_USING=60
    KW_CLUSTER=61
    KW_DISTRIBUTE=62
    KW_SORT=63
    KW_UNION=64
    KW_EXCEPT=65
    KW_LOAD=66
    KW_EXPORT=67
    KW_IMPORT=68
    KW_REPLICATION=69
    KW_METADATA=70
    KW_DATA=71
    KW_INPATH=72
    KW_IS=73
    KW_NULL=74
    KW_CREATE=75
    KW_EXTERNAL=76
    KW_ALTER=77
    KW_CHANGE=78
    KW_COLUMN=79
    KW_FIRST=80
    KW_AFTER=81
    KW_DESCRIBE=82
    KW_DROP=83
    KW_RENAME=84
    KW_TO=85
    KW_COMMENT=86
    KW_BOOLEAN=87
    KW_TINYINT=88
    KW_SMALLINT=89
    KW_INT=90
    KW_BIGINT=91
    KW_FLOAT=92
    KW_DOUBLE=93
    KW_PRECISION=94
    KW_DATE=95
    KW_DATETIME=96
    KW_TIMESTAMP=97
    KW_TIMESTAMPLOCALTZ=98
    KW_TIME=99
    KW_ZONE=100
    KW_INTERVAL=101
    KW_DECIMAL=102
    KW_STRING=103
    KW_CHAR=104
    KW_VARCHAR=105
    KW_ARRAY=106
    KW_STRUCT=107
    KW_MAP=108
    KW_UNIONTYPE=109
    KW_REDUCE=110
    KW_PARTITIONED=111
    KW_CLUSTERED=112
    KW_SORTED=113
    KW_INTO=114
    KW_BUCKETS=115
    KW_ROW=116
    KW_ROWS=117
    KW_FORMAT=118
    KW_DELIMITED=119
    KW_FIELDS=120
    KW_TERMINATED=121
    KW_ESCAPED=122
    KW_COLLECTION=123
    KW_ITEMS=124
    KW_KEYS=125
    KW_KEY_TYPE=126
    KW_KILL=127
    KW_LINES=128
    KW_STORED=129
    KW_FILEFORMAT=130
    KW_INPUTFORMAT=131
    KW_OUTPUTFORMAT=132
    KW_INPUTDRIVER=133
    KW_OUTPUTDRIVER=134
    KW_ENABLE=135
    KW_DISABLE=136
    KW_LOCATION=137
    KW_TABLESAMPLE=138
    KW_BUCKET=139
    KW_OUT=140
    KW_OF=141
    KW_PERCENT=142
    KW_CAST=143
    KW_ADD=144
    KW_REPLACE=145
    KW_RLIKE=146
    KW_REGEXP=147
    KW_TEMPORARY=148
    KW_FUNCTION=149
    KW_MACRO=150
    KW_FILE=151
    KW_JAR=152
    KW_EXPLAIN=153
    KW_EXTENDED=154
    KW_FORMATTED=155
    KW_DEPENDENCY=156
    KW_LOGICAL=157
    KW_SERDE=158
    KW_WITH=159
    KW_DEFERRED=160
    KW_SERDEPROPERTIES=161
    KW_DBPROPERTIES=162
    KW_LIMIT=163
    KW_OFFSET=164
    KW_SET=165
    KW_UNSET=166
    KW_TBLPROPERTIES=167
    KW_IDXPROPERTIES=168
    KW_VALUE_TYPE=169
    KW_ELEM_TYPE=170
    KW_DEFINED=171
    KW_CASE=172
    KW_WHEN=173
    KW_THEN=174
    KW_ELSE=175
    KW_END=176
    KW_MAPJOIN=177
    KW_STREAMTABLE=178
    KW_CLUSTERSTATUS=179
    KW_UTC=180
    KW_UTCTIMESTAMP=181
    KW_LONG=182
    KW_DELETE=183
    KW_PLUS=184
    KW_MINUS=185
    KW_FETCH=186
    KW_INTERSECT=187
    KW_VIEW=188
    KW_VIEWS=189
    KW_IN=190
    KW_DATABASE=191
    KW_DATABASES=192
    KW_MATERIALIZED=193
    KW_SCHEMA=194
    KW_SCHEMAS=195
    KW_GRANT=196
    KW_REVOKE=197
    KW_SSL=198
    KW_UNDO=199
    KW_LOCK=200
    KW_LOCKS=201
    KW_UNLOCK=202
    KW_SHARED=203
    KW_EXCLUSIVE=204
    KW_PROCEDURE=205
    KW_UNSIGNED=206
    KW_WHILE=207
    KW_READ=208
    KW_READS=209
    KW_PURGE=210
    KW_RANGE=211
    KW_ANALYZE=212
    KW_BEFORE=213
    KW_BETWEEN=214
    KW_BOTH=215
    KW_BINARY=216
    KW_CROSS=217
    KW_CONTINUE=218
    KW_CURSOR=219
    KW_TRIGGER=220
    KW_RECORDREADER=221
    KW_RECORDWRITER=222
    KW_SEMI=223
    KW_LATERAL=224
    KW_PIVOT=225
    KW_TOUCH=226
    KW_ARCHIVE=227
    KW_UNARCHIVE=228
    KW_COMPUTE=229
    KW_STATISTICS=230
    KW_USE=231
    KW_OPTION=232
    KW_CONCATENATE=233
    KW_SHOW_DATABASE=234
    KW_UPDATE=235
    KW_RESTRICT=236
    KW_CASCADE=237
    KW_SKEWED=238
    KW_ROLLUP=239
    KW_CUBE=240
    KW_DIRECTORIES=241
    KW_FOR=242
    KW_WINDOW=243
    KW_UNBOUNDED=244
    KW_PRECEDING=245
    KW_FOLLOWING=246
    KW_CURRENT=247
    KW_CURRENT_DATE=248
    KW_CURRENT_TIMESTAMP=249
    KW_LESS=250
    KW_MORE=251
    KW_OVER=252
    KW_GROUPING=253
    KW_SETS=254
    KW_TRUNCATE=255
    KW_NOSCAN=256
    KW_USER=257
    KW_ROLE=258
    KW_ROLES=259
    KW_INNER=260
    KW_EXCHANGE=261
    KW_URI=262
    KW_SERVER=263
    KW_ADMIN=264
    KW_OWNER=265
    KW_PRINCIPALS=266
    KW_COMPACT=267
    KW_COMPACTIONS=268
    KW_TRANSACTIONS=269
    KW_REWRITE=270
    KW_AUTHORIZATION=271
    KW_REOPTIMIZATION=272
    KW_CONF=273
    KW_VALUES=274
    KW_RELOAD=275
    KW_YEAR=276
    KW_QUERY=277
    KW_QUARTER=278
    KW_MONTH=279
    KW_WEEK=280
    KW_DAY=281
    KW_DOW=282
    KW_HOUR=283
    KW_MINUTE=284
    KW_SECOND=285
    KW_START=286
    KW_TRANSACTION=287
    KW_COMMIT=288
    KW_ROLLBACK=289
    KW_WORK=290
    KW_ONLY=291
    KW_WRITE=292
    KW_ISOLATION=293
    KW_LEVEL=294
    KW_SNAPSHOT=295
    KW_AUTOCOMMIT=296
    KW_CACHE=297
    KW_PRIMARY=298
    KW_FOREIGN=299
    KW_REFERENCES=300
    KW_CONSTRAINT=301
    KW_ENFORCED=302
    KW_VALIDATE=303
    KW_NOVALIDATE=304
    KW_RELY=305
    KW_NORELY=306
    KW_UNIQUE=307
    KW_KEY=308
    KW_ABORT=309
    KW_EXTRACT=310
    KW_FLOOR=311
    KW_MERGE=312
    KW_MATCHED=313
    KW_REPL=314
    KW_DUMP=315
    KW_STATUS=316
    KW_VECTORIZATION=317
    KW_SUMMARY=318
    KW_OPERATOR=319
    KW_EXPRESSION=320
    KW_DETAIL=321
    KW_WAIT=322
    KW_RESOURCE=323
    KW_PLAN=324
    KW_QUERY_PARALLELISM=325
    KW_PLANS=326
    KW_ACTIVATE=327
    KW_DEFAULT=328
    KW_CHECK=329
    KW_POOL=330
    KW_MOVE=331
    KW_DO=332
    KW_ALLOC_FRACTION=333
    KW_SCHEDULING_POLICY=334
    KW_PATH=335
    KW_MAPPING=336
    KW_WORKLOAD=337
    KW_MANAGEMENT=338
    KW_ACTIVE=339
    KW_UNMANAGED=340
    KW_APPLICATION=341
    KW_SYNC=342
    DOT=343
    COLON=344
    COMMA=345
    SEMICOLON=346
    LPAREN=347
    RPAREN=348
    LSQUARE=349
    RSQUARE=350
    LCURLY=351
    RCURLY=352
    EQUAL=353
    EQUAL_NS=354
    NOTEQUAL=355
    LESSTHANOREQUALTO=356
    LESSTHAN=357
    GREATERTHANOREQUALTO=358
    GREATERTHAN=359
    DIVIDE=360
    PLUS=361
    MINUS=362
    STAR=363
    MOD=364
    DIV=365
    PROCESSTO=366
    AMPERSAND=367
    TILDE=368
    BITWISEOR=369
    CONCATENATE=370
    BITWISEXOR=371
    QUESTION=372
    DOLLAR=373
    StringLiteral=374
    CharSetLiteral=375
    IntegralLiteral=376
    NumberLiteral=377
    ByteLengthLiteral=378
    Number=379
    Identifier=380
    QuotedIdentifier=381
    CharSetName=382
    WS=383
    LINE_COMMENT=384
    MULTI_LINE_COMMENT=385
    QUERY_HINT=386
    SHOW_HINT=387
    HIDDEN_HINT=388

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HiveParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.StatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.StatementContext,i)


        def empty_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Empty_Context)
            else:
                return self.getTypedRuleContext(HiveParser.Empty_Context,i)


        def statementSeparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.StatementSeparatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.StatementSeparatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = HiveParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_FROM) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_IMPORT - 66)) | (1 << (HiveParser.KW_CREATE - 66)) | (1 << (HiveParser.KW_ALTER - 66)) | (1 << (HiveParser.KW_DESCRIBE - 66)) | (1 << (HiveParser.KW_DROP - 66)) | (1 << (HiveParser.KW_MAP - 66)) | (1 << (HiveParser.KW_REDUCE - 66)) | (1 << (HiveParser.KW_KILL - 66)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (HiveParser.KW_EXPLAIN - 153)) | (1 << (HiveParser.KW_WITH - 153)) | (1 << (HiveParser.KW_SET - 153)) | (1 << (HiveParser.KW_DELETE - 153)) | (1 << (HiveParser.KW_GRANT - 153)) | (1 << (HiveParser.KW_REVOKE - 153)) | (1 << (HiveParser.KW_LOCK - 153)) | (1 << (HiveParser.KW_UNLOCK - 153)) | (1 << (HiveParser.KW_ANALYZE - 153)))) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (HiveParser.KW_USE - 231)) | (1 << (HiveParser.KW_UPDATE - 231)) | (1 << (HiveParser.KW_TRUNCATE - 231)) | (1 << (HiveParser.KW_RELOAD - 231)) | (1 << (HiveParser.KW_START - 231)) | (1 << (HiveParser.KW_COMMIT - 231)) | (1 << (HiveParser.KW_ROLLBACK - 231)))) != 0) or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (HiveParser.KW_ABORT - 309)) | (1 << (HiveParser.KW_MERGE - 309)) | (1 << (HiveParser.KW_REPL - 309)) | (1 << (HiveParser.SEMICOLON - 309)) | (1 << (HiveParser.LPAREN - 309)))) != 0):
                self.state = 780
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_EXPLAIN, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_TRUNCATE, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.LPAREN]:
                    self.state = 770
                    self.statement()
                    self.state = 776
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 771
                            self.statementSeparator()
                            self.state = 772
                            self.statement() 
                        self.state = 778
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    pass
                elif token in [HiveParser.SEMICOLON]:
                    self.state = 779
                    self.empty_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 785
            self.match(HiveParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSeparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HiveParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_statementSeparator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementSeparator" ):
                return visitor.visitStatementSeparator(self)
            else:
                return visitor.visitChildren(self)




    def statementSeparator(self):

        localctx = HiveParser.StatementSeparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statementSeparator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(HiveParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSeparator(self):
            return self.getTypedRuleContext(HiveParser.StatementSeparatorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_empty_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_" ):
                return visitor.visitEmpty_(self)
            else:
                return visitor.visitChildren(self)




    def empty_(self):

        localctx = HiveParser.Empty_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_empty_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.statementSeparator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explainStatement(self):
            return self.getTypedRuleContext(HiveParser.ExplainStatementContext,0)


        def execStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HiveParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        try:
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_EXPLAIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.explainStatement()
                pass
            elif token in [HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_TRUNCATE, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.execStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXPLAIN(self):
            return self.getToken(HiveParser.KW_EXPLAIN, 0)

        def execStatement(self):
            return self.getTypedRuleContext(HiveParser.ExecStatementContext,0)


        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExplainOptionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_explainStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainStatement" ):
                return visitor.visitExplainStatement(self)
            else:
                return visitor.visitChildren(self)




    def explainStatement(self):

        localctx = HiveParser.ExplainStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_explainStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(HiveParser.KW_EXPLAIN)
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_EXTENDED, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_TRUNCATE, HiveParser.KW_AUTHORIZATION, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.KW_VECTORIZATION, HiveParser.LPAREN]:
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 796
                        self.explainOption() 
                    self.state = 801
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 802
                self.execStatement()
                pass
            elif token in [HiveParser.KW_REWRITE]:
                self.state = 803
                self.match(HiveParser.KW_REWRITE)
                self.state = 804
                self.queryStatementExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def KW_DEPENDENCY(self):
            return self.getToken(HiveParser.KW_DEPENDENCY, 0)

        def KW_LOGICAL(self):
            return self.getToken(HiveParser.KW_LOGICAL, 0)

        def KW_AUTHORIZATION(self):
            return self.getToken(HiveParser.KW_AUTHORIZATION, 0)

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_REOPTIMIZATION(self):
            return self.getToken(HiveParser.KW_REOPTIMIZATION, 0)

        def KW_VECTORIZATION(self):
            return self.getToken(HiveParser.KW_VECTORIZATION, 0)

        def vectorizationOnly(self):
            return self.getTypedRuleContext(HiveParser.VectorizationOnlyContext,0)


        def vectorizatonDetail(self):
            return self.getTypedRuleContext(HiveParser.VectorizatonDetailContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_explainOption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainOption" ):
                return visitor.visitExplainOption(self)
            else:
                return visitor.visitChildren(self)




    def explainOption(self):

        localctx = HiveParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_EXTENDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.match(HiveParser.KW_EXTENDED)
                pass
            elif token in [HiveParser.KW_FORMATTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.match(HiveParser.KW_FORMATTED)
                pass
            elif token in [HiveParser.KW_DEPENDENCY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.match(HiveParser.KW_DEPENDENCY)
                pass
            elif token in [HiveParser.KW_LOGICAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 810
                self.match(HiveParser.KW_LOGICAL)
                pass
            elif token in [HiveParser.KW_AUTHORIZATION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 811
                self.match(HiveParser.KW_AUTHORIZATION)
                pass
            elif token in [HiveParser.KW_ANALYZE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 812
                self.match(HiveParser.KW_ANALYZE)
                pass
            elif token in [HiveParser.KW_REOPTIMIZATION]:
                self.enterOuterAlt(localctx, 7)
                self.state = 813
                self.match(HiveParser.KW_REOPTIMIZATION)
                pass
            elif token in [HiveParser.KW_VECTORIZATION]:
                self.enterOuterAlt(localctx, 8)
                self.state = 814
                self.match(HiveParser.KW_VECTORIZATION)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ONLY:
                    self.state = 815
                    self.vectorizationOnly()


                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & ((1 << (HiveParser.KW_SUMMARY - 318)) | (1 << (HiveParser.KW_OPERATOR - 318)) | (1 << (HiveParser.KW_EXPRESSION - 318)) | (1 << (HiveParser.KW_DETAIL - 318)))) != 0):
                    self.state = 818
                    self.vectorizatonDetail()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorizationOnlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ONLY(self):
            return self.getToken(HiveParser.KW_ONLY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_vectorizationOnly

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVectorizationOnly" ):
                return visitor.visitVectorizationOnly(self)
            else:
                return visitor.visitChildren(self)




    def vectorizationOnly(self):

        localctx = HiveParser.VectorizationOnlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_vectorizationOnly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(HiveParser.KW_ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorizatonDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SUMMARY(self):
            return self.getToken(HiveParser.KW_SUMMARY, 0)

        def KW_OPERATOR(self):
            return self.getToken(HiveParser.KW_OPERATOR, 0)

        def KW_EXPRESSION(self):
            return self.getToken(HiveParser.KW_EXPRESSION, 0)

        def KW_DETAIL(self):
            return self.getToken(HiveParser.KW_DETAIL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_vectorizatonDetail

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVectorizatonDetail" ):
                return visitor.visitVectorizatonDetail(self)
            else:
                return visitor.visitChildren(self)




    def vectorizatonDetail(self):

        localctx = HiveParser.VectorizatonDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_vectorizatonDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            _la = self._input.LA(1)
            if not(((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & ((1 << (HiveParser.KW_SUMMARY - 318)) | (1 << (HiveParser.KW_OPERATOR - 318)) | (1 << (HiveParser.KW_EXPRESSION - 318)) | (1 << (HiveParser.KW_DETAIL - 318)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(HiveParser.LoadStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(HiveParser.ExportStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(HiveParser.ImportStatementContext,0)


        def replDumpStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplDumpStatementContext,0)


        def replLoadStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplLoadStatementContext,0)


        def replStatusStatement(self):
            return self.getTypedRuleContext(HiveParser.ReplStatusStatementContext,0)


        def ddlStatement(self):
            return self.getTypedRuleContext(HiveParser.DdlStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(HiveParser.DeleteStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(HiveParser.UpdateStatementContext,0)


        def sqlTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.SqlTransactionStatementContext,0)


        def mergeStatement(self):
            return self.getTypedRuleContext(HiveParser.MergeStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_execStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecStatement" ):
                return visitor.visitExecStatement(self)
            else:
                return visitor.visitChildren(self)




    def execStatement(self):

        localctx = HiveParser.ExecStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_execStatement)
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.queryStatementExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.loadStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 829
                self.exportStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 830
                self.importStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 831
                self.replDumpStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 832
                self.replLoadStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 833
                self.replStatusStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 834
                self.ddlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 835
                self.deleteStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 836
                self.updateStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 837
                self.sqlTransactionStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 838
                self.mergeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_DATA(self):
            return self.getToken(HiveParser.KW_DATA, 0)

        def KW_INPATH(self):
            return self.getToken(HiveParser.KW_INPATH, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def inputFileFormat(self):
            return self.getTypedRuleContext(HiveParser.InputFileFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_loadStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStatement" ):
                return visitor.visitLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadStatement(self):

        localctx = HiveParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(HiveParser.KW_LOAD)
            self.state = 842
            self.match(HiveParser.KW_DATA)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LOCAL:
                self.state = 843
                self.match(HiveParser.KW_LOCAL)


            self.state = 846
            self.match(HiveParser.KW_INPATH)
            self.state = 847
            self.match(HiveParser.StringLiteral)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_OVERWRITE:
                self.state = 848
                self.match(HiveParser.KW_OVERWRITE)


            self.state = 851
            self.match(HiveParser.KW_INTO)
            self.state = 852
            self.match(HiveParser.KW_TABLE)
            self.state = 853
            self.tableOrPartition()
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_INPUTFORMAT:
                self.state = 854
                self.inputFileFormat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_REPLICATION(self):
            return self.getToken(HiveParser.KW_REPLICATION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replicationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplicationClause" ):
                return visitor.visitReplicationClause(self)
            else:
                return visitor.visitChildren(self)




    def replicationClause(self):

        localctx = HiveParser.ReplicationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_replicationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(HiveParser.KW_FOR)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_METADATA:
                self.state = 858
                self.match(HiveParser.KW_METADATA)


            self.state = 861
            self.match(HiveParser.KW_REPLICATION)
            self.state = 862
            self.match(HiveParser.LPAREN)
            self.state = 863
            self.match(HiveParser.StringLiteral)
            self.state = 864
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXPORT(self):
            return self.getToken(HiveParser.KW_EXPORT, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_exportStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportStatement" ):
                return visitor.visitExportStatement(self)
            else:
                return visitor.visitChildren(self)




    def exportStatement(self):

        localctx = HiveParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_exportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(HiveParser.KW_EXPORT)
            self.state = 867
            self.match(HiveParser.KW_TABLE)
            self.state = 868
            self.tableOrPartition()
            self.state = 869
            self.match(HiveParser.KW_TO)
            self.state = 870
            self.match(HiveParser.StringLiteral)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_FOR:
                self.state = 871
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token

        def KW_IMPORT(self):
            return self.getToken(HiveParser.KW_IMPORT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def KW_EXTERNAL(self):
            return self.getToken(HiveParser.KW_EXTERNAL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_importStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportStatement" ):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)




    def importStatement(self):

        localctx = HiveParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(HiveParser.KW_IMPORT)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TABLE or _la==HiveParser.KW_EXTERNAL:
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_EXTERNAL:
                    self.state = 875
                    self.match(HiveParser.KW_EXTERNAL)


                self.state = 878
                self.match(HiveParser.KW_TABLE)
                self.state = 879
                self.tableOrPartition()


            self.state = 882
            self.match(HiveParser.KW_FROM)

            self.state = 883
            localctx.path = self.match(HiveParser.StringLiteral)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LOCATION:
                self.state = 884
                self.tableLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplDumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_DUMP(self):
            return self.getToken(HiveParser.KW_DUMP, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replDumpStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplDumpStatement" ):
                return visitor.visitReplDumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def replDumpStatement(self):

        localctx = HiveParser.ReplDumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_replDumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(HiveParser.KW_REPL)
            self.state = 888
            self.match(HiveParser.KW_DUMP)
            self.state = 889
            self.identifier()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.DOT:
                self.state = 890
                self.match(HiveParser.DOT)
                self.state = 891
                self.identifier()


            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 894
                self.match(HiveParser.KW_FROM)
                self.state = 895
                self.match(HiveParser.Number)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_TO:
                    self.state = 896
                    self.match(HiveParser.KW_TO)
                    self.state = 897
                    self.match(HiveParser.Number)


                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LIMIT:
                    self.state = 900
                    self.match(HiveParser.KW_LIMIT)
                    self.state = 901
                    self.match(HiveParser.Number)




            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 906
                self.match(HiveParser.KW_WITH)
                self.state = 907
                self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplLoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replLoadStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplLoadStatement" ):
                return visitor.visitReplLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def replLoadStatement(self):

        localctx = HiveParser.ReplLoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_replLoadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(HiveParser.KW_REPL)
            self.state = 911
            self.match(HiveParser.KW_LOAD)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.Identifier - 322)))) != 0):
                self.state = 912
                self.identifier()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.DOT:
                    self.state = 913
                    self.match(HiveParser.DOT)
                    self.state = 914
                    self.identifier()




            self.state = 919
            self.match(HiveParser.KW_FROM)
            self.state = 920
            self.match(HiveParser.StringLiteral)
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 921
                self.match(HiveParser.KW_WITH)
                self.state = 922
                self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplConfigsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def replConfigsList(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_replConfigs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplConfigs" ):
                return visitor.visitReplConfigs(self)
            else:
                return visitor.visitChildren(self)




    def replConfigs(self):

        localctx = HiveParser.ReplConfigsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_replConfigs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(HiveParser.LPAREN)
            self.state = 926
            self.replConfigsList()
            self.state = 927
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplConfigsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_replConfigsList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplConfigsList" ):
                return visitor.visitReplConfigsList(self)
            else:
                return visitor.visitChildren(self)




    def replConfigsList(self):

        localctx = HiveParser.ReplConfigsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_replConfigsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.keyValueProperty()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 930
                self.match(HiveParser.COMMA)
                self.state = 931
                self.keyValueProperty()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def replConfigs(self):
            return self.getTypedRuleContext(HiveParser.ReplConfigsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_replStatusStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplStatusStatement" ):
                return visitor.visitReplStatusStatement(self)
            else:
                return visitor.visitChildren(self)




    def replStatusStatement(self):

        localctx = HiveParser.ReplStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_replStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(HiveParser.KW_REPL)
            self.state = 938
            self.match(HiveParser.KW_STATUS)
            self.state = 939
            self.identifier()
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.DOT:
                self.state = 940
                self.match(HiveParser.DOT)
                self.state = 941
                self.identifier()


            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 944
                self.match(HiveParser.KW_WITH)
                self.state = 945
                self.replConfigs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateDatabaseStatementContext,0)


        def switchDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.SwitchDatabaseStatementContext,0)


        def dropDatabaseStatement(self):
            return self.getTypedRuleContext(HiveParser.DropDatabaseStatementContext,0)


        def createTableStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateTableStatementContext,0)


        def dropTableStatement(self):
            return self.getTypedRuleContext(HiveParser.DropTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(HiveParser.TruncateTableStatementContext,0)


        def alterStatement(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementContext,0)


        def descStatement(self):
            return self.getTypedRuleContext(HiveParser.DescStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(HiveParser.ShowStatementContext,0)


        def metastoreCheck(self):
            return self.getTypedRuleContext(HiveParser.MetastoreCheckContext,0)


        def createViewStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateViewStatementContext,0)


        def createMaterializedViewStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMaterializedViewStatementContext,0)


        def dropViewStatement(self):
            return self.getTypedRuleContext(HiveParser.DropViewStatementContext,0)


        def dropMaterializedViewStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMaterializedViewStatementContext,0)


        def createFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateFunctionStatementContext,0)


        def createMacroStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateMacroStatementContext,0)


        def dropFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.DropFunctionStatementContext,0)


        def reloadFunctionStatement(self):
            return self.getTypedRuleContext(HiveParser.ReloadFunctionStatementContext,0)


        def dropMacroStatement(self):
            return self.getTypedRuleContext(HiveParser.DropMacroStatementContext,0)


        def analyzeStatement(self):
            return self.getTypedRuleContext(HiveParser.AnalyzeStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(HiveParser.LockStatementContext,0)


        def unlockStatement(self):
            return self.getTypedRuleContext(HiveParser.UnlockStatementContext,0)


        def lockDatabase(self):
            return self.getTypedRuleContext(HiveParser.LockDatabaseContext,0)


        def unlockDatabase(self):
            return self.getTypedRuleContext(HiveParser.UnlockDatabaseContext,0)


        def createRoleStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateRoleStatementContext,0)


        def dropRoleStatement(self):
            return self.getTypedRuleContext(HiveParser.DropRoleStatementContext,0)


        def grantPrivileges(self):
            return self.getTypedRuleContext(HiveParser.GrantPrivilegesContext,0)


        def revokePrivileges(self):
            return self.getTypedRuleContext(HiveParser.RevokePrivilegesContext,0)


        def showGrants(self):
            return self.getTypedRuleContext(HiveParser.ShowGrantsContext,0)


        def showRoleGrants(self):
            return self.getTypedRuleContext(HiveParser.ShowRoleGrantsContext,0)


        def showRolePrincipals(self):
            return self.getTypedRuleContext(HiveParser.ShowRolePrincipalsContext,0)


        def showRoles(self):
            return self.getTypedRuleContext(HiveParser.ShowRolesContext,0)


        def grantRole(self):
            return self.getTypedRuleContext(HiveParser.GrantRoleContext,0)


        def revokeRole(self):
            return self.getTypedRuleContext(HiveParser.RevokeRoleContext,0)


        def setRole(self):
            return self.getTypedRuleContext(HiveParser.SetRoleContext,0)


        def showCurrentRole(self):
            return self.getTypedRuleContext(HiveParser.ShowCurrentRoleContext,0)


        def abortTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.AbortTransactionStatementContext,0)


        def killQueryStatement(self):
            return self.getTypedRuleContext(HiveParser.KillQueryStatementContext,0)


        def createIndexStatement(self):
            return self.getTypedRuleContext(HiveParser.CreateIndexStatementContext,0)


        def dropIndexStatement(self):
            return self.getTypedRuleContext(HiveParser.DropIndexStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_ddlStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdlStatement" ):
                return visitor.visitDdlStatement(self)
            else:
                return visitor.visitChildren(self)




    def ddlStatement(self):

        localctx = HiveParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ddlStatement)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.createDatabaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self.switchDatabaseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 950
                self.dropDatabaseStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 951
                self.createTableStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 952
                self.dropTableStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 953
                self.truncateTableStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 954
                self.alterStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 955
                self.descStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 956
                self.showStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 957
                self.metastoreCheck()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 958
                self.createViewStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 959
                self.createMaterializedViewStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 960
                self.dropViewStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 961
                self.dropMaterializedViewStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 962
                self.createFunctionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 963
                self.createMacroStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 964
                self.dropFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 965
                self.reloadFunctionStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 966
                self.dropMacroStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 967
                self.analyzeStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 968
                self.lockStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 969
                self.unlockStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 970
                self.lockDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 971
                self.unlockDatabase()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 972
                self.createRoleStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 973
                self.dropRoleStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 974
                self.grantPrivileges()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 975
                self.revokePrivileges()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 976
                self.showGrants()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 977
                self.showRoleGrants()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 978
                self.showRolePrincipals()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 979
                self.showRoles()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 980
                self.grantRole()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 981
                self.revokeRole()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 982
                self.setRole()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 983
                self.showCurrentRole()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 984
                self.abortTransactionStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 985
                self.killQueryStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 986
                self.createIndexStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 987
                self.dropIndexStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_ifExists

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = HiveParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(HiveParser.KW_IF)
            self.state = 991
            self.match(HiveParser.KW_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictOrCascadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RESTRICT(self):
            return self.getToken(HiveParser.KW_RESTRICT, 0)

        def KW_CASCADE(self):
            return self.getToken(HiveParser.KW_CASCADE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_restrictOrCascade

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestrictOrCascade" ):
                return visitor.visitRestrictOrCascade(self)
            else:
                return visitor.visitChildren(self)




    def restrictOrCascade(self):

        localctx = HiveParser.RestrictOrCascadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_restrictOrCascade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_RESTRICT or _la==HiveParser.KW_CASCADE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_ifNotExists

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = HiveParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(HiveParser.KW_IF)
            self.state = 996
            self.match(HiveParser.KW_NOT)
            self.state = 997
            self.match(HiveParser.KW_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteEnabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rewriteEnabled

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRewriteEnabled" ):
                return visitor.visitRewriteEnabled(self)
            else:
                return visitor.visitChildren(self)




    def rewriteEnabled(self):

        localctx = HiveParser.RewriteEnabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rewriteEnabled)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(HiveParser.KW_ENABLE)
            self.state = 1000
            self.match(HiveParser.KW_REWRITE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rewriteDisabled

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRewriteDisabled" ):
                return visitor.visitRewriteDisabled(self)
            else:
                return visitor.visitChildren(self)




    def rewriteDisabled(self):

        localctx = HiveParser.RewriteDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rewriteDisabled)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(HiveParser.KW_DISABLE)
            self.state = 1003
            self.match(HiveParser.KW_REWRITE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StoredAsDirsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_DIRECTORIES(self):
            return self.getToken(HiveParser.KW_DIRECTORIES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_storedAsDirs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStoredAsDirs" ):
                return visitor.visitStoredAsDirs(self)
            else:
                return visitor.visitChildren(self)




    def storedAsDirs(self):

        localctx = HiveParser.StoredAsDirsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_storedAsDirs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(HiveParser.KW_STORED)
            self.state = 1006
            self.match(HiveParser.KW_AS)
            self.state = 1007
            self.match(HiveParser.KW_DIRECTORIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orReplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrReplace" ):
                return visitor.visitOrReplace(self)
            else:
                return visitor.visitChildren(self)




    def orReplace(self):

        localctx = HiveParser.OrReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_orReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(HiveParser.KW_OR)
            self.state = 1010
            self.match(HiveParser.KW_REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def databaseComment(self):
            return self.getTypedRuleContext(HiveParser.DatabaseCommentContext,0)


        def dbLocation(self):
            return self.getTypedRuleContext(HiveParser.DbLocationContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def dbProperties(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createDatabaseStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabaseStatement" ):
                return visitor.visitCreateDatabaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def createDatabaseStatement(self):

        localctx = HiveParser.CreateDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_createDatabaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(HiveParser.KW_CREATE)
            self.state = 1013
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 1014
                self.ifNotExists()


            self.state = 1017
            self.identifier()
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 1018
                self.databaseComment()


            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LOCATION:
                self.state = 1021
                self.dbLocation()


            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.match(HiveParser.KW_WITH)
                self.state = 1025
                self.match(HiveParser.KW_DBPROPERTIES)
                self.state = 1026
                self.dbProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbLocation" ):
                return visitor.visitDbLocation(self)
            else:
                return visitor.visitChildren(self)




    def dbLocation(self):

        localctx = HiveParser.DbLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dbLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(HiveParser.KW_LOCATION)
            self.state = 1030
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def dbPropertiesList(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dbProperties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbProperties" ):
                return visitor.visitDbProperties(self)
            else:
                return visitor.visitChildren(self)




    def dbProperties(self):

        localctx = HiveParser.DbPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dbProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(HiveParser.LPAREN)
            self.state = 1033
            self.dbPropertiesList()
            self.state = 1034
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbPropertiesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_dbPropertiesList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbPropertiesList" ):
                return visitor.visitDbPropertiesList(self)
            else:
                return visitor.visitChildren(self)




    def dbPropertiesList(self):

        localctx = HiveParser.DbPropertiesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dbPropertiesList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.keyValueProperty()
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 1037
                self.match(HiveParser.COMMA)
                self.state = 1038
                self.keyValueProperty()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USE(self):
            return self.getToken(HiveParser.KW_USE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_switchDatabaseStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchDatabaseStatement" ):
                return visitor.visitSwitchDatabaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchDatabaseStatement(self):

        localctx = HiveParser.SwitchDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_switchDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(HiveParser.KW_USE)
            self.state = 1045
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropDatabaseStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabaseStatement" ):
                return visitor.visitDropDatabaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabaseStatement(self):

        localctx = HiveParser.DropDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dropDatabaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(HiveParser.KW_DROP)
            self.state = 1048
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 1049
                self.ifExists()


            self.state = 1052
            self.identifier()
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RESTRICT or _la==HiveParser.KW_CASCADE:
                self.state = 1053
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_databaseComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseComment" ):
                return visitor.visitDatabaseComment(self)
            else:
                return visitor.visitChildren(self)




    def databaseComment(self):

        localctx = HiveParser.DatabaseCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_databaseComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(HiveParser.KW_COMMENT)
            self.state = 1057
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TableNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.TableNameContext,i)


        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_EXTERNAL(self):
            return self.getToken(HiveParser.KW_EXTERNAL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeOrConstraintList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeOrConstraintListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tablePartition(self):
            return self.getTypedRuleContext(HiveParser.TablePartitionContext,0)


        def tableBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableBucketsContext,0)


        def tableSkewed(self):
            return self.getTypedRuleContext(HiveParser.TableSkewedContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createTableStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableStatement" ):
                return visitor.visitCreateTableStatement(self)
            else:
                return visitor.visitChildren(self)




    def createTableStatement(self):

        localctx = HiveParser.CreateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(HiveParser.KW_CREATE)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TEMPORARY:
                self.state = 1060
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_EXTERNAL:
                self.state = 1063
                self.match(HiveParser.KW_EXTERNAL)


            self.state = 1066
            self.match(HiveParser.KW_TABLE)
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 1067
                self.ifNotExists()


            self.state = 1070
            self.tableName()
            self.state = 1119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_LIKE]:
                self.state = 1071
                self.match(HiveParser.KW_LIKE)
                self.state = 1072
                self.tableName()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ROW:
                    self.state = 1073
                    self.tableRowFormat()


                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_STORED:
                    self.state = 1076
                    self.tableFileFormat()


                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LOCATION:
                    self.state = 1079
                    self.tableLocation()


                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_TBLPROPERTIES:
                    self.state = 1082
                    self.tablePropertiesPrefixed()


                pass
            elif token in [HiveParser.EOF, HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_AS, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_COMMENT, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_ROW, HiveParser.KW_KILL, HiveParser.KW_STORED, HiveParser.KW_LOCATION, HiveParser.KW_EXPLAIN, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_SKEWED, HiveParser.KW_TRUNCATE, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.SEMICOLON, HiveParser.LPAREN]:
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 1085
                    self.match(HiveParser.LPAREN)
                    self.state = 1086
                    self.columnNameTypeOrConstraintList()
                    self.state = 1087
                    self.match(HiveParser.RPAREN)


                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_COMMENT:
                    self.state = 1091
                    self.tableComment()


                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITIONED:
                    self.state = 1094
                    self.tablePartition()


                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_CLUSTERED:
                    self.state = 1097
                    self.tableBuckets()


                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_SKEWED:
                    self.state = 1100
                    self.tableSkewed()


                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ROW:
                    self.state = 1103
                    self.tableRowFormat()


                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_STORED:
                    self.state = 1106
                    self.tableFileFormat()


                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LOCATION:
                    self.state = 1109
                    self.tableLocation()


                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_TBLPROPERTIES:
                    self.state = 1112
                    self.tablePropertiesPrefixed()


                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_AS:
                    self.state = 1115
                    self.match(HiveParser.KW_AS)
                    self.state = 1116
                    self.selectStatementWithCTE()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUNCATE(self):
            return self.getToken(HiveParser.KW_TRUNCATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tablePartitionPrefix(self):
            return self.getTypedRuleContext(HiveParser.TablePartitionPrefixContext,0)


        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_truncateTableStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTableStatement" ):
                return visitor.visitTruncateTableStatement(self)
            else:
                return visitor.visitChildren(self)




    def truncateTableStatement(self):

        localctx = HiveParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_truncateTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(HiveParser.KW_TRUNCATE)
            self.state = 1122
            self.match(HiveParser.KW_TABLE)
            self.state = 1123
            self.tablePartitionPrefix()
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COLUMNS:
                self.state = 1124
                self.match(HiveParser.KW_COLUMNS)
                self.state = 1125
                self.match(HiveParser.LPAREN)
                self.state = 1126
                self.columnNameList()
                self.state = 1127
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropTableStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableStatement" ):
                return visitor.visitDropTableStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropTableStatement(self):

        localctx = HiveParser.DropTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dropTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(HiveParser.KW_DROP)
            self.state = 1132
            self.match(HiveParser.KW_TABLE)
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 1133
                self.ifExists()


            self.state = 1136
            self.tableName()
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PURGE:
                self.state = 1137
                self.match(HiveParser.KW_PURGE)


            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_FOR:
                self.state = 1140
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def alterTableStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterTableStatementSuffixContext,0)


        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def alterViewStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterViewStatementSuffixContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def alterMaterializedViewStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewStatementSuffixContext,0)


        def alterDatabaseStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseStatementSuffixContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def alterIndexStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterIndexStatementSuffixContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatement" ):
                return visitor.visitAlterStatement(self)
            else:
                return visitor.visitChildren(self)




    def alterStatement(self):

        localctx = HiveParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.match(HiveParser.KW_ALTER)
                self.state = 1144
                self.match(HiveParser.KW_TABLE)
                self.state = 1145
                self.tableName()
                self.state = 1146
                self.alterTableStatementSuffix()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.match(HiveParser.KW_ALTER)
                self.state = 1149
                self.match(HiveParser.KW_VIEW)
                self.state = 1150
                self.tableName()
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_AS:
                    self.state = 1151
                    self.match(HiveParser.KW_AS)


                self.state = 1154
                self.alterViewStatementSuffix()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1156
                self.match(HiveParser.KW_ALTER)
                self.state = 1157
                self.match(HiveParser.KW_MATERIALIZED)
                self.state = 1158
                self.match(HiveParser.KW_VIEW)
                self.state = 1159
                self.tableName()
                self.state = 1160
                self.alterMaterializedViewStatementSuffix()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1162
                self.match(HiveParser.KW_ALTER)
                self.state = 1163
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1164
                self.alterDatabaseStatementSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1165
                self.match(HiveParser.KW_ALTER)
                self.state = 1166
                self.match(HiveParser.KW_INDEX)
                self.state = 1167
                self.alterIndexStatementSuffix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatementSuffixRename(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameContext,0)


        def alterStatementSuffixDropPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropPartitionsContext,0)


        def alterStatementSuffixAddPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsContext,0)


        def alterStatementSuffixTouch(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixTouchContext,0)


        def alterStatementSuffixArchive(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixArchiveContext,0)


        def alterStatementSuffixUnArchive(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUnArchiveContext,0)


        def alterStatementSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixPropertiesContext,0)


        def alterStatementSuffixSkewedby(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSkewedbyContext,0)


        def alterStatementSuffixExchangePartition(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixExchangePartitionContext,0)


        def alterStatementPartitionKeyType(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementPartitionKeyTypeContext,0)


        def alterStatementSuffixDropConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropConstraintContext,0)


        def alterStatementSuffixAddConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddConstraintContext,0)


        def alterTblPartitionStatementSuffix(self):
            return self.getTypedRuleContext(HiveParser.AlterTblPartitionStatementSuffixContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def alterStatementSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSetOwnerContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTableStatementSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableStatementSuffix" ):
                return visitor.visitAlterTableStatementSuffix(self)
            else:
                return visitor.visitChildren(self)




    def alterTableStatementSuffix(self):

        localctx = HiveParser.AlterTableStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_alterTableStatementSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                self.alterStatementSuffixRename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.alterStatementSuffixDropPartitions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1172
                self.alterStatementSuffixAddPartitions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1173
                self.alterStatementSuffixTouch()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1174
                self.alterStatementSuffixArchive()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1175
                self.alterStatementSuffixUnArchive()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1176
                self.alterStatementSuffixProperties()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1177
                self.alterStatementSuffixSkewedby()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1178
                self.alterStatementSuffixExchangePartition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1179
                self.alterStatementPartitionKeyType()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1180
                self.alterStatementSuffixDropConstraint()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1181
                self.alterStatementSuffixAddConstraint()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITION:
                    self.state = 1182
                    self.partitionSpec()


                self.state = 1185
                self.alterTblPartitionStatementSuffix()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1186
                self.alterStatementSuffixSetOwner()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTblPartitionStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatementSuffixFileFormat(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixFileFormatContext,0)


        def alterStatementSuffixLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixLocationContext,0)


        def alterStatementSuffixMergeFiles(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixMergeFilesContext,0)


        def alterStatementSuffixSerdeProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixSerdePropertiesContext,0)


        def alterStatementSuffixRenamePart(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenamePartContext,0)


        def alterStatementSuffixBucketNum(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixBucketNumContext,0)


        def alterTblPartitionStatementSuffixSkewedLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext,0)


        def alterStatementSuffixClusterbySortby(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixClusterbySortbyContext,0)


        def alterStatementSuffixCompact(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixCompactContext,0)


        def alterStatementSuffixUpdateStatsCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateStatsColContext,0)


        def alterStatementSuffixUpdateStats(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixUpdateStatsContext,0)


        def alterStatementSuffixRenameCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameColContext,0)


        def alterStatementSuffixAddCol(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddColContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTblPartitionStatementSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTblPartitionStatementSuffix" ):
                return visitor.visitAlterTblPartitionStatementSuffix(self)
            else:
                return visitor.visitChildren(self)




    def alterTblPartitionStatementSuffix(self):

        localctx = HiveParser.AlterTblPartitionStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_alterTblPartitionStatementSuffix)
        try:
            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self.alterStatementSuffixFileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1190
                self.alterStatementSuffixLocation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1191
                self.alterStatementSuffixMergeFiles()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1192
                self.alterStatementSuffixSerdeProperties()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1193
                self.alterStatementSuffixRenamePart()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1194
                self.alterStatementSuffixBucketNum()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1195
                self.alterTblPartitionStatementSuffixSkewedLocation()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1196
                self.alterStatementSuffixClusterbySortby()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1197
                self.alterStatementSuffixCompact()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1198
                self.alterStatementSuffixUpdateStatsCol()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1199
                self.alterStatementSuffixUpdateStats()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1200
                self.alterStatementSuffixRenameCol()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1201
                self.alterStatementSuffixAddCol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementPartitionKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameType(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementPartitionKeyType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementPartitionKeyType" ):
                return visitor.visitAlterStatementPartitionKeyType(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementPartitionKeyType(self):

        localctx = HiveParser.AlterStatementPartitionKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_alterStatementPartitionKeyType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(HiveParser.KW_PARTITION)
            self.state = 1205
            self.match(HiveParser.KW_COLUMN)
            self.state = 1206
            self.match(HiveParser.LPAREN)
            self.state = 1207
            self.columnNameType()
            self.state = 1208
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterViewSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterViewSuffixPropertiesContext,0)


        def alterStatementSuffixRename(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixRenameContext,0)


        def alterStatementSuffixAddPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsContext,0)


        def alterStatementSuffixDropPartitions(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementSuffixDropPartitionsContext,0)


        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterViewStatementSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewStatementSuffix" ):
                return visitor.visitAlterViewStatementSuffix(self)
            else:
                return visitor.visitChildren(self)




    def alterViewStatementSuffix(self):

        localctx = HiveParser.AlterViewStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alterViewStatementSuffix)
        try:
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_SET, HiveParser.KW_UNSET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.alterViewSuffixProperties()
                pass
            elif token in [HiveParser.KW_RENAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.alterStatementSuffixRename()
                pass
            elif token in [HiveParser.KW_ADD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.alterStatementSuffixAddPartitions()
                pass
            elif token in [HiveParser.KW_DROP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.alterStatementSuffixDropPartitions()
                pass
            elif token in [HiveParser.KW_SELECT, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_WITH, HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1214
                self.selectStatementWithCTE()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterMaterializedViewSuffixRewrite(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewSuffixRewriteContext,0)


        def alterMaterializedViewSuffixRebuild(self):
            return self.getTypedRuleContext(HiveParser.AlterMaterializedViewSuffixRebuildContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewStatementSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterMaterializedViewStatementSuffix" ):
                return visitor.visitAlterMaterializedViewStatementSuffix(self)
            else:
                return visitor.visitChildren(self)




    def alterMaterializedViewStatementSuffix(self):

        localctx = HiveParser.AlterMaterializedViewStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_alterMaterializedViewStatementSuffix)
        try:
            self.state = 1219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ENABLE, HiveParser.KW_DISABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1217
                self.alterMaterializedViewSuffixRewrite()
                pass
            elif token in [HiveParser.KW_REBUILD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1218
                self.alterMaterializedViewSuffixRebuild()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterDatabaseSuffixProperties(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixPropertiesContext,0)


        def alterDatabaseSuffixSetOwner(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixSetOwnerContext,0)


        def alterDatabaseSuffixSetLocation(self):
            return self.getTypedRuleContext(HiveParser.AlterDatabaseSuffixSetLocationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseStatementSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterDatabaseStatementSuffix" ):
                return visitor.visitAlterDatabaseStatementSuffix(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseStatementSuffix(self):

        localctx = HiveParser.AlterDatabaseStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_alterDatabaseStatementSuffix)
        try:
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.alterDatabaseSuffixProperties()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1222
                self.alterDatabaseSuffixSetOwner()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1223
                self.alterDatabaseSuffixSetLocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def dbProperties(self):
            return self.getTypedRuleContext(HiveParser.DbPropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixProperties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterDatabaseSuffixProperties" ):
                return visitor.visitAlterDatabaseSuffixProperties(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseSuffixProperties(self):

        localctx = HiveParser.AlterDatabaseSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alterDatabaseSuffixProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.identifier()
            self.state = 1227
            self.match(HiveParser.KW_SET)
            self.state = 1228
            self.match(HiveParser.KW_DBPROPERTIES)
            self.state = 1229
            self.dbProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetOwner

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterDatabaseSuffixSetOwner" ):
                return visitor.visitAlterDatabaseSuffixSetOwner(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseSuffixSetOwner(self):

        localctx = HiveParser.AlterDatabaseSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alterDatabaseSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.identifier()
            self.state = 1232
            self.match(HiveParser.KW_SET)
            self.state = 1233
            self.match(HiveParser.KW_OWNER)
            self.state = 1234
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseSuffixSetLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterDatabaseSuffixSetLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterDatabaseSuffixSetLocation" ):
                return visitor.visitAlterDatabaseSuffixSetLocation(self)
            else:
                return visitor.visitChildren(self)




    def alterDatabaseSuffixSetLocation(self):

        localctx = HiveParser.AlterDatabaseSuffixSetLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_alterDatabaseSuffixSetLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.identifier()
            self.state = 1237
            self.match(HiveParser.KW_SET)
            self.state = 1238
            self.match(HiveParser.KW_LOCATION)
            self.state = 1239
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRename

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixRename" ):
                return visitor.visitAlterStatementSuffixRename(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixRename(self):

        localctx = HiveParser.AlterStatementSuffixRenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alterStatementSuffixRename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(HiveParser.KW_RENAME)
            self.state = 1242
            self.match(HiveParser.KW_TO)
            self.state = 1243
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddCol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixAddCol" ):
                return visitor.visitAlterStatementSuffixAddCol(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixAddCol(self):

        localctx = HiveParser.AlterStatementSuffixAddColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alterStatementSuffixAddCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_ADD or _la==HiveParser.KW_REPLACE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1246
            self.match(HiveParser.KW_COLUMNS)
            self.state = 1247
            self.match(HiveParser.LPAREN)
            self.state = 1248
            self.columnNameTypeList()
            self.state = 1249
            self.match(HiveParser.RPAREN)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RESTRICT or _la==HiveParser.KW_CASCADE:
                self.state = 1250
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def alterForeignKeyWithName(self):
            return self.getTypedRuleContext(HiveParser.AlterForeignKeyWithNameContext,0)


        def alterConstraintWithName(self):
            return self.getTypedRuleContext(HiveParser.AlterConstraintWithNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixAddConstraint" ):
                return visitor.visitAlterStatementSuffixAddConstraint(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixAddConstraint(self):

        localctx = HiveParser.AlterStatementSuffixAddConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_alterStatementSuffixAddConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(HiveParser.KW_ADD)
            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 1254
                self.alterForeignKeyWithName()
                pass

            elif la_ == 2:
                self.state = 1255
                self.alterConstraintWithName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixDropConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixDropConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixDropConstraint" ):
                return visitor.visitAlterStatementSuffixDropConstraint(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixDropConstraint(self):

        localctx = HiveParser.AlterStatementSuffixDropConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_alterStatementSuffixDropConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(HiveParser.KW_DROP)
            self.state = 1259
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 1260
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenameColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CHANGE(self):
            return self.getToken(HiveParser.KW_CHANGE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def alterColumnConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterColumnConstraintContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def alterStatementChangeColPosition(self):
            return self.getTypedRuleContext(HiveParser.AlterStatementChangeColPositionContext,0)


        def restrictOrCascade(self):
            return self.getTypedRuleContext(HiveParser.RestrictOrCascadeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRenameCol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixRenameCol" ):
                return visitor.visitAlterStatementSuffixRenameCol(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixRenameCol(self):

        localctx = HiveParser.AlterStatementSuffixRenameColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alterStatementSuffixRenameCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(HiveParser.KW_CHANGE)
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COLUMN:
                self.state = 1263
                self.match(HiveParser.KW_COLUMN)


            self.state = 1266
            self.identifier()
            self.state = 1267
            self.identifier()
            self.state = 1268
            self.colType()
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (HiveParser.KW_PRIMARY - 298)) | (1 << (HiveParser.KW_REFERENCES - 298)) | (1 << (HiveParser.KW_CONSTRAINT - 298)))) != 0):
                self.state = 1269
                self.alterColumnConstraint()


            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 1272
                self.match(HiveParser.KW_COMMENT)
                self.state = 1273
                self.match(HiveParser.StringLiteral)


            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_FIRST or _la==HiveParser.KW_AFTER:
                self.state = 1276
                self.alterStatementChangeColPosition()


            self.state = 1280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RESTRICT or _la==HiveParser.KW_CASCADE:
                self.state = 1279
                self.restrictOrCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateStatsColContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateStatsCol

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixUpdateStatsCol" ):
                return visitor.visitAlterStatementSuffixUpdateStatsCol(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixUpdateStatsCol(self):

        localctx = HiveParser.AlterStatementSuffixUpdateStatsColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alterStatementSuffixUpdateStatsCol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(HiveParser.KW_UPDATE)
            self.state = 1283
            self.match(HiveParser.KW_STATISTICS)
            self.state = 1284
            self.match(HiveParser.KW_FOR)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COLUMN:
                self.state = 1285
                self.match(HiveParser.KW_COLUMN)


            self.state = 1288
            self.identifier()
            self.state = 1289
            self.match(HiveParser.KW_SET)
            self.state = 1290
            self.tableProperties()
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 1291
                self.match(HiveParser.KW_COMMENT)
                self.state = 1292
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUpdateStatsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUpdateStats

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixUpdateStats" ):
                return visitor.visitAlterStatementSuffixUpdateStats(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixUpdateStats(self):

        localctx = HiveParser.AlterStatementSuffixUpdateStatsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_alterStatementSuffixUpdateStats)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(HiveParser.KW_UPDATE)
            self.state = 1296
            self.match(HiveParser.KW_STATISTICS)
            self.state = 1297
            self.match(HiveParser.KW_SET)
            self.state = 1298
            self.tableProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementChangeColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_AFTER(self):
            return self.getToken(HiveParser.KW_AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementChangeColPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementChangeColPosition" ):
                return visitor.visitAlterStatementChangeColPosition(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementChangeColPosition(self):

        localctx = HiveParser.AlterStatementChangeColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_alterStatementChangeColPosition)
        try:
            self.state = 1303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1300
                localctx.first = self.match(HiveParser.KW_FIRST)
                pass
            elif token in [HiveParser.KW_AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1301
                self.match(HiveParser.KW_AFTER)
                self.state = 1302
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def alterStatementSuffixAddPartitionsElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AlterStatementSuffixAddPartitionsElementContext)
            else:
                return self.getTypedRuleContext(HiveParser.AlterStatementSuffixAddPartitionsElementContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddPartitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixAddPartitions" ):
                return visitor.visitAlterStatementSuffixAddPartitions(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixAddPartitions(self):

        localctx = HiveParser.AlterStatementSuffixAddPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alterStatementSuffixAddPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(HiveParser.KW_ADD)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 1306
                self.ifNotExists()


            self.state = 1310 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1309
                self.alterStatementSuffixAddPartitionsElement()
                self.state = 1312 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==HiveParser.KW_PARTITION):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixAddPartitionsElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def partitionLocation(self):
            return self.getTypedRuleContext(HiveParser.PartitionLocationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixAddPartitionsElement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixAddPartitionsElement" ):
                return visitor.visitAlterStatementSuffixAddPartitionsElement(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixAddPartitionsElement(self):

        localctx = HiveParser.AlterStatementSuffixAddPartitionsElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_alterStatementSuffixAddPartitionsElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.partitionSpec()
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LOCATION:
                self.state = 1315
                self.partitionLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixTouchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TOUCH(self):
            return self.getToken(HiveParser.KW_TOUCH, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixTouch

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixTouch" ):
                return visitor.visitAlterStatementSuffixTouch(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixTouch(self):

        localctx = HiveParser.AlterStatementSuffixTouchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alterStatementSuffixTouch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(HiveParser.KW_TOUCH)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.KW_PARTITION:
                self.state = 1319
                self.partitionSpec()
                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixArchiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixArchive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixArchive" ):
                return visitor.visitAlterStatementSuffixArchive(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixArchive(self):

        localctx = HiveParser.AlterStatementSuffixArchiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterStatementSuffixArchive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(HiveParser.KW_ARCHIVE)
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.KW_PARTITION:
                self.state = 1326
                self.partitionSpec()
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixUnArchiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNARCHIVE(self):
            return self.getToken(HiveParser.KW_UNARCHIVE, 0)

        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionSpecContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixUnArchive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixUnArchive" ):
                return visitor.visitAlterStatementSuffixUnArchive(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixUnArchive(self):

        localctx = HiveParser.AlterStatementSuffixUnArchiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alterStatementSuffixUnArchive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(HiveParser.KW_UNARCHIVE)
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.KW_PARTITION:
                self.state = 1333
                self.partitionSpec()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionLocation" ):
                return visitor.visitPartitionLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionLocation(self):

        localctx = HiveParser.PartitionLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_partitionLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(HiveParser.KW_LOCATION)
            self.state = 1340
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixDropPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def dropPartitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.DropPartitionSpecContext)
            else:
                return self.getTypedRuleContext(HiveParser.DropPartitionSpecContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def replicationClause(self):
            return self.getTypedRuleContext(HiveParser.ReplicationClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixDropPartitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixDropPartitions" ):
                return visitor.visitAlterStatementSuffixDropPartitions(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixDropPartitions(self):

        localctx = HiveParser.AlterStatementSuffixDropPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterStatementSuffixDropPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(HiveParser.KW_DROP)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 1343
                self.ifExists()


            self.state = 1346
            self.dropPartitionSpec()
            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 1347
                self.match(HiveParser.COMMA)
                self.state = 1348
                self.dropPartitionSpec()
                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PURGE:
                self.state = 1354
                self.match(HiveParser.KW_PURGE)


            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_FOR:
                self.state = 1357
                self.replicationClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixProperties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixProperties" ):
                return visitor.visitAlterStatementSuffixProperties(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixProperties(self):

        localctx = HiveParser.AlterStatementSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterStatementSuffixProperties)
        self._la = 0 # Token type
        try:
            self.state = 1369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1360
                self.match(HiveParser.KW_SET)
                self.state = 1361
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1362
                self.tableProperties()
                pass
            elif token in [HiveParser.KW_UNSET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1363
                self.match(HiveParser.KW_UNSET)
                self.state = 1364
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_IF:
                    self.state = 1365
                    self.ifExists()


                self.state = 1368
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewSuffixPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterViewSuffixProperties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewSuffixProperties" ):
                return visitor.visitAlterViewSuffixProperties(self)
            else:
                return visitor.visitChildren(self)




    def alterViewSuffixProperties(self):

        localctx = HiveParser.AlterViewSuffixPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterViewSuffixProperties)
        self._la = 0 # Token type
        try:
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.match(HiveParser.KW_SET)
                self.state = 1372
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1373
                self.tableProperties()
                pass
            elif token in [HiveParser.KW_UNSET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.match(HiveParser.KW_UNSET)
                self.state = 1375
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_IF:
                    self.state = 1376
                    self.ifExists()


                self.state = 1379
                self.tableProperties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewSuffixRewriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rewriteEnabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteEnabledContext,0)


        def rewriteDisabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteDisabledContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewSuffixRewrite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterMaterializedViewSuffixRewrite" ):
                return visitor.visitAlterMaterializedViewSuffixRewrite(self)
            else:
                return visitor.visitChildren(self)




    def alterMaterializedViewSuffixRewrite(self):

        localctx = HiveParser.AlterMaterializedViewSuffixRewriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterMaterializedViewSuffixRewrite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ENABLE]:
                self.state = 1382
                self.rewriteEnabled()
                pass
            elif token in [HiveParser.KW_DISABLE]:
                self.state = 1383
                self.rewriteDisabled()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterMaterializedViewSuffixRebuildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterMaterializedViewSuffixRebuild

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterMaterializedViewSuffixRebuild" ):
                return visitor.visitAlterMaterializedViewSuffixRebuild(self)
            else:
                return visitor.visitChildren(self)




    def alterMaterializedViewSuffixRebuild(self):

        localctx = HiveParser.AlterMaterializedViewSuffixRebuildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterMaterializedViewSuffixRebuild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(HiveParser.KW_REBUILD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSerdePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSerdeProperties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixSerdeProperties" ):
                return visitor.visitAlterStatementSuffixSerdeProperties(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixSerdeProperties(self):

        localctx = HiveParser.AlterStatementSuffixSerdePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterStatementSuffixSerdeProperties)
        try:
            self.state = 1399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1388
                self.match(HiveParser.KW_SET)
                self.state = 1389
                self.match(HiveParser.KW_SERDE)
                self.state = 1390
                self.match(HiveParser.StringLiteral)
                self.state = 1394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.match(HiveParser.KW_WITH)
                    self.state = 1392
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 1393
                    self.tableProperties()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1396
                self.match(HiveParser.KW_SET)
                self.state = 1397
                self.match(HiveParser.KW_SERDEPROPERTIES)
                self.state = 1398
                self.tableProperties()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterIndexStatementSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterIndexStatementSuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterIndexStatementSuffix" ):
                return visitor.visitAlterIndexStatementSuffix(self)
            else:
                return visitor.visitChildren(self)




    def alterIndexStatementSuffix(self):

        localctx = HiveParser.AlterIndexStatementSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterIndexStatementSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.identifier()
            self.state = 1402
            self.match(HiveParser.KW_ON)
            self.state = 1403
            self.tableName()
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 1404
                self.partitionSpec()


            self.state = 1407
            self.match(HiveParser.KW_REBUILD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_FILEFORMAT(self):
            return self.getToken(HiveParser.KW_FILEFORMAT, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(HiveParser.FileFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixFileFormat" ):
                return visitor.visitAlterStatementSuffixFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixFileFormat(self):

        localctx = HiveParser.AlterStatementSuffixFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterStatementSuffixFileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(HiveParser.KW_SET)
            self.state = 1410
            self.match(HiveParser.KW_FILEFORMAT)
            self.state = 1411
            self.fileFormat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixClusterbySortbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def tableBuckets(self):
            return self.getTypedRuleContext(HiveParser.TableBucketsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixClusterbySortby

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixClusterbySortby" ):
                return visitor.visitAlterStatementSuffixClusterbySortby(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixClusterbySortby(self):

        localctx = HiveParser.AlterStatementSuffixClusterbySortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterStatementSuffixClusterbySortby)
        try:
            self.state = 1418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1413
                self.match(HiveParser.KW_NOT)
                self.state = 1414
                self.match(HiveParser.KW_CLUSTERED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.match(HiveParser.KW_NOT)
                self.state = 1416
                self.match(HiveParser.KW_SORTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.tableBuckets()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTblPartitionStatementSuffixSkewedLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def skewedLocations(self):
            return self.getTypedRuleContext(HiveParser.SkewedLocationsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTblPartitionStatementSuffixSkewedLocation" ):
                return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(self)
            else:
                return visitor.visitChildren(self)




    def alterTblPartitionStatementSuffixSkewedLocation(self):

        localctx = HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alterTblPartitionStatementSuffixSkewedLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(HiveParser.KW_SET)
            self.state = 1421
            self.match(HiveParser.KW_SKEWED)
            self.state = 1422
            self.match(HiveParser.KW_LOCATION)
            self.state = 1423
            self.skewedLocations()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def skewedLocationsList(self):
            return self.getTypedRuleContext(HiveParser.SkewedLocationsListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocations

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedLocations" ):
                return visitor.visitSkewedLocations(self)
            else:
                return visitor.visitChildren(self)




    def skewedLocations(self):

        localctx = HiveParser.SkewedLocationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_skewedLocations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(HiveParser.LPAREN)
            self.state = 1426
            self.skewedLocationsList()
            self.state = 1427
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedLocationMap(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedLocationMapContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedLocationMapContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocationsList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedLocationsList" ):
                return visitor.visitSkewedLocationsList(self)
            else:
                return visitor.visitChildren(self)




    def skewedLocationsList(self):

        localctx = HiveParser.SkewedLocationsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_skewedLocationsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.skewedLocationMap()
            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 1430
                self.match(HiveParser.COMMA)
                self.state = 1431
                self.skewedLocationMap()
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedLocationMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedValueLocationElement(self):
            return self.getTypedRuleContext(HiveParser.SkewedValueLocationElementContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedLocationMap

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedLocationMap" ):
                return visitor.visitSkewedLocationMap(self)
            else:
                return visitor.visitChildren(self)




    def skewedLocationMap(self):

        localctx = HiveParser.SkewedLocationMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_skewedLocationMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.skewedValueLocationElement()
            self.state = 1438
            self.match(HiveParser.EQUAL)
            self.state = 1439
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixLocation" ):
                return visitor.visitAlterStatementSuffixLocation(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixLocation(self):

        localctx = HiveParser.AlterStatementSuffixLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alterStatementSuffixLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(HiveParser.KW_SET)
            self.state = 1442
            self.match(HiveParser.KW_LOCATION)
            self.state = 1443
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSkewedbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSkewed(self):
            return self.getTypedRuleContext(HiveParser.TableSkewedContext,0)


        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def storedAsDirs(self):
            return self.getTypedRuleContext(HiveParser.StoredAsDirsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSkewedby

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixSkewedby" ):
                return visitor.visitAlterStatementSuffixSkewedby(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixSkewedby(self):

        localctx = HiveParser.AlterStatementSuffixSkewedbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alterStatementSuffixSkewedby)
        try:
            self.state = 1450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.tableSkewed()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(HiveParser.KW_NOT)
                self.state = 1447
                self.match(HiveParser.KW_SKEWED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1448
                self.match(HiveParser.KW_NOT)
                self.state = 1449
                self.storedAsDirs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixExchangePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXCHANGE(self):
            return self.getToken(HiveParser.KW_EXCHANGE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixExchangePartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixExchangePartition" ):
                return visitor.visitAlterStatementSuffixExchangePartition(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixExchangePartition(self):

        localctx = HiveParser.AlterStatementSuffixExchangePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alterStatementSuffixExchangePartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.match(HiveParser.KW_EXCHANGE)
            self.state = 1453
            self.partitionSpec()
            self.state = 1454
            self.match(HiveParser.KW_WITH)
            self.state = 1455
            self.match(HiveParser.KW_TABLE)
            self.state = 1456
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixRenamePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixRenamePart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixRenamePart" ):
                return visitor.visitAlterStatementSuffixRenamePart(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixRenamePart(self):

        localctx = HiveParser.AlterStatementSuffixRenamePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_alterStatementSuffixRenamePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(HiveParser.KW_RENAME)
            self.state = 1459
            self.match(HiveParser.KW_TO)
            self.state = 1460
            self.partitionSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixStatsPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_COLUMN(self):
            return self.getToken(HiveParser.KW_COLUMN, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixStatsPart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixStatsPart" ):
                return visitor.visitAlterStatementSuffixStatsPart(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixStatsPart(self):

        localctx = HiveParser.AlterStatementSuffixStatsPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_alterStatementSuffixStatsPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(HiveParser.KW_UPDATE)
            self.state = 1463
            self.match(HiveParser.KW_STATISTICS)
            self.state = 1464
            self.match(HiveParser.KW_FOR)
            self.state = 1466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COLUMN:
                self.state = 1465
                self.match(HiveParser.KW_COLUMN)


            self.state = 1468
            self.identifier()
            self.state = 1469
            self.match(HiveParser.KW_SET)
            self.state = 1470
            self.tableProperties()
            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 1471
                self.match(HiveParser.KW_COMMENT)
                self.state = 1472
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixMergeFilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONCATENATE(self):
            return self.getToken(HiveParser.KW_CONCATENATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixMergeFiles

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixMergeFiles" ):
                return visitor.visitAlterStatementSuffixMergeFiles(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixMergeFiles(self):

        localctx = HiveParser.AlterStatementSuffixMergeFilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_alterStatementSuffixMergeFiles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.match(HiveParser.KW_CONCATENATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixBucketNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixBucketNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixBucketNum" ):
                return visitor.visitAlterStatementSuffixBucketNum(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixBucketNum(self):

        localctx = HiveParser.AlterStatementSuffixBucketNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_alterStatementSuffixBucketNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.match(HiveParser.KW_INTO)
            self.state = 1478
            self.match(HiveParser.Number)
            self.state = 1479
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def KW_TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_TABLE)
            else:
                return self.getToken(HiveParser.KW_TABLE, i)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TableNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.TableNameContext,i)


        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_DEFERRED(self):
            return self.getToken(HiveParser.KW_DEFERRED, 0)

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def KW_IDXPROPERTIES(self):
            return self.getToken(HiveParser.KW_IDXPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def locationPath(self):
            return self.getTypedRuleContext(HiveParser.LocationPathContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createIndexStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndexStatement" ):
                return visitor.visitCreateIndexStatement(self)
            else:
                return visitor.visitChildren(self)




    def createIndexStatement(self):

        localctx = HiveParser.CreateIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_createIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(HiveParser.KW_CREATE)
            self.state = 1482
            self.match(HiveParser.KW_INDEX)
            self.state = 1483
            self.identifier()
            self.state = 1484
            self.match(HiveParser.KW_ON)
            self.state = 1485
            self.match(HiveParser.KW_TABLE)
            self.state = 1486
            self.tableName()
            self.state = 1487
            self.columnParenthesesList()
            self.state = 1488
            self.match(HiveParser.KW_AS)
            self.state = 1489
            self.match(HiveParser.StringLiteral)
            self.state = 1493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 1490
                self.match(HiveParser.KW_WITH)
                self.state = 1491
                self.match(HiveParser.KW_DEFERRED)
                self.state = 1492
                self.match(HiveParser.KW_REBUILD)


            self.state = 1497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IDXPROPERTIES:
                self.state = 1495
                self.match(HiveParser.KW_IDXPROPERTIES)
                self.state = 1496
                self.tableProperties()


            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IN:
                self.state = 1499
                self.match(HiveParser.KW_IN)
                self.state = 1500
                self.match(HiveParser.KW_TABLE)
                self.state = 1501
                self.tableName()


            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITIONED:
                self.state = 1504
                self.match(HiveParser.KW_PARTITIONED)
                self.state = 1505
                self.match(HiveParser.KW_BY)
                self.state = 1506
                self.columnParenthesesList()


            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ROW or _la==HiveParser.KW_STORED:
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ROW:
                    self.state = 1509
                    self.tableRowFormat()


                self.state = 1512
                self.tableFileFormat()


            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LOCATION:
                self.state = 1515
                self.match(HiveParser.KW_LOCATION)
                self.state = 1516
                self.locationPath()


            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TBLPROPERTIES:
                self.state = 1519
                self.tablePropertiesPrefixed()


            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 1522
                self.tableComment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def getRuleIndex(self):
            return HiveParser.RULE_locationPath

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationPath" ):
                return visitor.visitLocationPath(self)
            else:
                return visitor.visitChildren(self)




    def locationPath(self):

        localctx = HiveParser.LocationPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_locationPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.identifier()
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.DOT:
                self.state = 1526
                self.match(HiveParser.DOT)
                self.state = 1527
                self.identifier()
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropIndexStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndexStatement" ):
                return visitor.visitDropIndexStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropIndexStatement(self):

        localctx = HiveParser.DropIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropIndexStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(HiveParser.KW_DROP)
            self.state = 1534
            self.match(HiveParser.KW_INDEX)
            self.state = 1535
            self.identifier()
            self.state = 1536
            self.match(HiveParser.KW_ON)
            self.state = 1537
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePartitionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePartitionPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePartitionPrefix" ):
                return visitor.visitTablePartitionPrefix(self)
            else:
                return visitor.visitChildren(self)




    def tablePartitionPrefix(self):

        localctx = HiveParser.TablePartitionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tablePartitionPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.tableName()
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 1540
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_WAIT(self):
            return self.getToken(HiveParser.KW_WAIT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_blocking

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocking" ):
                return visitor.visitBlocking(self)
            else:
                return visitor.visitChildren(self)




    def blocking(self):

        localctx = HiveParser.BlockingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_blocking)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(HiveParser.KW_AND)
            self.state = 1544
            self.match(HiveParser.KW_WAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixCompactContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMPACT(self):
            return self.getToken(HiveParser.KW_COMPACT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def blocking(self):
            return self.getTypedRuleContext(HiveParser.BlockingContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixCompact

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixCompact" ):
                return visitor.visitAlterStatementSuffixCompact(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixCompact(self):

        localctx = HiveParser.AlterStatementSuffixCompactContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_alterStatementSuffixCompact)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(HiveParser.KW_COMPACT)
            self.state = 1547
            self.match(HiveParser.StringLiteral)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AND:
                self.state = 1548
                self.blocking()


            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1551
                self.match(HiveParser.KW_WITH)
                self.state = 1552
                self.match(HiveParser.KW_OVERWRITE)
                self.state = 1553
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1554
                self.tableProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementSuffixSetOwnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterStatementSuffixSetOwner

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatementSuffixSetOwner" ):
                return visitor.visitAlterStatementSuffixSetOwner(self)
            else:
                return visitor.visitChildren(self)




    def alterStatementSuffixSetOwner(self):

        localctx = HiveParser.AlterStatementSuffixSetOwnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_alterStatementSuffixSetOwner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.match(HiveParser.KW_SET)
            self.state = 1558
            self.match(HiveParser.KW_OWNER)
            self.state = 1559
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileFormat" ):
                return visitor.visitFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def fileFormat(self):

        localctx = HiveParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_fileFormat)
        self._la = 0 # Token type
        try:
            self.state = 1574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1561
                self.match(HiveParser.KW_INPUTFORMAT)
                self.state = 1562
                self.match(HiveParser.StringLiteral)
                self.state = 1563
                self.match(HiveParser.KW_OUTPUTFORMAT)
                self.state = 1564
                self.match(HiveParser.StringLiteral)
                self.state = 1565
                self.match(HiveParser.KW_SERDE)
                self.state = 1566
                self.match(HiveParser.StringLiteral)
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_INPUTDRIVER:
                    self.state = 1567
                    self.match(HiveParser.KW_INPUTDRIVER)
                    self.state = 1568
                    self.match(HiveParser.StringLiteral)
                    self.state = 1569
                    self.match(HiveParser.KW_OUTPUTDRIVER)
                    self.state = 1570
                    self.match(HiveParser.StringLiteral)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1573
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_inputFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputFileFormat" ):
                return visitor.visitInputFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def inputFileFormat(self):

        localctx = HiveParser.InputFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_inputFileFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.match(HiveParser.KW_INPUTFORMAT)
            self.state = 1577
            self.match(HiveParser.StringLiteral)
            self.state = 1578
            self.match(HiveParser.KW_SERDE)
            self.state = 1579
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def KW_ELEM_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ELEM_TYPE)
            else:
                return self.getToken(HiveParser.KW_ELEM_TYPE, i)

        def KW_KEY_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_KEY_TYPE)
            else:
                return self.getToken(HiveParser.KW_KEY_TYPE, i)

        def KW_VALUE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_VALUE_TYPE)
            else:
                return self.getToken(HiveParser.KW_VALUE_TYPE, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tabTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabTypeExpr" ):
                return visitor.visitTabTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def tabTypeExpr(self):

        localctx = HiveParser.TabTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tabTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.identifier()
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.DOT:
                self.state = 1582
                self.match(HiveParser.DOT)
                self.state = 1583
                self.identifier()


            self.state = 1599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1586
                self.identifier()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.DOT:
                    self.state = 1587
                    self.match(HiveParser.DOT)
                    self.state = 1592
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 1588
                        self.match(HiveParser.KW_ELEM_TYPE)
                        pass

                    elif la_ == 2:
                        self.state = 1589
                        self.match(HiveParser.KW_KEY_TYPE)
                        pass

                    elif la_ == 3:
                        self.state = 1590
                        self.match(HiveParser.KW_VALUE_TYPE)
                        pass

                    elif la_ == 4:
                        self.state = 1591
                        self.identifier()
                        pass


                    self.state = 1598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tabTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.TabTypeExprContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartTypeExpr" ):
                return visitor.visitPartTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def partTypeExpr(self):

        localctx = HiveParser.PartTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_partTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.tabTypeExpr()
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 1602
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabPartColTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def extColumnName(self):
            return self.getTypedRuleContext(HiveParser.ExtColumnNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tabPartColTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabPartColTypeExpr" ):
                return visitor.visitTabPartColTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def tabPartColTypeExpr(self):

        localctx = HiveParser.TabPartColTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_tabPartColTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.tableName()
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 1606
                self.partitionSpec()


            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1609
                self.extColumnName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESCRIBE(self):
            return self.getToken(HiveParser.KW_DESCRIBE, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def descFuncNames(self):
            return self.getTypedRuleContext(HiveParser.DescFuncNamesContext,0)


        def tabPartColTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.TabPartColTypeExprContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_descStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescStatement" ):
                return visitor.visitDescStatement(self)
            else:
                return visitor.visitChildren(self)




    def descStatement(self):

        localctx = HiveParser.DescStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_descStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_DESC or _la==HiveParser.KW_DESCRIBE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1613
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_EXTENDED:
                    self.state = 1614
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1617
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 1618
                self.match(HiveParser.KW_FUNCTION)
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_EXTENDED:
                    self.state = 1619
                    self.match(HiveParser.KW_EXTENDED)


                self.state = 1622
                self.descFuncNames()
                pass

            elif la_ == 3:
                self.state = 1623
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_EXTENDED or _la==HiveParser.KW_FORMATTED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1624
                self.tabPartColTypeExpr()
                pass

            elif la_ == 4:
                self.state = 1625
                self.tabPartColTypeExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_COMPUTE(self):
            return self.getToken(HiveParser.KW_COMPUTE, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_CACHE(self):
            return self.getToken(HiveParser.KW_CACHE, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def KW_NOSCAN(self):
            return self.getToken(HiveParser.KW_NOSCAN, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_analyzeStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyzeStatement" ):
                return visitor.visitAnalyzeStatement(self)
            else:
                return visitor.visitChildren(self)




    def analyzeStatement(self):

        localctx = HiveParser.AnalyzeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_analyzeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(HiveParser.KW_ANALYZE)
            self.state = 1629
            self.match(HiveParser.KW_TABLE)

            self.state = 1630
            self.tableOrPartition()
            self.state = 1643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_COMPUTE]:
                self.state = 1631
                self.match(HiveParser.KW_COMPUTE)
                self.state = 1632
                self.match(HiveParser.KW_STATISTICS)
                self.state = 1639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.KW_NOSCAN]:
                    self.state = 1633
                    self.match(HiveParser.KW_NOSCAN)
                    pass
                elif token in [HiveParser.KW_FOR]:
                    self.state = 1634
                    self.match(HiveParser.KW_FOR)
                    self.state = 1635
                    self.match(HiveParser.KW_COLUMNS)
                    self.state = 1637
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        self.state = 1636
                        self.columnNameList()


                    pass
                elif token in [HiveParser.EOF, HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_EXPLAIN, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_TRUNCATE, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.SEMICOLON, HiveParser.LPAREN]:
                    pass
                else:
                    pass
                pass
            elif token in [HiveParser.KW_CACHE]:
                self.state = 1641
                self.match(HiveParser.KW_CACHE)
                self.state = 1642
                self.match(HiveParser.KW_METADATA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_DATABASES(self):
            return self.getToken(HiveParser.KW_DATABASES, 0)

        def KW_SCHEMAS(self):
            return self.getToken(HiveParser.KW_SCHEMAS, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def showStmtIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowStmtIdentifierContext,0)


        def KW_TABLES(self):
            return self.getToken(HiveParser.KW_TABLES, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_FROM(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_FROM)
            else:
                return self.getToken(HiveParser.KW_FROM, i)

        def KW_IN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_IN)
            else:
                return self.getToken(HiveParser.KW_IN, i)

        def KW_VIEWS(self):
            return self.getToken(HiveParser.KW_VIEWS, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def showFunctionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.ShowFunctionIdentifierContext,0)


        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_EXTENDED(self):
            return self.getToken(HiveParser.KW_EXTENDED, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def partTypeExpr(self):
            return self.getTypedRuleContext(HiveParser.PartTypeExprContext,0)


        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def KW_CONF(self):
            return self.getToken(HiveParser.KW_CONF, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLANS(self):
            return self.getToken(HiveParser.KW_PLANS, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatement" ):
                return visitor.visitShowStatement(self)
            else:
                return visitor.visitChildren(self)




    def showStatement(self):

        localctx = HiveParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 1768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1645
                self.match(HiveParser.KW_SHOW)
                self.state = 1646
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_DATABASES or _la==HiveParser.KW_SCHEMAS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LIKE:
                    self.state = 1647
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1648
                    self.showStmtIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.match(HiveParser.KW_SHOW)
                self.state = 1652
                self.match(HiveParser.KW_TABLES)
                self.state = 1655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1653
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_FROM or _la==HiveParser.KW_IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1654
                    self.identifier()


                self.state = 1660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1657
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1658
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1659
                    self.showStmtIdentifier()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1662
                self.match(HiveParser.KW_SHOW)
                self.state = 1663
                self.match(HiveParser.KW_VIEWS)
                self.state = 1666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1664
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_FROM or _la==HiveParser.KW_IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1665
                    self.identifier()


                self.state = 1671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1668
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1669
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1670
                    self.showStmtIdentifier()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1673
                self.match(HiveParser.KW_SHOW)
                self.state = 1674
                self.match(HiveParser.KW_MATERIALIZED)
                self.state = 1675
                self.match(HiveParser.KW_VIEWS)
                self.state = 1678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1676
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_FROM or _la==HiveParser.KW_IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1677
                    self.identifier()


                self.state = 1683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1680
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1681
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1682
                    self.showStmtIdentifier()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1685
                self.match(HiveParser.KW_SHOW)
                self.state = 1686
                self.match(HiveParser.KW_COLUMNS)
                self.state = 1687
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_FROM or _la==HiveParser.KW_IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1688
                self.tableName()
                self.state = 1691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1689
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_FROM or _la==HiveParser.KW_IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1690
                    self.identifier()


                self.state = 1696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1693
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1694
                    self.showStmtIdentifier()

                elif la_ == 2:
                    self.state = 1695
                    self.showStmtIdentifier()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1698
                self.match(HiveParser.KW_SHOW)
                self.state = 1699
                self.match(HiveParser.KW_FUNCTIONS)
                self.state = 1703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1700
                    self.match(HiveParser.KW_LIKE)
                    self.state = 1701
                    self.showFunctionIdentifier()

                elif la_ == 2:
                    self.state = 1702
                    self.showFunctionIdentifier()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1705
                self.match(HiveParser.KW_SHOW)
                self.state = 1706
                self.match(HiveParser.KW_PARTITIONS)
                self.state = 1707
                self.tableName()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITION:
                    self.state = 1708
                    self.partitionSpec()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1711
                self.match(HiveParser.KW_SHOW)
                self.state = 1712
                self.match(HiveParser.KW_CREATE)
                self.state = 1717
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.KW_DATABASE, HiveParser.KW_SCHEMA]:
                    self.state = 1713
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1714
                    self.identifier()
                    pass
                elif token in [HiveParser.KW_TABLE]:
                    self.state = 1715
                    self.match(HiveParser.KW_TABLE)
                    self.state = 1716
                    self.tableName()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1719
                self.match(HiveParser.KW_SHOW)
                self.state = 1720
                self.match(HiveParser.KW_TABLE)
                self.state = 1721
                self.match(HiveParser.KW_EXTENDED)
                self.state = 1724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_FROM or _la==HiveParser.KW_IN:
                    self.state = 1722
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_FROM or _la==HiveParser.KW_IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1723
                    self.identifier()


                self.state = 1726
                self.match(HiveParser.KW_LIKE)
                self.state = 1727
                self.showStmtIdentifier()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITION:
                    self.state = 1728
                    self.partitionSpec()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1731
                self.match(HiveParser.KW_SHOW)
                self.state = 1732
                self.match(HiveParser.KW_TBLPROPERTIES)
                self.state = 1733
                self.tableName()
                self.state = 1737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1734
                    self.match(HiveParser.LPAREN)
                    self.state = 1735
                    self.match(HiveParser.StringLiteral)
                    self.state = 1736
                    self.match(HiveParser.RPAREN)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1739
                self.match(HiveParser.KW_SHOW)
                self.state = 1740
                self.match(HiveParser.KW_LOCKS)
                self.state = 1752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1742
                    self.identifier()
                    self.state = 1744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==HiveParser.KW_EXTENDED:
                        self.state = 1743
                        self.match(HiveParser.KW_EXTENDED)


                    pass

                elif la_ == 2:
                    self.state = 1747
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        self.state = 1746
                        self.partTypeExpr()


                    self.state = 1750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==HiveParser.KW_EXTENDED:
                        self.state = 1749
                        self.match(HiveParser.KW_EXTENDED)


                    pass


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1754
                self.match(HiveParser.KW_SHOW)
                self.state = 1755
                self.match(HiveParser.KW_COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1756
                self.match(HiveParser.KW_SHOW)
                self.state = 1757
                self.match(HiveParser.KW_TRANSACTIONS)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1758
                self.match(HiveParser.KW_SHOW)
                self.state = 1759
                self.match(HiveParser.KW_CONF)
                self.state = 1760
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1761
                self.match(HiveParser.KW_SHOW)
                self.state = 1762
                self.match(HiveParser.KW_RESOURCE)
                self.state = 1766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.KW_PLAN]:
                    self.state = 1763
                    self.match(HiveParser.KW_PLAN)
                    self.state = 1764
                    self.identifier()
                    pass
                elif token in [HiveParser.KW_PLANS]:
                    self.state = 1765
                    self.match(HiveParser.KW_PLANS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def lockMode(self):
            return self.getTypedRuleContext(HiveParser.LockModeContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_lockStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockStatement" ):
                return visitor.visitLockStatement(self)
            else:
                return visitor.visitChildren(self)




    def lockStatement(self):

        localctx = HiveParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.match(HiveParser.KW_LOCK)
            self.state = 1771
            self.match(HiveParser.KW_TABLE)
            self.state = 1772
            self.tableName()
            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 1773
                self.partitionSpec()


            self.state = 1776
            self.lockMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def lockMode(self):
            return self.getTypedRuleContext(HiveParser.LockModeContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_lockDatabase

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockDatabase" ):
                return visitor.visitLockDatabase(self)
            else:
                return visitor.visitChildren(self)




    def lockDatabase(self):

        localctx = HiveParser.LockDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lockDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.match(HiveParser.KW_LOCK)
            self.state = 1779
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1780
            self.identifier()
            self.state = 1781
            self.lockMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHARED(self):
            return self.getToken(HiveParser.KW_SHARED, 0)

        def KW_EXCLUSIVE(self):
            return self.getToken(HiveParser.KW_EXCLUSIVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_lockMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockMode" ):
                return visitor.visitLockMode(self)
            else:
                return visitor.visitChildren(self)




    def lockMode(self):

        localctx = HiveParser.LockModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_lockMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_SHARED or _la==HiveParser.KW_EXCLUSIVE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_unlockStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockStatement" ):
                return visitor.visitUnlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def unlockStatement(self):

        localctx = HiveParser.UnlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_unlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.match(HiveParser.KW_UNLOCK)
            self.state = 1786
            self.match(HiveParser.KW_TABLE)
            self.state = 1787
            self.tableName()
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 1788
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_unlockDatabase

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockDatabase" ):
                return visitor.visitUnlockDatabase(self)
            else:
                return visitor.visitChildren(self)




    def unlockDatabase(self):

        localctx = HiveParser.UnlockDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_unlockDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.match(HiveParser.KW_UNLOCK)
            self.state = 1792
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1793
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createRoleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRoleStatement" ):
                return visitor.visitCreateRoleStatement(self)
            else:
                return visitor.visitChildren(self)




    def createRoleStatement(self):

        localctx = HiveParser.CreateRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_createRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(HiveParser.KW_CREATE)
            self.state = 1796
            self.match(HiveParser.KW_ROLE)
            self.state = 1797
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropRoleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRoleStatement" ):
                return visitor.visitDropRoleStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropRoleStatement(self):

        localctx = HiveParser.DropRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dropRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.match(HiveParser.KW_DROP)
            self.state = 1800
            self.match(HiveParser.KW_ROLE)
            self.state = 1801
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantPrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeListContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def privilegeObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeObjectContext,0)


        def withGrantOption(self):
            return self.getTypedRuleContext(HiveParser.WithGrantOptionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_grantPrivileges

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantPrivileges" ):
                return visitor.visitGrantPrivileges(self)
            else:
                return visitor.visitChildren(self)




    def grantPrivileges(self):

        localctx = HiveParser.GrantPrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_grantPrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(HiveParser.KW_GRANT)
            self.state = 1804
            self.privilegeList()
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ON:
                self.state = 1805
                self.privilegeObject()


            self.state = 1808
            self.match(HiveParser.KW_TO)
            self.state = 1809
            self.principalSpecification()
            self.state = 1811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1810
                self.withGrantOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokePrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REVOKE(self):
            return self.getToken(HiveParser.KW_REVOKE, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeListContext,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def grantOptionFor(self):
            return self.getTypedRuleContext(HiveParser.GrantOptionForContext,0)


        def privilegeObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_revokePrivileges

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokePrivileges" ):
                return visitor.visitRevokePrivileges(self)
            else:
                return visitor.visitChildren(self)




    def revokePrivileges(self):

        localctx = HiveParser.RevokePrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_revokePrivileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(HiveParser.KW_REVOKE)
            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_GRANT:
                self.state = 1814
                self.grantOptionFor()


            self.state = 1817
            self.privilegeList()
            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ON:
                self.state = 1818
                self.privilegeObject()


            self.state = 1821
            self.match(HiveParser.KW_FROM)
            self.state = 1822
            self.principalSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def withAdminOption(self):
            return self.getTypedRuleContext(HiveParser.WithAdminOptionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_grantRole

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRole" ):
                return visitor.visitGrantRole(self)
            else:
                return visitor.visitChildren(self)




    def grantRole(self):

        localctx = HiveParser.GrantRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_grantRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(HiveParser.KW_GRANT)
            self.state = 1826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1825
                self.match(HiveParser.KW_ROLE)


            self.state = 1828
            self.aliasList()
            self.state = 1829
            self.match(HiveParser.KW_TO)
            self.state = 1830
            self.principalSpecification()
            self.state = 1832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1831
                self.withAdminOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REVOKE(self):
            return self.getToken(HiveParser.KW_REVOKE, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def principalSpecification(self):
            return self.getTypedRuleContext(HiveParser.PrincipalSpecificationContext,0)


        def adminOptionFor(self):
            return self.getTypedRuleContext(HiveParser.AdminOptionForContext,0)


        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_revokeRole

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRole" ):
                return visitor.visitRevokeRole(self)
            else:
                return visitor.visitChildren(self)




    def revokeRole(self):

        localctx = HiveParser.RevokeRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_revokeRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(HiveParser.KW_REVOKE)
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1835
                self.adminOptionFor()


            self.state = 1839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1838
                self.match(HiveParser.KW_ROLE)


            self.state = 1841
            self.aliasList()
            self.state = 1842
            self.match(HiveParser.KW_FROM)
            self.state = 1843
            self.principalSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRoleGrantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showRoleGrants

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoleGrants" ):
                return visitor.visitShowRoleGrants(self)
            else:
                return visitor.visitChildren(self)




    def showRoleGrants(self):

        localctx = HiveParser.ShowRoleGrantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_showRoleGrants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(HiveParser.KW_SHOW)
            self.state = 1846
            self.match(HiveParser.KW_ROLE)
            self.state = 1847
            self.match(HiveParser.KW_GRANT)
            self.state = 1848
            self.principalName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showRoles

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)




    def showRoles(self):

        localctx = HiveParser.ShowRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_showRoles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.match(HiveParser.KW_SHOW)
            self.state = 1851
            self.match(HiveParser.KW_ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCurrentRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showCurrentRole

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentRole" ):
                return visitor.visitShowCurrentRole(self)
            else:
                return visitor.visitChildren(self)




    def showCurrentRole(self):

        localctx = HiveParser.ShowCurrentRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_showCurrentRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.match(HiveParser.KW_SHOW)
            self.state = 1854
            self.match(HiveParser.KW_CURRENT)
            self.state = 1855
            self.match(HiveParser.KW_ROLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_NONE(self):
            return self.getToken(HiveParser.KW_NONE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_setRole

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)




    def setRole(self):

        localctx = HiveParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_setRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(HiveParser.KW_SET)
            self.state = 1858
            self.match(HiveParser.KW_ROLE)
            self.state = 1862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ALL]:
                self.state = 1859
                self.match(HiveParser.KW_ALL)
                pass
            elif token in [HiveParser.KW_NONE]:
                self.state = 1860
                self.match(HiveParser.KW_NONE)
                pass
            elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.state = 1861
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGrantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def principalName(self):
            return self.getTypedRuleContext(HiveParser.PrincipalNameContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def privilegeIncludeColObject(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeIncludeColObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showGrants

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)




    def showGrants(self):

        localctx = HiveParser.ShowGrantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_showGrants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(HiveParser.KW_SHOW)
            self.state = 1865
            self.match(HiveParser.KW_GRANT)
            self.state = 1867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_GROUP or _la==HiveParser.KW_USER or _la==HiveParser.KW_ROLE:
                self.state = 1866
                self.principalName()


            self.state = 1871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ON:
                self.state = 1869
                self.match(HiveParser.KW_ON)
                self.state = 1870
                self.privilegeIncludeColObject()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRolePrincipalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_PRINCIPALS(self):
            return self.getToken(HiveParser.KW_PRINCIPALS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_showRolePrincipals

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRolePrincipals" ):
                return visitor.visitShowRolePrincipals(self)
            else:
                return visitor.visitChildren(self)




    def showRolePrincipals(self):

        localctx = HiveParser.ShowRolePrincipalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_showRolePrincipals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self.match(HiveParser.KW_SHOW)
            self.state = 1874
            self.match(HiveParser.KW_PRINCIPALS)
            self.state = 1875
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeIncludeColObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def privObjectCols(self):
            return self.getTypedRuleContext(HiveParser.PrivObjectColsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privilegeIncludeColObject

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegeIncludeColObject" ):
                return visitor.visitPrivilegeIncludeColObject(self)
            else:
                return visitor.visitChildren(self)




    def privilegeIncludeColObject(self):

        localctx = HiveParser.PrivilegeIncludeColObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_privilegeIncludeColObject)
        try:
            self.state = 1879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1877
                self.match(HiveParser.KW_ALL)
                pass
            elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLE, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASE, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.privObjectCols()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def privObject(self):
            return self.getTypedRuleContext(HiveParser.PrivObjectContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_privilegeObject

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegeObject" ):
                return visitor.visitPrivilegeObject(self)
            else:
                return visitor.visitChildren(self)




    def privilegeObject(self):

        localctx = HiveParser.PrivilegeObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_privilegeObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self.match(HiveParser.KW_ON)
            self.state = 1882
            self.privObject()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privObject

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivObject" ):
                return visitor.visitPrivObject(self)
            else:
                return visitor.visitChildren(self)




    def privObject(self):

        localctx = HiveParser.PrivObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_privObject)
        self._la = 0 # Token type
        try:
            self.state = 1897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1884
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1885
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_TABLE:
                    self.state = 1886
                    self.match(HiveParser.KW_TABLE)


                self.state = 1889
                self.tableName()
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITION:
                    self.state = 1890
                    self.partitionSpec()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1893
                self.match(HiveParser.KW_URI)
                self.state = 1894
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1895
                self.match(HiveParser.KW_SERVER)
                self.state = 1896
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivObjectColsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_DATABASE(self):
            return self.getToken(HiveParser.KW_DATABASE, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privObjectCols

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivObjectCols" ):
                return visitor.visitPrivObjectCols(self)
            else:
                return visitor.visitChildren(self)




    def privObjectCols(self):

        localctx = HiveParser.PrivObjectColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_privObjectCols)
        self._la = 0 # Token type
        try:
            self.state = 1918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1899
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_DATABASE or _la==HiveParser.KW_SCHEMA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1900
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_TABLE:
                    self.state = 1901
                    self.match(HiveParser.KW_TABLE)


                self.state = 1904
                self.tableName()
                self.state = 1909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1905
                    self.match(HiveParser.LPAREN)
                    self.state = 1906
                    self.columnNameList()
                    self.state = 1907
                    self.match(HiveParser.RPAREN)


                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITION:
                    self.state = 1911
                    self.partitionSpec()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1914
                self.match(HiveParser.KW_URI)
                self.state = 1915
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1916
                self.match(HiveParser.KW_SERVER)
                self.state = 1917
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privlegeDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrivlegeDefContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrivlegeDefContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_privilegeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegeList" ):
                return visitor.visitPrivilegeList(self)
            else:
                return visitor.visitChildren(self)




    def privilegeList(self):

        localctx = HiveParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_privilegeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            self.privlegeDef()
            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 1921
                self.match(HiveParser.COMMA)
                self.state = 1922
                self.privlegeDef()
                self.state = 1927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivlegeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeType(self):
            return self.getTypedRuleContext(HiveParser.PrivilegeTypeContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privlegeDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivlegeDef" ):
                return visitor.visitPrivlegeDef(self)
            else:
                return visitor.visitChildren(self)




    def privlegeDef(self):

        localctx = HiveParser.PrivlegeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_privlegeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.privilegeType()
            self.state = 1933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.LPAREN:
                self.state = 1929
                self.match(HiveParser.LPAREN)
                self.state = 1930
                self.columnNameList()
                self.state = 1931
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_ALTER(self):
            return self.getToken(HiveParser.KW_ALTER, 0)

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_SELECT(self):
            return self.getToken(HiveParser.KW_SELECT, 0)

        def KW_SHOW_DATABASE(self):
            return self.getToken(HiveParser.KW_SHOW_DATABASE, 0)

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_privilegeType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegeType" ):
                return visitor.visitPrivilegeType(self)
            else:
                return visitor.visitChildren(self)




    def privilegeType(self):

        localctx = HiveParser.PrivilegeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_privilegeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ALL) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (HiveParser.KW_CREATE - 75)) | (1 << (HiveParser.KW_ALTER - 75)) | (1 << (HiveParser.KW_DROP - 75)))) != 0) or ((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & ((1 << (HiveParser.KW_DELETE - 183)) | (1 << (HiveParser.KW_LOCK - 183)) | (1 << (HiveParser.KW_SHOW_DATABASE - 183)) | (1 << (HiveParser.KW_UPDATE - 183)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def principalName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PrincipalNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.PrincipalNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_principalSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrincipalSpecification" ):
                return visitor.visitPrincipalSpecification(self)
            else:
                return visitor.visitChildren(self)




    def principalSpecification(self):

        localctx = HiveParser.PrincipalSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_principalSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.principalName()
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 1938
                self.match(HiveParser.COMMA)
                self.state = 1939
                self.principalName()
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USER(self):
            return self.getToken(HiveParser.KW_USER, 0)

        def principalIdentifier(self):
            return self.getTypedRuleContext(HiveParser.PrincipalIdentifierContext,0)


        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_principalName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrincipalName" ):
                return visitor.visitPrincipalName(self)
            else:
                return visitor.visitChildren(self)




    def principalName(self):

        localctx = HiveParser.PrincipalNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_principalName)
        try:
            self.state = 1951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_USER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1945
                self.match(HiveParser.KW_USER)
                self.state = 1946
                self.principalIdentifier()
                pass
            elif token in [HiveParser.KW_GROUP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1947
                self.match(HiveParser.KW_GROUP)
                self.state = 1948
                self.principalIdentifier()
                pass
            elif token in [HiveParser.KW_ROLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1949
                self.match(HiveParser.KW_ROLE)
                self.state = 1950
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithGrantOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withGrantOption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithGrantOption" ):
                return visitor.visitWithGrantOption(self)
            else:
                return visitor.visitChildren(self)




    def withGrantOption(self):

        localctx = HiveParser.WithGrantOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_withGrantOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(HiveParser.KW_WITH)
            self.state = 1954
            self.match(HiveParser.KW_GRANT)
            self.state = 1955
            self.match(HiveParser.KW_OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRANT(self):
            return self.getToken(HiveParser.KW_GRANT, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_grantOptionFor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantOptionFor" ):
                return visitor.visitGrantOptionFor(self)
            else:
                return visitor.visitChildren(self)




    def grantOptionFor(self):

        localctx = HiveParser.GrantOptionForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_grantOptionFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.match(HiveParser.KW_GRANT)
            self.state = 1958
            self.match(HiveParser.KW_OPTION)
            self.state = 1959
            self.match(HiveParser.KW_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminOptionForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_adminOptionFor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdminOptionFor" ):
                return visitor.visitAdminOptionFor(self)
            else:
                return visitor.visitChildren(self)




    def adminOptionFor(self):

        localctx = HiveParser.AdminOptionForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_adminOptionFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.match(HiveParser.KW_ADMIN)
            self.state = 1962
            self.match(HiveParser.KW_OPTION)
            self.state = 1963
            self.match(HiveParser.KW_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithAdminOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_withAdminOption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithAdminOption" ):
                return visitor.visitWithAdminOption(self)
            else:
                return visitor.visitChildren(self)




    def withAdminOption(self):

        localctx = HiveParser.WithAdminOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_withAdminOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.match(HiveParser.KW_WITH)
            self.state = 1966
            self.match(HiveParser.KW_ADMIN)
            self.state = 1967
            self.match(HiveParser.KW_OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetastoreCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MSCK(self):
            return self.getToken(HiveParser.KW_MSCK, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_REPAIR(self):
            return self.getToken(HiveParser.KW_REPAIR, 0)

        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_SYNC(self):
            return self.getToken(HiveParser.KW_SYNC, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_metastoreCheck

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetastoreCheck" ):
                return visitor.visitMetastoreCheck(self)
            else:
                return visitor.visitChildren(self)




    def metastoreCheck(self):

        localctx = HiveParser.MetastoreCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_metastoreCheck)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(HiveParser.KW_MSCK)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_REPAIR:
                self.state = 1970
                self.match(HiveParser.KW_REPAIR)


            self.state = 1982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_TABLE]:
                self.state = 1973
                self.match(HiveParser.KW_TABLE)
                self.state = 1974
                self.tableName()
                self.state = 1977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1975
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_DROP or _la==HiveParser.KW_ADD or _la==HiveParser.KW_SYNC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1976
                    self.match(HiveParser.KW_PARTITIONS)


                pass
            elif token in [HiveParser.EOF, HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_PARTITION, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_EXPLAIN, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_TRUNCATE, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.SEMICOLON, HiveParser.LPAREN]:
                self.state = 1980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PARTITION:
                    self.state = 1979
                    self.partitionSpec()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ResourceContext)
            else:
                return self.getTypedRuleContext(HiveParser.ResourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_resourceList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceList" ):
                return visitor.visitResourceList(self)
            else:
                return visitor.visitChildren(self)




    def resourceList(self):

        localctx = HiveParser.ResourceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_resourceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.resource()
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 1985
                self.match(HiveParser.COMMA)
                self.state = 1986
                self.resource()
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resourceType(self):
            return self.getTypedRuleContext(HiveParser.ResourceTypeContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = HiveParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self.resourceType()
            self.state = 1993
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JAR(self):
            return self.getToken(HiveParser.KW_JAR, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_resourceType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceType" ):
                return visitor.visitResourceType(self)
            else:
                return visitor.visitChildren(self)




    def resourceType(self):

        localctx = HiveParser.ResourceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_resourceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_FILE or _la==HiveParser.KW_JAR or _la==HiveParser.KW_ARCHIVE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def resourceList(self):
            return self.getTypedRuleContext(HiveParser.ResourceListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createFunctionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunctionStatement" ):
                return visitor.visitCreateFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def createFunctionStatement(self):

        localctx = HiveParser.CreateFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_createFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(HiveParser.KW_CREATE)
            self.state = 1999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TEMPORARY:
                self.state = 1998
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 2001
            self.match(HiveParser.KW_FUNCTION)
            self.state = 2002
            self.functionIdentifier()
            self.state = 2003
            self.match(HiveParser.KW_AS)
            self.state = 2004
            self.match(HiveParser.StringLiteral)
            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_USING:
                self.state = 2005
                self.match(HiveParser.KW_USING)
                self.state = 2006
                self.resourceList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropFunctionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunctionStatement" ):
                return visitor.visitDropFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropFunctionStatement(self):

        localctx = HiveParser.DropFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_dropFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.match(HiveParser.KW_DROP)
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TEMPORARY:
                self.state = 2010
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 2013
            self.match(HiveParser.KW_FUNCTION)
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 2014
                self.ifExists()


            self.state = 2017
            self.functionIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReloadFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RELOAD(self):
            return self.getToken(HiveParser.KW_RELOAD, 0)

        def KW_FUNCTION(self):
            return self.getToken(HiveParser.KW_FUNCTION, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_reloadFunctionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReloadFunctionStatement" ):
                return visitor.visitReloadFunctionStatement(self)
            else:
                return visitor.visitChildren(self)




    def reloadFunctionStatement(self):

        localctx = HiveParser.ReloadFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_reloadFunctionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.match(HiveParser.KW_RELOAD)
            self.state = 2020
            self.match(HiveParser.KW_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMacroStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_MACRO(self):
            return self.getToken(HiveParser.KW_MACRO, 0)

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createMacroStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMacroStatement" ):
                return visitor.visitCreateMacroStatement(self)
            else:
                return visitor.visitChildren(self)




    def createMacroStatement(self):

        localctx = HiveParser.CreateMacroStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_createMacroStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(HiveParser.KW_CREATE)
            self.state = 2023
            self.match(HiveParser.KW_TEMPORARY)
            self.state = 2024
            self.match(HiveParser.KW_MACRO)
            self.state = 2025
            self.match(HiveParser.Identifier)
            self.state = 2026
            self.match(HiveParser.LPAREN)
            self.state = 2028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.Identifier - 322)))) != 0):
                self.state = 2027
                self.columnNameTypeList()


            self.state = 2030
            self.match(HiveParser.RPAREN)
            self.state = 2031
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMacroStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_MACRO(self):
            return self.getToken(HiveParser.KW_MACRO, 0)

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropMacroStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropMacroStatement" ):
                return visitor.visitDropMacroStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropMacroStatement(self):

        localctx = HiveParser.DropMacroStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_dropMacroStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self.match(HiveParser.KW_DROP)
            self.state = 2034
            self.match(HiveParser.KW_TEMPORARY)
            self.state = 2035
            self.match(HiveParser.KW_MACRO)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 2036
                self.ifExists()


            self.state = 2039
            self.match(HiveParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def orReplace(self):
            return self.getTypedRuleContext(HiveParser.OrReplaceContext,0)


        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameCommentList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameCommentListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def viewPartition(self):
            return self.getTypedRuleContext(HiveParser.ViewPartitionContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createViewStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateViewStatement" ):
                return visitor.visitCreateViewStatement(self)
            else:
                return visitor.visitChildren(self)




    def createViewStatement(self):

        localctx = HiveParser.CreateViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_createViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.match(HiveParser.KW_CREATE)
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_OR:
                self.state = 2042
                self.orReplace()


            self.state = 2046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TEMPORARY:
                self.state = 2045
                self.match(HiveParser.KW_TEMPORARY)


            self.state = 2048
            self.match(HiveParser.KW_VIEW)
            self.state = 2050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 2049
                self.ifNotExists()


            self.state = 2052
            self.tableName()
            self.state = 2057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.LPAREN:
                self.state = 2053
                self.match(HiveParser.LPAREN)
                self.state = 2054
                self.columnNameCommentList()
                self.state = 2055
                self.match(HiveParser.RPAREN)


            self.state = 2060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 2059
                self.tableComment()


            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITIONED:
                self.state = 2062
                self.viewPartition()


            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TBLPROPERTIES:
                self.state = 2065
                self.tablePropertiesPrefixed()


            self.state = 2068
            self.match(HiveParser.KW_AS)
            self.state = 2069
            self.selectStatementWithCTE()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CREATE(self):
            return self.getToken(HiveParser.KW_CREATE, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def selectStatementWithCTE(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementWithCTEContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def rewriteDisabled(self):
            return self.getTypedRuleContext(HiveParser.RewriteDisabledContext,0)


        def tableComment(self):
            return self.getTypedRuleContext(HiveParser.TableCommentContext,0)


        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def tableLocation(self):
            return self.getTypedRuleContext(HiveParser.TableLocationContext,0)


        def tablePropertiesPrefixed(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesPrefixedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createMaterializedViewStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedViewStatement" ):
                return visitor.visitCreateMaterializedViewStatement(self)
            else:
                return visitor.visitChildren(self)




    def createMaterializedViewStatement(self):

        localctx = HiveParser.CreateMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_createMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(HiveParser.KW_CREATE)
            self.state = 2072
            self.match(HiveParser.KW_MATERIALIZED)
            self.state = 2073
            self.match(HiveParser.KW_VIEW)
            self.state = 2075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 2074
                self.ifNotExists()


            self.state = 2077
            self.tableName()
            self.state = 2079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_DISABLE:
                self.state = 2078
                self.rewriteDisabled()


            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 2081
                self.tableComment()


            self.state = 2085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ROW:
                self.state = 2084
                self.tableRowFormat()


            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_STORED:
                self.state = 2087
                self.tableFileFormat()


            self.state = 2091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LOCATION:
                self.state = 2090
                self.tableLocation()


            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TBLPROPERTIES:
                self.state = 2093
                self.tablePropertiesPrefixed()


            self.state = 2096
            self.match(HiveParser.KW_AS)
            self.state = 2097
            self.selectStatementWithCTE()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_viewPartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewPartition" ):
                return visitor.visitViewPartition(self)
            else:
                return visitor.visitChildren(self)




    def viewPartition(self):

        localctx = HiveParser.ViewPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_viewPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.match(HiveParser.KW_PARTITIONED)
            self.state = 2100
            self.match(HiveParser.KW_ON)
            self.state = 2101
            self.match(HiveParser.LPAREN)
            self.state = 2102
            self.columnNameList()
            self.state = 2103
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def viewName(self):
            return self.getTypedRuleContext(HiveParser.ViewNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropViewStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropViewStatement" ):
                return visitor.visitDropViewStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropViewStatement(self):

        localctx = HiveParser.DropViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_dropViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(HiveParser.KW_DROP)
            self.state = 2106
            self.match(HiveParser.KW_VIEW)
            self.state = 2108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 2107
                self.ifExists()


            self.state = 2110
            self.viewName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropMaterializedViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DROP(self):
            return self.getToken(HiveParser.KW_DROP, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def viewName(self):
            return self.getTypedRuleContext(HiveParser.ViewNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(HiveParser.IfExistsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropMaterializedViewStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropMaterializedViewStatement" ):
                return visitor.visitDropMaterializedViewStatement(self)
            else:
                return visitor.visitChildren(self)




    def dropMaterializedViewStatement(self):

        localctx = HiveParser.DropMaterializedViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_dropMaterializedViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(HiveParser.KW_DROP)
            self.state = 2113
            self.match(HiveParser.KW_MATERIALIZED)
            self.state = 2114
            self.match(HiveParser.KW_VIEW)
            self.state = 2116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_IF:
                self.state = 2115
                self.ifExists()


            self.state = 2118
            self.viewName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showFunctionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctionIdentifier" ):
                return visitor.visitShowFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def showFunctionIdentifier(self):

        localctx = HiveParser.ShowFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_showFunctionIdentifier)
        try:
            self.state = 2122
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2120
                self.functionIdentifier()
                pass
            elif token in [HiveParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                self.match(HiveParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStmtIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_showStmtIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStmtIdentifier" ):
                return visitor.visitShowStmtIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def showStmtIdentifier(self):

        localctx = HiveParser.ShowStmtIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_showStmtIdentifier)
        try:
            self.state = 2126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2124
                self.identifier()
                pass
            elif token in [HiveParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2125
                self.match(HiveParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableComment" ):
                return visitor.visitTableComment(self)
            else:
                return visitor.visitChildren(self)




    def tableComment(self):

        localctx = HiveParser.TableCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_tableComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self.match(HiveParser.KW_COMMENT)
            self.state = 2129
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameTypeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeConstraintContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tablePartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePartition" ):
                return visitor.visitTablePartition(self)
            else:
                return visitor.visitChildren(self)




    def tablePartition(self):

        localctx = HiveParser.TablePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_tablePartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.match(HiveParser.KW_PARTITIONED)
            self.state = 2132
            self.match(HiveParser.KW_BY)
            self.state = 2133
            self.match(HiveParser.LPAREN)
            self.state = 2134
            self.columnNameTypeConstraint()
            self.state = 2139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2135
                self.match(HiveParser.COMMA)
                self.state = 2136
                self.columnNameTypeConstraint()
                self.state = 2141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2142
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBucketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_BY(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_BY)
            else:
                return self.getToken(HiveParser.KW_BY, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def columnNameOrderList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameOrderListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableBuckets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableBuckets" ):
                return visitor.visitTableBuckets(self)
            else:
                return visitor.visitChildren(self)




    def tableBuckets(self):

        localctx = HiveParser.TableBucketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_tableBuckets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.match(HiveParser.KW_CLUSTERED)
            self.state = 2145
            self.match(HiveParser.KW_BY)
            self.state = 2146
            self.match(HiveParser.LPAREN)
            self.state = 2147
            self.columnNameList()
            self.state = 2148
            self.match(HiveParser.RPAREN)
            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_SORTED:
                self.state = 2149
                self.match(HiveParser.KW_SORTED)
                self.state = 2150
                self.match(HiveParser.KW_BY)
                self.state = 2151
                self.match(HiveParser.LPAREN)
                self.state = 2152
                self.columnNameOrderList()
                self.state = 2153
                self.match(HiveParser.RPAREN)


            self.state = 2157
            self.match(HiveParser.KW_INTO)
            self.state = 2158
            self.match(HiveParser.Number)
            self.state = 2159
            self.match(HiveParser.KW_BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSkewedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def skewedValueElement(self):
            return self.getTypedRuleContext(HiveParser.SkewedValueElementContext,0)


        def storedAsDirs(self):
            return self.getTypedRuleContext(HiveParser.StoredAsDirsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableSkewed

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSkewed" ):
                return visitor.visitTableSkewed(self)
            else:
                return visitor.visitChildren(self)




    def tableSkewed(self):

        localctx = HiveParser.TableSkewedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_tableSkewed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self.match(HiveParser.KW_SKEWED)
            self.state = 2162
            self.match(HiveParser.KW_BY)
            self.state = 2163
            self.match(HiveParser.LPAREN)
            self.state = 2164
            self.columnNameList()
            self.state = 2165
            self.match(HiveParser.RPAREN)
            self.state = 2166
            self.match(HiveParser.KW_ON)
            self.state = 2167
            self.match(HiveParser.LPAREN)
            self.state = 2168
            self.skewedValueElement()
            self.state = 2169
            self.match(HiveParser.RPAREN)
            self.state = 2171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2170
                self.storedAsDirs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowFormatSerde(self):
            return self.getTypedRuleContext(HiveParser.RowFormatSerdeContext,0)


        def rowFormatDelimited(self):
            return self.getTypedRuleContext(HiveParser.RowFormatDelimitedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormat" ):
                return visitor.visitRowFormat(self)
            else:
                return visitor.visitChildren(self)




    def rowFormat(self):

        localctx = HiveParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_rowFormat)
        try:
            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2173
                self.rowFormatSerde()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self.rowFormatDelimited()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordReaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RECORDREADER(self):
            return self.getToken(HiveParser.KW_RECORDREADER, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_recordReader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordReader" ):
                return visitor.visitRecordReader(self)
            else:
                return visitor.visitChildren(self)




    def recordReader(self):

        localctx = HiveParser.RecordReaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_recordReader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.match(HiveParser.KW_RECORDREADER)
            self.state = 2178
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordWriterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RECORDWRITER(self):
            return self.getToken(HiveParser.KW_RECORDWRITER, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_recordWriter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordWriter" ):
                return visitor.visitRecordWriter(self)
            else:
                return visitor.visitChildren(self)




    def recordWriter(self):

        localctx = HiveParser.RecordWriterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_recordWriter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.match(HiveParser.KW_RECORDWRITER)
            self.state = 2181
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatSerdeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormatSerde

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)




    def rowFormatSerde(self):

        localctx = HiveParser.RowFormatSerdeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_rowFormatSerde)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            self.match(HiveParser.KW_ROW)
            self.state = 2184
            self.match(HiveParser.KW_FORMAT)
            self.state = 2185
            self.match(HiveParser.KW_SERDE)
            self.state = 2186
            self.match(HiveParser.StringLiteral)
            self.state = 2190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 2187
                self.match(HiveParser.KW_WITH)
                self.state = 2188
                self.match(HiveParser.KW_SERDEPROPERTIES)
                self.state = 2189
                self.tableProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatDelimitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_DELIMITED(self):
            return self.getToken(HiveParser.KW_DELIMITED, 0)

        def tableRowFormatFieldIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatFieldIdentifierContext,0)


        def tableRowFormatCollItemsIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatCollItemsIdentifierContext,0)


        def tableRowFormatMapKeysIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatMapKeysIdentifierContext,0)


        def tableRowFormatLinesIdentifier(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatLinesIdentifierContext,0)


        def tableRowNullFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowNullFormatContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_rowFormatDelimited

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)




    def rowFormatDelimited(self):

        localctx = HiveParser.RowFormatDelimitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_rowFormatDelimited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2192
            self.match(HiveParser.KW_ROW)
            self.state = 2193
            self.match(HiveParser.KW_FORMAT)
            self.state = 2194
            self.match(HiveParser.KW_DELIMITED)
            self.state = 2196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_FIELDS:
                self.state = 2195
                self.tableRowFormatFieldIdentifier()


            self.state = 2199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COLLECTION:
                self.state = 2198
                self.tableRowFormatCollItemsIdentifier()


            self.state = 2202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 2201
                self.tableRowFormatMapKeysIdentifier()


            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LINES:
                self.state = 2204
                self.tableRowFormatLinesIdentifier()


            self.state = 2208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NULL:
                self.state = 2207
                self.tableRowNullFormat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowFormatDelimited(self):
            return self.getTypedRuleContext(HiveParser.RowFormatDelimitedContext,0)


        def rowFormatSerde(self):
            return self.getTypedRuleContext(HiveParser.RowFormatSerdeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRowFormat" ):
                return visitor.visitTableRowFormat(self)
            else:
                return visitor.visitChildren(self)




    def tableRowFormat(self):

        localctx = HiveParser.TableRowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_tableRowFormat)
        try:
            self.state = 2212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2210
                self.rowFormatDelimited()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2211
                self.rowFormatSerde()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesPrefixedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePropertiesPrefixed

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertiesPrefixed" ):
                return visitor.visitTablePropertiesPrefixed(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertiesPrefixed(self):

        localctx = HiveParser.TablePropertiesPrefixedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_tablePropertiesPrefixed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.match(HiveParser.KW_TBLPROPERTIES)
            self.state = 2215
            self.tableProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def tablePropertiesList(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableProperties

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperties" ):
                return visitor.visitTableProperties(self)
            else:
                return visitor.visitChildren(self)




    def tableProperties(self):

        localctx = HiveParser.TablePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_tableProperties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(HiveParser.LPAREN)
            self.state = 2218
            self.tablePropertiesList()
            self.state = 2219
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValueProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyValuePropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyValuePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def keyProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.KeyPropertyContext)
            else:
                return self.getTypedRuleContext(HiveParser.KeyPropertyContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_tablePropertiesList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertiesList" ):
                return visitor.visitTablePropertiesList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertiesList(self):

        localctx = HiveParser.TablePropertiesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_tablePropertiesList)
        self._la = 0 # Token type
        try:
            self.state = 2237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2221
                self.keyValueProperty()
                self.state = 2226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 2222
                    self.match(HiveParser.COMMA)
                    self.state = 2223
                    self.keyValueProperty()
                    self.state = 2228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2229
                self.keyProperty()
                self.state = 2234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 2230
                    self.match(HiveParser.COMMA)
                    self.state = 2231
                    self.keyProperty()
                    self.state = 2236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValuePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_keyValueProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValueProperty" ):
                return visitor.visitKeyValueProperty(self)
            else:
                return visitor.visitChildren(self)




    def keyValueProperty(self):

        localctx = HiveParser.KeyValuePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_keyValueProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.match(HiveParser.StringLiteral)
            self.state = 2240
            self.match(HiveParser.EQUAL)
            self.state = 2241
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_keyProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyProperty" ):
                return visitor.visitKeyProperty(self)
            else:
                return visitor.visitChildren(self)




    def keyProperty(self):

        localctx = HiveParser.KeyPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_keyProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2243
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatFieldIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(HiveParser.KW_FIELDS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_BY)
            else:
                return self.getToken(HiveParser.KW_BY, i)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_ESCAPED(self):
            return self.getToken(HiveParser.KW_ESCAPED, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatFieldIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRowFormatFieldIdentifier" ):
                return visitor.visitTableRowFormatFieldIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableRowFormatFieldIdentifier(self):

        localctx = HiveParser.TableRowFormatFieldIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_tableRowFormatFieldIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.match(HiveParser.KW_FIELDS)
            self.state = 2246
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2247
            self.match(HiveParser.KW_BY)
            self.state = 2248
            self.match(HiveParser.StringLiteral)
            self.state = 2252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ESCAPED:
                self.state = 2249
                self.match(HiveParser.KW_ESCAPED)
                self.state = 2250
                self.match(HiveParser.KW_BY)
                self.state = 2251
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatCollItemsIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COLLECTION(self):
            return self.getToken(HiveParser.KW_COLLECTION, 0)

        def KW_ITEMS(self):
            return self.getToken(HiveParser.KW_ITEMS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatCollItemsIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRowFormatCollItemsIdentifier" ):
                return visitor.visitTableRowFormatCollItemsIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableRowFormatCollItemsIdentifier(self):

        localctx = HiveParser.TableRowFormatCollItemsIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_tableRowFormatCollItemsIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.match(HiveParser.KW_COLLECTION)
            self.state = 2255
            self.match(HiveParser.KW_ITEMS)
            self.state = 2256
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2257
            self.match(HiveParser.KW_BY)
            self.state = 2258
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatMapKeysIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_KEYS(self):
            return self.getToken(HiveParser.KW_KEYS, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatMapKeysIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRowFormatMapKeysIdentifier" ):
                return visitor.visitTableRowFormatMapKeysIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableRowFormatMapKeysIdentifier(self):

        localctx = HiveParser.TableRowFormatMapKeysIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_tableRowFormatMapKeysIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self.match(HiveParser.KW_MAP)
            self.state = 2261
            self.match(HiveParser.KW_KEYS)
            self.state = 2262
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2263
            self.match(HiveParser.KW_BY)
            self.state = 2264
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowFormatLinesIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LINES(self):
            return self.getToken(HiveParser.KW_LINES, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowFormatLinesIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRowFormatLinesIdentifier" ):
                return visitor.visitTableRowFormatLinesIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableRowFormatLinesIdentifier(self):

        localctx = HiveParser.TableRowFormatLinesIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_tableRowFormatLinesIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2266
            self.match(HiveParser.KW_LINES)
            self.state = 2267
            self.match(HiveParser.KW_TERMINATED)
            self.state = 2268
            self.match(HiveParser.KW_BY)
            self.state = 2269
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRowNullFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableRowNullFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRowNullFormat" ):
                return visitor.visitTableRowNullFormat(self)
            else:
                return visitor.visitChildren(self)




    def tableRowNullFormat(self):

        localctx = HiveParser.TableRowNullFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_tableRowNullFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self.match(HiveParser.KW_NULL)
            self.state = 2272
            self.match(HiveParser.KW_DEFINED)
            self.state = 2273
            self.match(HiveParser.KW_AS)
            self.state = 2274
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def tableFileFormat(self):

        localctx = HiveParser.TableFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_tableFileFormat)
        self._la = 0 # Token type
        try:
            self.state = 2299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2276
                self.match(HiveParser.KW_STORED)
                self.state = 2277
                self.match(HiveParser.KW_AS)
                self.state = 2278
                self.match(HiveParser.KW_INPUTFORMAT)
                self.state = 2279
                self.match(HiveParser.StringLiteral)
                self.state = 2280
                self.match(HiveParser.KW_OUTPUTFORMAT)
                self.state = 2281
                self.match(HiveParser.StringLiteral)
                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_INPUTDRIVER:
                    self.state = 2282
                    self.match(HiveParser.KW_INPUTDRIVER)
                    self.state = 2283
                    self.match(HiveParser.StringLiteral)
                    self.state = 2284
                    self.match(HiveParser.KW_OUTPUTDRIVER)
                    self.state = 2285
                    self.match(HiveParser.StringLiteral)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2288
                self.match(HiveParser.KW_STORED)
                self.state = 2289
                self.match(HiveParser.KW_BY)
                self.state = 2290
                self.match(HiveParser.StringLiteral)
                self.state = 2294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 2291
                    self.match(HiveParser.KW_WITH)
                    self.state = 2292
                    self.match(HiveParser.KW_SERDEPROPERTIES)
                    self.state = 2293
                    self.tableProperties()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2296
                self.match(HiveParser.KW_STORED)
                self.state = 2297
                self.match(HiveParser.KW_AS)
                self.state = 2298
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableLocation" ):
                return visitor.visitTableLocation(self)
            else:
                return visitor.visitChildren(self)




    def tableLocation(self):

        localctx = HiveParser.TableLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_tableLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.match(HiveParser.KW_LOCATION)
            self.state = 2302
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameTypeList" ):
                return visitor.visitColumnNameTypeList(self)
            else:
                return visitor.visitChildren(self)




    def columnNameTypeList(self):

        localctx = HiveParser.ColumnNameTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_columnNameTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2304
            self.columnNameType()
            self.state = 2309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2305
                    self.match(HiveParser.COMMA)
                    self.state = 2306
                    self.columnNameType() 
                self.state = 2311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeOrConstraintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameTypeOrConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameTypeOrConstraintContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameTypeOrConstraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeOrConstraintList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameTypeOrConstraintList" ):
                return visitor.visitColumnNameTypeOrConstraintList(self)
            else:
                return visitor.visitChildren(self)




    def columnNameTypeOrConstraintList(self):

        localctx = HiveParser.ColumnNameTypeOrConstraintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_columnNameTypeOrConstraintList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2312
            self.columnNameTypeOrConstraint()
            self.state = 2317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2313
                self.match(HiveParser.COMMA)
                self.state = 2314
                self.columnNameTypeOrConstraint()
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameColonTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameColonType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameColonTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameColonTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameColonTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameColonTypeList" ):
                return visitor.visitColumnNameColonTypeList(self)
            else:
                return visitor.visitChildren(self)




    def columnNameColonTypeList(self):

        localctx = HiveParser.ColumnNameColonTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_columnNameColonTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.columnNameColonType()
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2321
                self.match(HiveParser.COMMA)
                self.state = 2322
                self.columnNameColonType()
                self.state = 2327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameList" ):
                return visitor.visitColumnNameList(self)
            else:
                return visitor.visitChildren(self)




    def columnNameList(self):

        localctx = HiveParser.ColumnNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_columnNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.columnName()
            self.state = 2333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2329
                self.match(HiveParser.COMMA)
                self.state = 2330
                self.columnName()
                self.state = 2335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnName" ):
                return visitor.visitColumnName(self)
            else:
                return visitor.visitChildren(self)




    def columnName(self):

        localctx = HiveParser.ColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_columnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def KW_ELEM_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ELEM_TYPE)
            else:
                return self.getToken(HiveParser.KW_ELEM_TYPE, i)

        def KW_KEY_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_KEY_TYPE)
            else:
                return self.getToken(HiveParser.KW_KEY_TYPE, i)

        def KW_VALUE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_VALUE_TYPE)
            else:
                return self.getToken(HiveParser.KW_VALUE_TYPE, i)

        def getRuleIndex(self):
            return HiveParser.RULE_extColumnName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtColumnName" ):
                return visitor.visitExtColumnName(self)
            else:
                return visitor.visitChildren(self)




    def extColumnName(self):

        localctx = HiveParser.ExtColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_extColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.identifier()
            self.state = 2348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.DOT:
                self.state = 2339
                self.match(HiveParser.DOT)
                self.state = 2344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 2340
                    self.match(HiveParser.KW_ELEM_TYPE)
                    pass

                elif la_ == 2:
                    self.state = 2341
                    self.match(HiveParser.KW_KEY_TYPE)
                    pass

                elif la_ == 3:
                    self.state = 2342
                    self.match(HiveParser.KW_VALUE_TYPE)
                    pass

                elif la_ == 4:
                    self.state = 2343
                    self.identifier()
                    pass


                self.state = 2350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameOrderList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameOrderList" ):
                return visitor.visitColumnNameOrderList(self)
            else:
                return visitor.visitChildren(self)




    def columnNameOrderList(self):

        localctx = HiveParser.ColumnNameOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_columnNameOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2351
            self.columnNameOrder()
            self.state = 2356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2352
                self.match(HiveParser.COMMA)
                self.state = 2353
                self.columnNameOrder()
                self.state = 2358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnParenthesesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnParenthesesList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnParenthesesList" ):
                return visitor.visitColumnParenthesesList(self)
            else:
                return visitor.visitChildren(self)




    def columnParenthesesList(self):

        localctx = HiveParser.ColumnParenthesesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_columnParenthesesList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.match(HiveParser.LPAREN)
            self.state = 2360
            self.columnNameList()
            self.state = 2361
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableValidateSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableSpecificationContext,0)


        def validateSpecification(self):
            return self.getTypedRuleContext(HiveParser.ValidateSpecificationContext,0)


        def enforcedSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnforcedSpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_enableValidateSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnableValidateSpecification" ):
                return visitor.visitEnableValidateSpecification(self)
            else:
                return visitor.visitChildren(self)




    def enableValidateSpecification(self):

        localctx = HiveParser.EnableValidateSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_enableValidateSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ENABLE, HiveParser.KW_DISABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2363
                self.enableSpecification()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_VALIDATE or _la==HiveParser.KW_NOVALIDATE:
                    self.state = 2364
                    self.validateSpecification()


                pass
            elif token in [HiveParser.KW_NOT, HiveParser.KW_ENFORCED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2367
                self.enforcedSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enableSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnableSpecification" ):
                return visitor.visitEnableSpecification(self)
            else:
                return visitor.visitChildren(self)




    def enableSpecification(self):

        localctx = HiveParser.EnableSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_enableSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2370
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValidateSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_NOVALIDATE(self):
            return self.getToken(HiveParser.KW_NOVALIDATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_validateSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValidateSpecification" ):
                return visitor.visitValidateSpecification(self)
            else:
                return visitor.visitChildren(self)




    def validateSpecification(self):

        localctx = HiveParser.ValidateSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_validateSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_VALIDATE or _la==HiveParser.KW_NOVALIDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnforcedSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENFORCED(self):
            return self.getToken(HiveParser.KW_ENFORCED, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_enforcedSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnforcedSpecification" ):
                return visitor.visitEnforcedSpecification(self)
            else:
                return visitor.visitChildren(self)




    def enforcedSpecification(self):

        localctx = HiveParser.EnforcedSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_enforcedSpecification)
        try:
            self.state = 2377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ENFORCED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2374
                self.match(HiveParser.KW_ENFORCED)
                pass
            elif token in [HiveParser.KW_NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2375
                self.match(HiveParser.KW_NOT)
                self.state = 2376
                self.match(HiveParser.KW_ENFORCED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RELY(self):
            return self.getToken(HiveParser.KW_RELY, 0)

        def KW_NORELY(self):
            return self.getToken(HiveParser.KW_NORELY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_relySpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelySpecification" ):
                return visitor.visitRelySpecification(self)
            else:
                return visitor.visitChildren(self)




    def relySpecification(self):

        localctx = HiveParser.RelySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_relySpecification)
        self._la = 0 # Token type
        try:
            self.state = 2383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_RELY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2379
                self.match(HiveParser.KW_RELY)
                pass
            elif token in [HiveParser.EOF, HiveParser.KW_DESC, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_COMMENT, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_EXPLAIN, HiveParser.KW_WITH, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_TRUNCATE, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_NORELY, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.COMMA, HiveParser.SEMICOLON, HiveParser.LPAREN, HiveParser.RPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_NORELY:
                    self.state = 2380
                    self.match(HiveParser.KW_NORELY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pkConstraint(self):
            return self.getTypedRuleContext(HiveParser.PkConstraintContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateConstraint" ):
                return visitor.visitCreateConstraint(self)
            else:
                return visitor.visitChildren(self)




    def createConstraint(self):

        localctx = HiveParser.CreateConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_createConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CONSTRAINT:
                self.state = 2385
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2386
                self.identifier()


            self.state = 2389
            self.pkConstraint()
            self.state = 2391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2390
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterConstraintWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def pkConstraint(self):
            return self.getTypedRuleContext(HiveParser.PkConstraintContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterConstraintWithName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterConstraintWithName" ):
                return visitor.visitAlterConstraintWithName(self)
            else:
                return visitor.visitChildren(self)




    def alterConstraintWithName(self):

        localctx = HiveParser.AlterConstraintWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_alterConstraintWithName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 2394
            self.identifier()
            self.state = 2395
            self.pkConstraint()
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2396
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PkConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pkCols = None # ColumnParenthesesListContext

        def tableConstraintPrimaryKey(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintPrimaryKeyContext,0)


        def columnParenthesesList(self):
            return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_pkConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPkConstraint" ):
                return visitor.visitPkConstraint(self)
            else:
                return visitor.visitChildren(self)




    def pkConstraint(self):

        localctx = HiveParser.PkConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_pkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2399
            self.tableConstraintPrimaryKey()
            self.state = 2400
            localctx.pkCols = self.columnParenthesesList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateForeignKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOREIGN(self):
            return self.getToken(HiveParser.KW_FOREIGN, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_createForeignKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateForeignKey" ):
                return visitor.visitCreateForeignKey(self)
            else:
                return visitor.visitChildren(self)




    def createForeignKey(self):

        localctx = HiveParser.CreateForeignKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_createForeignKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CONSTRAINT:
                self.state = 2402
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2403
                self.identifier()


            self.state = 2406
            self.match(HiveParser.KW_FOREIGN)
            self.state = 2407
            self.match(HiveParser.KW_KEY)
            self.state = 2408
            self.columnParenthesesList()
            self.state = 2409
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2410
            self.tableName()
            self.state = 2411
            self.columnParenthesesList()
            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2412
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterForeignKeyWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_FOREIGN(self):
            return self.getToken(HiveParser.KW_FOREIGN, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterForeignKeyWithName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterForeignKeyWithName" ):
                return visitor.visitAlterForeignKeyWithName(self)
            else:
                return visitor.visitChildren(self)




    def alterForeignKeyWithName(self):

        localctx = HiveParser.AlterForeignKeyWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_alterForeignKeyWithName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            self.match(HiveParser.KW_CONSTRAINT)
            self.state = 2416
            self.identifier()
            self.state = 2417
            self.match(HiveParser.KW_FOREIGN)
            self.state = 2418
            self.match(HiveParser.KW_KEY)
            self.state = 2419
            self.columnParenthesesList()
            self.state = 2420
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2421
            self.tableName()
            self.state = 2422
            self.columnParenthesesList()
            self.state = 2424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2423
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedValueElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValues(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuesContext,0)


        def skewedColumnValuePairList(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedValueElement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedValueElement" ):
                return visitor.visitSkewedValueElement(self)
            else:
                return visitor.visitChildren(self)




    def skewedValueElement(self):

        localctx = HiveParser.SkewedValueElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_skewedValueElement)
        try:
            self.state = 2428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_TRUE, HiveParser.KW_FALSE, HiveParser.KW_NULL, HiveParser.KW_DATE, HiveParser.KW_TIMESTAMP, HiveParser.KW_TIMESTAMPLOCALTZ, HiveParser.KW_CURRENT_DATE, HiveParser.KW_CURRENT_TIMESTAMP, HiveParser.StringLiteral, HiveParser.IntegralLiteral, HiveParser.NumberLiteral, HiveParser.Number, HiveParser.CharSetName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2426
                self.skewedColumnValues()
                pass
            elif token in [HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2427
                self.skewedColumnValuePairList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedColumnValuePairContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValuePairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedColumnValuePairList" ):
                return visitor.visitSkewedColumnValuePairList(self)
            else:
                return visitor.visitChildren(self)




    def skewedColumnValuePairList(self):

        localctx = HiveParser.SkewedColumnValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_skewedColumnValuePairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.skewedColumnValuePair()
            self.state = 2435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2431
                self.match(HiveParser.COMMA)
                self.state = 2432
                self.skewedColumnValuePair()
                self.state = 2437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def skewedColumnValues(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuesContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValuePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedColumnValuePair" ):
                return visitor.visitSkewedColumnValuePair(self)
            else:
                return visitor.visitChildren(self)




    def skewedColumnValuePair(self):

        localctx = HiveParser.SkewedColumnValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_skewedColumnValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.match(HiveParser.LPAREN)
            self.state = 2439
            self.skewedColumnValues()
            self.state = 2440
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SkewedColumnValueContext)
            else:
                return self.getTypedRuleContext(HiveParser.SkewedColumnValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValues

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedColumnValues" ):
                return visitor.visitSkewedColumnValues(self)
            else:
                return visitor.visitChildren(self)




    def skewedColumnValues(self):

        localctx = HiveParser.SkewedColumnValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_skewedColumnValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2442
            self.skewedColumnValue()
            self.state = 2447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2443
                self.match(HiveParser.COMMA)
                self.state = 2444
                self.skewedColumnValue()
                self.state = 2449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedColumnValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedColumnValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedColumnValue" ):
                return visitor.visitSkewedColumnValue(self)
            else:
                return visitor.visitChildren(self)




    def skewedColumnValue(self):

        localctx = HiveParser.SkewedColumnValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_skewedColumnValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewedValueLocationElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def skewedColumnValue(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValueContext,0)


        def skewedColumnValuePair(self):
            return self.getTypedRuleContext(HiveParser.SkewedColumnValuePairContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_skewedValueLocationElement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewedValueLocationElement" ):
                return visitor.visitSkewedValueLocationElement(self)
            else:
                return visitor.visitChildren(self)




    def skewedValueLocationElement(self):

        localctx = HiveParser.SkewedValueLocationElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_skewedValueLocationElement)
        try:
            self.state = 2454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_TRUE, HiveParser.KW_FALSE, HiveParser.KW_NULL, HiveParser.KW_DATE, HiveParser.KW_TIMESTAMP, HiveParser.KW_TIMESTAMPLOCALTZ, HiveParser.KW_CURRENT_DATE, HiveParser.KW_CURRENT_TIMESTAMP, HiveParser.StringLiteral, HiveParser.IntegralLiteral, HiveParser.NumberLiteral, HiveParser.Number, HiveParser.CharSetName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.skewedColumnValue()
                pass
            elif token in [HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.skewedColumnValuePair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_orderSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderSpecification" ):
                return visitor.visitOrderSpecification(self)
            else:
                return visitor.visitChildren(self)




    def orderSpecification(self):

        localctx = HiveParser.OrderSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_orderSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2456
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_ASC or _la==HiveParser.KW_DESC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_LAST(self):
            return self.getToken(HiveParser.KW_LAST, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nullOrdering

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullOrdering" ):
                return visitor.visitNullOrdering(self)
            else:
                return visitor.visitChildren(self)




    def nullOrdering(self):

        localctx = HiveParser.NullOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_nullOrdering)
        try:
            self.state = 2462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2458
                self.match(HiveParser.KW_NULLS)
                self.state = 2459
                self.match(HiveParser.KW_FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2460
                self.match(HiveParser.KW_NULLS)
                self.state = 2461
                self.match(HiveParser.KW_LAST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def orderSpecification(self):
            return self.getTypedRuleContext(HiveParser.OrderSpecificationContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(HiveParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameOrder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameOrder" ):
                return visitor.visitColumnNameOrder(self)
            else:
                return visitor.visitChildren(self)




    def columnNameOrder(self):

        localctx = HiveParser.ColumnNameOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_columnNameOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            self.identifier()
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ASC or _la==HiveParser.KW_DESC:
                self.state = 2465
                self.orderSpecification()


            self.state = 2469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NULLS:
                self.state = 2468
                self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnNameComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnNameCommentContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnNameCommentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameCommentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameCommentList" ):
                return visitor.visitColumnNameCommentList(self)
            else:
                return visitor.visitChildren(self)




    def columnNameCommentList(self):

        localctx = HiveParser.ColumnNameCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_columnNameCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            self.columnNameComment()
            self.state = 2476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2472
                self.match(HiveParser.COMMA)
                self.state = 2473
                self.columnNameComment()
                self.state = 2478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameComment" ):
                return visitor.visitColumnNameComment(self)
            else:
                return visitor.visitChildren(self)




    def columnNameComment(self):

        localctx = HiveParser.ColumnNameCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_columnNameComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.identifier()
            self.state = 2482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 2480
                self.match(HiveParser.KW_COMMENT)
                self.state = 2481
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def orderSpecification(self):
            return self.getTypedRuleContext(HiveParser.OrderSpecificationContext,0)


        def nullOrdering(self):
            return self.getTypedRuleContext(HiveParser.NullOrderingContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnRefOrder" ):
                return visitor.visitColumnRefOrder(self)
            else:
                return visitor.visitChildren(self)




    def columnRefOrder(self):

        localctx = HiveParser.ColumnRefOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_columnRefOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2484
            self.expression(0)
            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.state = 2485
                self.orderSpecification()


            self.state = 2489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NULLS:
                self.state = 2488
                self.nullOrdering()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameType" ):
                return visitor.visitColumnNameType(self)
            else:
                return visitor.visitChildren(self)




    def columnNameType(self):

        localctx = HiveParser.ColumnNameTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_columnNameType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491
            self.identifier()
            self.state = 2492
            self.colType()
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 2493
                self.match(HiveParser.KW_COMMENT)
                self.state = 2494
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeOrConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraint(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintContext,0)


        def columnNameTypeConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeOrConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameTypeOrConstraint" ):
                return visitor.visitColumnNameTypeOrConstraint(self)
            else:
                return visitor.visitChildren(self)




    def columnNameTypeOrConstraint(self):

        localctx = HiveParser.ColumnNameTypeOrConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_columnNameTypeOrConstraint)
        try:
            self.state = 2499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_PRIMARY, HiveParser.KW_FOREIGN, HiveParser.KW_CONSTRAINT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2497
                self.tableConstraint()
                pass
            elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2498
                self.columnNameTypeConstraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createForeignKey(self):
            return self.getTypedRuleContext(HiveParser.CreateForeignKeyContext,0)


        def createConstraint(self):
            return self.getTypedRuleContext(HiveParser.CreateConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableConstraint" ):
                return visitor.visitTableConstraint(self)
            else:
                return visitor.visitChildren(self)




    def tableConstraint(self):

        localctx = HiveParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_tableConstraint)
        try:
            self.state = 2503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2501
                self.createForeignKey()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2502
                self.createConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameTypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def columnConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColumnConstraintContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameTypeConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameTypeConstraint" ):
                return visitor.visitColumnNameTypeConstraint(self)
            else:
                return visitor.visitChildren(self)




    def columnNameTypeConstraint(self):

        localctx = HiveParser.ColumnNameTypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_columnNameTypeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self.identifier()
            self.state = 2506
            self.colType()
            self.state = 2508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (HiveParser.KW_PRIMARY - 298)) | (1 << (HiveParser.KW_REFERENCES - 298)) | (1 << (HiveParser.KW_CONSTRAINT - 298)))) != 0):
                self.state = 2507
                self.columnConstraint()


            self.state = 2512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 2510
                self.match(HiveParser.KW_COMMENT)
                self.state = 2511
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreignKeyConstraint(self):
            return self.getTypedRuleContext(HiveParser.ForeignKeyConstraintContext,0)


        def colConstraint(self):
            return self.getTypedRuleContext(HiveParser.ColConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnConstraint" ):
                return visitor.visitColumnConstraint(self)
            else:
                return visitor.visitChildren(self)




    def columnConstraint(self):

        localctx = HiveParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_columnConstraint)
        try:
            self.state = 2516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2514
                self.foreignKeyConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2515
                self.colConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeignKeyConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_foreignKeyConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeignKeyConstraint" ):
                return visitor.visitForeignKeyConstraint(self)
            else:
                return visitor.visitChildren(self)




    def foreignKeyConstraint(self):

        localctx = HiveParser.ForeignKeyConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_foreignKeyConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CONSTRAINT:
                self.state = 2518
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2519
                self.identifier()


            self.state = 2522
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2523
            self.tableName()
            self.state = 2524
            self.match(HiveParser.LPAREN)
            self.state = 2525
            self.columnName()
            self.state = 2526
            self.match(HiveParser.RPAREN)
            self.state = 2528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2527
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraintPrimaryKey(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintPrimaryKeyContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsCreate(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsCreateContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_colConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColConstraint" ):
                return visitor.visitColConstraint(self)
            else:
                return visitor.visitChildren(self)




    def colConstraint(self):

        localctx = HiveParser.ColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_colConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CONSTRAINT:
                self.state = 2530
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2531
                self.identifier()


            self.state = 2534
            self.tableConstraintPrimaryKey()
            self.state = 2536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2535
                self.constraintOptsCreate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterForeignKeyConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterForeignKeyConstraintContext,0)


        def alterColConstraint(self):
            return self.getTypedRuleContext(HiveParser.AlterColConstraintContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterColumnConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnConstraint" ):
                return visitor.visitAlterColumnConstraint(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnConstraint(self):

        localctx = HiveParser.AlterColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_alterColumnConstraint)
        try:
            self.state = 2540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2538
                self.alterForeignKeyConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2539
                self.alterColConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterForeignKeyConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REFERENCES(self):
            return self.getToken(HiveParser.KW_REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnName(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterForeignKeyConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterForeignKeyConstraint" ):
                return visitor.visitAlterForeignKeyConstraint(self)
            else:
                return visitor.visitChildren(self)




    def alterForeignKeyConstraint(self):

        localctx = HiveParser.AlterForeignKeyConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_alterForeignKeyConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CONSTRAINT:
                self.state = 2542
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2543
                self.identifier()


            self.state = 2546
            self.match(HiveParser.KW_REFERENCES)
            self.state = 2547
            self.tableName()
            self.state = 2548
            self.match(HiveParser.LPAREN)
            self.state = 2549
            self.columnName()
            self.state = 2550
            self.match(HiveParser.RPAREN)
            self.state = 2552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2551
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableConstraintPrimaryKey(self):
            return self.getTypedRuleContext(HiveParser.TableConstraintPrimaryKeyContext,0)


        def KW_CONSTRAINT(self):
            return self.getToken(HiveParser.KW_CONSTRAINT, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def constraintOptsAlter(self):
            return self.getTypedRuleContext(HiveParser.ConstraintOptsAlterContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_alterColConstraint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColConstraint" ):
                return visitor.visitAlterColConstraint(self)
            else:
                return visitor.visitChildren(self)




    def alterColConstraint(self):

        localctx = HiveParser.AlterColConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_alterColConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CONSTRAINT:
                self.state = 2554
                self.match(HiveParser.KW_CONSTRAINT)
                self.state = 2555
                self.identifier()


            self.state = 2558
            self.tableConstraintPrimaryKey()
            self.state = 2560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_NOT or _la==HiveParser.KW_ENABLE or _la==HiveParser.KW_DISABLE or _la==HiveParser.KW_ENFORCED:
                self.state = 2559
                self.constraintOptsAlter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintPrimaryKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PRIMARY(self):
            return self.getToken(HiveParser.KW_PRIMARY, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableConstraintPrimaryKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableConstraintPrimaryKey" ):
                return visitor.visitTableConstraintPrimaryKey(self)
            else:
                return visitor.visitChildren(self)




    def tableConstraintPrimaryKey(self):

        localctx = HiveParser.TableConstraintPrimaryKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_tableConstraintPrimaryKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.match(HiveParser.KW_PRIMARY)
            self.state = 2563
            self.match(HiveParser.KW_KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintOptsCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableValidateSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableValidateSpecificationContext,0)


        def relySpecification(self):
            return self.getTypedRuleContext(HiveParser.RelySpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constraintOptsCreate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintOptsCreate" ):
                return visitor.visitConstraintOptsCreate(self)
            else:
                return visitor.visitChildren(self)




    def constraintOptsCreate(self):

        localctx = HiveParser.ConstraintOptsCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_constraintOptsCreate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            self.enableValidateSpecification()
            self.state = 2566
            self.relySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintOptsAlterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enableValidateSpecification(self):
            return self.getTypedRuleContext(HiveParser.EnableValidateSpecificationContext,0)


        def relySpecification(self):
            return self.getTypedRuleContext(HiveParser.RelySpecificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_constraintOptsAlter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintOptsAlter" ):
                return visitor.visitConstraintOptsAlter(self)
            else:
                return visitor.visitChildren(self)




    def constraintOptsAlter(self):

        localctx = HiveParser.ConstraintOptsAlterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_constraintOptsAlter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2568
            self.enableValidateSpecification()
            self.state = 2569
            self.relySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameColonTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HiveParser.COLON, 0)

        def colType(self):
            return self.getTypedRuleContext(HiveParser.ColTypeContext,0)


        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_columnNameColonType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnNameColonType" ):
                return visitor.visitColumnNameColonType(self)
            else:
                return visitor.visitChildren(self)




    def columnNameColonType(self):

        localctx = HiveParser.ColumnNameColonTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_columnNameColonType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2571
            self.identifier()
            self.state = 2572
            self.match(HiveParser.COLON)
            self.state = 2573
            self.colType()
            self.state = 2576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_COMMENT:
                self.state = 2574
                self.match(HiveParser.KW_COMMENT)
                self.state = 2575
                self.match(HiveParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_db_col(self):
            return self.getTypedRuleContext(HiveParser.Type_db_colContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_colType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = HiveParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self.type_db_col()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_colTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = HiveParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_colTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self.colType()
            self.state = 2585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2581
                self.match(HiveParser.COMMA)
                self.state = 2582
                self.colType()
                self.state = 2587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_db_colContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def listType(self):
            return self.getTypedRuleContext(HiveParser.ListTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(HiveParser.StructTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(HiveParser.MapTypeContext,0)


        def unionType(self):
            return self.getTypedRuleContext(HiveParser.UnionTypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_type_db_col

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_db_col" ):
                return visitor.visitType_db_col(self)
            else:
                return visitor.visitChildren(self)




    def type_db_col(self):

        localctx = HiveParser.Type_db_colContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_type_db_col)
        try:
            self.state = 2593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_BOOLEAN, HiveParser.KW_TINYINT, HiveParser.KW_SMALLINT, HiveParser.KW_INT, HiveParser.KW_BIGINT, HiveParser.KW_FLOAT, HiveParser.KW_DOUBLE, HiveParser.KW_DATE, HiveParser.KW_DATETIME, HiveParser.KW_TIMESTAMP, HiveParser.KW_TIMESTAMPLOCALTZ, HiveParser.KW_DECIMAL, HiveParser.KW_STRING, HiveParser.KW_CHAR, HiveParser.KW_VARCHAR, HiveParser.KW_LONG, HiveParser.KW_BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2588
                self.primitiveType()
                pass
            elif token in [HiveParser.KW_ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2589
                self.listType()
                pass
            elif token in [HiveParser.KW_STRUCT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2590
                self.structType()
                pass
            elif token in [HiveParser.KW_MAP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2591
                self.mapType()
                pass
            elif token in [HiveParser.KW_UNIONTYPE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2592
                self.unionType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_LONG(self):
            return self.getToken(HiveParser.KW_LONG, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_PRECISION(self):
            return self.getToken(HiveParser.KW_PRECISION, 0)

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def KW_DATETIME(self):
            return self.getToken(HiveParser.KW_DATETIME, 0)

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def KW_TIMESTAMPLOCALTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0)

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def KW_TIME(self):
            return self.getToken(HiveParser.KW_TIME, 0)

        def KW_ZONE(self):
            return self.getToken(HiveParser.KW_ZONE, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_DECIMAL(self):
            return self.getToken(HiveParser.KW_DECIMAL, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_VARCHAR(self):
            return self.getToken(HiveParser.KW_VARCHAR, 0)

        def KW_CHAR(self):
            return self.getToken(HiveParser.KW_CHAR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_primitiveType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = HiveParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.state = 2635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2595
                self.match(HiveParser.KW_TINYINT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2596
                self.match(HiveParser.KW_SMALLINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2597
                self.match(HiveParser.KW_INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2598
                self.match(HiveParser.KW_LONG)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2599
                self.match(HiveParser.KW_BIGINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2600
                self.match(HiveParser.KW_BOOLEAN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2601
                self.match(HiveParser.KW_FLOAT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2602
                self.match(HiveParser.KW_DOUBLE)
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_PRECISION:
                    self.state = 2603
                    self.match(HiveParser.KW_PRECISION)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2606
                self.match(HiveParser.KW_DATE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2607
                self.match(HiveParser.KW_DATETIME)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2608
                self.match(HiveParser.KW_TIMESTAMP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2609
                self.match(HiveParser.KW_TIMESTAMPLOCALTZ)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2610
                self.match(HiveParser.KW_TIMESTAMP)
                self.state = 2611
                self.match(HiveParser.KW_WITH)
                self.state = 2612
                self.match(HiveParser.KW_LOCAL)
                self.state = 2613
                self.match(HiveParser.KW_TIME)
                self.state = 2614
                self.match(HiveParser.KW_ZONE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2615
                self.match(HiveParser.KW_STRING)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2616
                self.match(HiveParser.KW_BINARY)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2617
                self.match(HiveParser.KW_DECIMAL)
                self.state = 2625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2618
                    self.match(HiveParser.LPAREN)
                    self.state = 2619
                    self.match(HiveParser.Number)
                    self.state = 2622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==HiveParser.COMMA:
                        self.state = 2620
                        self.match(HiveParser.COMMA)
                        self.state = 2621
                        self.match(HiveParser.Number)


                    self.state = 2624
                    self.match(HiveParser.RPAREN)


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2627
                self.match(HiveParser.KW_VARCHAR)
                self.state = 2628
                self.match(HiveParser.LPAREN)
                self.state = 2629
                self.match(HiveParser.Number)
                self.state = 2630
                self.match(HiveParser.RPAREN)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2631
                self.match(HiveParser.KW_CHAR)
                self.state = 2632
                self.match(HiveParser.LPAREN)
                self.state = 2633
                self.match(HiveParser.Number)
                self.state = 2634
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def type_db_col(self):
            return self.getTypedRuleContext(HiveParser.Type_db_colContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_listType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListType" ):
                return visitor.visitListType(self)
            else:
                return visitor.visitChildren(self)




    def listType(self):

        localctx = HiveParser.ListTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_listType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.match(HiveParser.KW_ARRAY)
            self.state = 2638
            self.match(HiveParser.LESSTHAN)
            self.state = 2639
            self.type_db_col()
            self.state = 2640
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def columnNameColonTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameColonTypeListContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_structType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructType" ):
                return visitor.visitStructType(self)
            else:
                return visitor.visitChildren(self)




    def structType(self):

        localctx = HiveParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_structType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2642
            self.match(HiveParser.KW_STRUCT)
            self.state = 2643
            self.match(HiveParser.LESSTHAN)
            self.state = 2644
            self.columnNameColonTypeList()
            self.state = 2645
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def type_db_col(self):
            return self.getTypedRuleContext(HiveParser.Type_db_colContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_mapType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)




    def mapType(self):

        localctx = HiveParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2647
            self.match(HiveParser.KW_MAP)
            self.state = 2648
            self.match(HiveParser.LESSTHAN)
            self.state = 2649
            self.primitiveType()
            self.state = 2650
            self.match(HiveParser.COMMA)
            self.state = 2651
            self.type_db_col()
            self.state = 2652
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColTypeListContext,0)


        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_unionType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionType" ):
                return visitor.visitUnionType(self)
            else:
                return visitor.visitChildren(self)




    def unionType(self):

        localctx = HiveParser.UnionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_unionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2654
            self.match(HiveParser.KW_UNIONTYPE)
            self.state = 2655
            self.match(HiveParser.LESSTHAN)
            self.state = 2656
            self.colTypeList()
            self.state = 2657
            self.match(HiveParser.GREATERTHAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(HiveParser.KW_UNION, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_INTERSECT(self):
            return self.getToken(HiveParser.KW_INTERSECT, 0)

        def KW_EXCEPT(self):
            return self.getToken(HiveParser.KW_EXCEPT, 0)

        def KW_MINUS(self):
            return self.getToken(HiveParser.KW_MINUS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_setOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperator" ):
                return visitor.visitSetOperator(self)
            else:
                return visitor.visitChildren(self)




    def setOperator(self):

        localctx = HiveParser.SetOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_setOperator)
        self._la = 0 # Token type
        try:
            self.state = 2683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2659
                self.match(HiveParser.KW_UNION)
                self.state = 2660
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2661
                self.match(HiveParser.KW_UNION)
                self.state = 2663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_DISTINCT:
                    self.state = 2662
                    self.match(HiveParser.KW_DISTINCT)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2665
                self.match(HiveParser.KW_INTERSECT)
                self.state = 2666
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2667
                self.match(HiveParser.KW_INTERSECT)
                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_DISTINCT:
                    self.state = 2668
                    self.match(HiveParser.KW_DISTINCT)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2671
                self.match(HiveParser.KW_EXCEPT)
                self.state = 2672
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2673
                self.match(HiveParser.KW_EXCEPT)
                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_DISTINCT:
                    self.state = 2674
                    self.match(HiveParser.KW_DISTINCT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2677
                self.match(HiveParser.KW_MINUS)
                self.state = 2678
                self.match(HiveParser.KW_ALL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2679
                self.match(HiveParser.KW_MINUS)
                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_DISTINCT:
                    self.state = 2680
                    self.match(HiveParser.KW_DISTINCT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStatementExpressionBody(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionBodyContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HiveParser.WithClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_queryStatementExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryStatementExpression" ):
                return visitor.visitQueryStatementExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryStatementExpression(self):

        localctx = HiveParser.QueryStatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_queryStatementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WITH:
                self.state = 2685
                self.withClause()


            self.state = 2688
            self.queryStatementExpressionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromStatement(self):
            return self.getTypedRuleContext(HiveParser.FromStatementContext,0)


        def regularBody(self):
            return self.getTypedRuleContext(HiveParser.RegularBodyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_queryStatementExpressionBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryStatementExpressionBody" ):
                return visitor.visitQueryStatementExpressionBody(self)
            else:
                return visitor.visitChildren(self)




    def queryStatementExpressionBody(self):

        localctx = HiveParser.QueryStatementExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_queryStatementExpressionBody)
        try:
            self.state = 2692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2690
                self.fromStatement()
                pass
            elif token in [HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2691
                self.regularBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def cteStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.CteStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.CteStatementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HiveParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_withClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self.match(HiveParser.KW_WITH)
            self.state = 2695
            self.cteStatement()
            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2696
                self.match(HiveParser.COMMA)
                self.state = 2697
                self.cteStatement()
                self.state = 2702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_cteStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCteStatement" ):
                return visitor.visitCteStatement(self)
            else:
                return visitor.visitChildren(self)




    def cteStatement(self):

        localctx = HiveParser.CteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_cteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2703
            self.identifier()
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 2704
                self.match(HiveParser.KW_AS)


            self.state = 2707
            self.match(HiveParser.LPAREN)
            self.state = 2708
            self.queryStatementExpression()
            self.state = 2709
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleFromStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SingleFromStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.SingleFromStatementContext,i)


        def setOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SetOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.SetOperatorContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_fromStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = HiveParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_fromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2711
            self.singleFromStatement()
            self.state = 2717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.KW_UNION or _la==HiveParser.KW_EXCEPT or _la==HiveParser.KW_MINUS or _la==HiveParser.KW_INTERSECT:
                self.state = 2712
                self.setOperator()
                self.state = 2713
                self.singleFromStatement()
                self.state = 2719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(HiveParser.FromClauseContext,0)


        def body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.BodyContext)
            else:
                return self.getTypedRuleContext(HiveParser.BodyContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_singleFromStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFromStatement" ):
                return visitor.visitSingleFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleFromStatement(self):

        localctx = HiveParser.SingleFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_singleFromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            self.fromClause()
            self.state = 2722 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2721
                    self.body()

                else:
                    raise NoViableAltException(self)
                self.state = 2724 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegularBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertClause(self):
            return self.getTypedRuleContext(HiveParser.InsertClauseContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_regularBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularBody" ):
                return visitor.visitRegularBody(self)
            else:
                return visitor.visitChildren(self)




    def regularBody(self):

        localctx = HiveParser.RegularBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_regularBody)
        try:
            self.state = 2732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_INSERT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2726
                self.insertClause()
                self.state = 2729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.KW_SELECT, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.LPAREN]:
                    self.state = 2727
                    self.selectStatement()
                    pass
                elif token in [HiveParser.KW_VALUES]:
                    self.state = 2728
                    self.valuesClause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [HiveParser.KW_SELECT, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2731
                self.selectStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(HiveParser.SelectClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HiveParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HiveParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(HiveParser.HavingClauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(HiveParser.Window_clauseContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_atomSelectStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomSelectStatement" ):
                return visitor.visitAtomSelectStatement(self)
            else:
                return visitor.visitChildren(self)




    def atomSelectStatement(self):

        localctx = HiveParser.AtomSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_atomSelectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_SELECT, HiveParser.KW_MAP, HiveParser.KW_REDUCE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2734
                self.selectClause()
                self.state = 2736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2735
                    self.fromClause()


                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_WHERE:
                    self.state = 2738
                    self.whereClause()


                self.state = 2742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_GROUP:
                    self.state = 2741
                    self.groupByClause()


                self.state = 2745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_HAVING:
                    self.state = 2744
                    self.havingClause()


                self.state = 2748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_WINDOW:
                    self.state = 2747
                    self.window_clause()


                pass
            elif token in [HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2750
                self.match(HiveParser.LPAREN)
                self.state = 2751
                self.selectStatement()
                self.state = 2752
                self.match(HiveParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomSelectStatement(self):
            return self.getTypedRuleContext(HiveParser.AtomSelectStatementContext,0)


        def setOpSelectStatement(self):
            return self.getTypedRuleContext(HiveParser.SetOpSelectStatementContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStatement" ):
                return visitor.visitSelectStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectStatement(self):

        localctx = HiveParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self.atomSelectStatement()
            self.state = 2758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_UNION or _la==HiveParser.KW_EXCEPT or _la==HiveParser.KW_MINUS or _la==HiveParser.KW_INTERSECT:
                self.state = 2757
                self.setOpSelectStatement()


            self.state = 2761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ORDER:
                self.state = 2760
                self.orderByClause()


            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_CLUSTER:
                self.state = 2763
                self.clusterByClause()


            self.state = 2767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_DISTRIBUTE:
                self.state = 2766
                self.distributeByClause()


            self.state = 2770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_SORT:
                self.state = 2769
                self.sortByClause()


            self.state = 2773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_LIMIT:
                self.state = 2772
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOpSelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SetOperatorContext)
            else:
                return self.getTypedRuleContext(HiveParser.SetOperatorContext,i)


        def atomSelectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AtomSelectStatementContext)
            else:
                return self.getTypedRuleContext(HiveParser.AtomSelectStatementContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_setOpSelectStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOpSelectStatement" ):
                return visitor.visitSetOpSelectStatement(self)
            else:
                return visitor.visitChildren(self)




    def setOpSelectStatement(self):

        localctx = HiveParser.SetOpSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_setOpSelectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2775
                self.setOperator()
                self.state = 2776
                self.atomSelectStatement()
                self.state = 2780 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==HiveParser.KW_UNION or _la==HiveParser.KW_EXCEPT or _la==HiveParser.KW_MINUS or _la==HiveParser.KW_INTERSECT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementWithCTEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HiveParser.WithClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectStatementWithCTE

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStatementWithCTE" ):
                return visitor.visitSelectStatementWithCTE(self)
            else:
                return visitor.visitChildren(self)




    def selectStatementWithCTE(self):

        localctx = HiveParser.SelectStatementWithCTEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_selectStatementWithCTE)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WITH:
                self.state = 2782
                self.withClause()


            self.state = 2785
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertClause(self):
            return self.getTypedRuleContext(HiveParser.InsertClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(HiveParser.SelectClauseContext,0)


        def lateralOrPivotView(self):
            return self.getTypedRuleContext(HiveParser.LateralOrPivotViewContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HiveParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(HiveParser.HavingClauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(HiveParser.Window_clauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(HiveParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = HiveParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.state = 2850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_INSERT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2787
                self.insertClause()
                self.state = 2788
                self.selectClause()
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LATERAL or _la==HiveParser.KW_PIVOT or _la==HiveParser.COMMA:
                    self.state = 2789
                    self.lateralOrPivotView()


                self.state = 2793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_WHERE:
                    self.state = 2792
                    self.whereClause()


                self.state = 2796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_GROUP:
                    self.state = 2795
                    self.groupByClause()


                self.state = 2799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_HAVING:
                    self.state = 2798
                    self.havingClause()


                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_WINDOW:
                    self.state = 2801
                    self.window_clause()


                self.state = 2805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ORDER:
                    self.state = 2804
                    self.orderByClause()


                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_CLUSTER:
                    self.state = 2807
                    self.clusterByClause()


                self.state = 2811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_DISTRIBUTE:
                    self.state = 2810
                    self.distributeByClause()


                self.state = 2814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_SORT:
                    self.state = 2813
                    self.sortByClause()


                self.state = 2817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LIMIT:
                    self.state = 2816
                    self.limitClause()


                pass
            elif token in [HiveParser.KW_SELECT, HiveParser.KW_MAP, HiveParser.KW_REDUCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2819
                self.selectClause()
                self.state = 2821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LATERAL or _la==HiveParser.KW_PIVOT or _la==HiveParser.COMMA:
                    self.state = 2820
                    self.lateralOrPivotView()


                self.state = 2824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_WHERE:
                    self.state = 2823
                    self.whereClause()


                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_GROUP:
                    self.state = 2826
                    self.groupByClause()


                self.state = 2830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_HAVING:
                    self.state = 2829
                    self.havingClause()


                self.state = 2833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_WINDOW:
                    self.state = 2832
                    self.window_clause()


                self.state = 2836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ORDER:
                    self.state = 2835
                    self.orderByClause()


                self.state = 2839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_CLUSTER:
                    self.state = 2838
                    self.clusterByClause()


                self.state = 2842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_DISTRIBUTE:
                    self.state = 2841
                    self.distributeByClause()


                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_SORT:
                    self.state = 2844
                    self.sortByClause()


                self.state = 2848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LIMIT:
                    self.state = 2847
                    self.limitClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def destination(self):
            return self.getTypedRuleContext(HiveParser.DestinationContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(HiveParser.IfNotExistsContext,0)


        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_insertClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertClause" ):
                return visitor.visitInsertClause(self)
            else:
                return visitor.visitChildren(self)




    def insertClause(self):

        localctx = HiveParser.InsertClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_insertClause)
        self._la = 0 # Token type
        try:
            self.state = 2870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2852
                self.match(HiveParser.KW_INSERT)
                self.state = 2853
                self.match(HiveParser.KW_OVERWRITE)
                self.state = 2854
                self.destination()
                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_IF:
                    self.state = 2855
                    self.ifNotExists()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2858
                self.match(HiveParser.KW_INSERT)
                self.state = 2859
                self.match(HiveParser.KW_INTO)
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_TABLE:
                    self.state = 2860
                    self.match(HiveParser.KW_TABLE)


                self.state = 2863
                self.tableOrPartition()
                self.state = 2868
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2864
                    self.match(HiveParser.LPAREN)
                    self.state = 2865
                    self.columnNameList()
                    self.state = 2866
                    self.match(HiveParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DIRECTORY(self):
            return self.getToken(HiveParser.KW_DIRECTORY, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_LOCAL(self):
            return self.getToken(HiveParser.KW_LOCAL, 0)

        def tableRowFormat(self):
            return self.getTypedRuleContext(HiveParser.TableRowFormatContext,0)


        def tableFileFormat(self):
            return self.getTypedRuleContext(HiveParser.TableFileFormatContext,0)


        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def tableOrPartition(self):
            return self.getTypedRuleContext(HiveParser.TableOrPartitionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_destination

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDestination" ):
                return visitor.visitDestination(self)
            else:
                return visitor.visitChildren(self)




    def destination(self):

        localctx = HiveParser.DestinationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_destination)
        self._la = 0 # Token type
        try:
            self.state = 2885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_DIRECTORY, HiveParser.KW_LOCAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_LOCAL:
                    self.state = 2872
                    self.match(HiveParser.KW_LOCAL)


                self.state = 2875
                self.match(HiveParser.KW_DIRECTORY)
                self.state = 2876
                self.match(HiveParser.StringLiteral)
                self.state = 2878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ROW:
                    self.state = 2877
                    self.tableRowFormat()


                self.state = 2881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_STORED:
                    self.state = 2880
                    self.tableFileFormat()


                pass
            elif token in [HiveParser.KW_TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2883
                self.match(HiveParser.KW_TABLE)
                self.state = 2884
                self.tableOrPartition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_limitClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = HiveParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_limitClause)
        try:
            self.state = 2897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2887
                self.match(HiveParser.KW_LIMIT)

                self.state = 2890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2888
                    self.match(HiveParser.Number)
                    self.state = 2889
                    self.match(HiveParser.COMMA)


                self.state = 2892
                self.match(HiveParser.Number)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2893
                self.match(HiveParser.KW_LIMIT)
                self.state = 2894
                self.match(HiveParser.Number)
                self.state = 2895
                self.match(HiveParser.KW_OFFSET)
                self.state = 2896
                self.match(HiveParser.Number)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_deleteStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = HiveParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2899
            self.match(HiveParser.KW_DELETE)
            self.state = 2900
            self.match(HiveParser.KW_FROM)
            self.state = 2901
            self.tableName()
            self.state = 2903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WHERE:
                self.state = 2902
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAssignmentClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableOrColumn(self):
            return self.getTypedRuleContext(HiveParser.TableOrColumnContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_columnAssignmentClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAssignmentClause" ):
                return visitor.visitColumnAssignmentClause(self)
            else:
                return visitor.visitChildren(self)




    def columnAssignmentClause(self):

        localctx = HiveParser.ColumnAssignmentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_columnAssignmentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2905
            self.tableOrColumn()
            self.state = 2906
            self.match(HiveParser.EQUAL)
            self.state = 2907
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def columnAssignmentClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnAssignmentClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnAssignmentClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_setColumnsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetColumnsClause" ):
                return visitor.visitSetColumnsClause(self)
            else:
                return visitor.visitChildren(self)




    def setColumnsClause(self):

        localctx = HiveParser.SetColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_setColumnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2909
            self.match(HiveParser.KW_SET)
            self.state = 2910
            self.columnAssignmentClause()
            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 2911
                self.match(HiveParser.COMMA)
                self.state = 2912
                self.columnAssignmentClause()
                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def setColumnsClause(self):
            return self.getTypedRuleContext(HiveParser.SetColumnsClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HiveParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_updateStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = HiveParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2918
            self.match(HiveParser.KW_UPDATE)
            self.state = 2919
            self.tableName()
            self.state = 2920
            self.setColumnsClause()
            self.state = 2922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WHERE:
                self.state = 2921
                self.whereClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransactionStatement(self):
            return self.getTypedRuleContext(HiveParser.StartTransactionStatementContext,0)


        def commitStatement(self):
            return self.getTypedRuleContext(HiveParser.CommitStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(HiveParser.RollbackStatementContext,0)


        def setAutoCommitStatement(self):
            return self.getTypedRuleContext(HiveParser.SetAutoCommitStatementContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sqlTransactionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlTransactionStatement" ):
                return visitor.visitSqlTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def sqlTransactionStatement(self):

        localctx = HiveParser.SqlTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_sqlTransactionStatement)
        try:
            self.state = 2928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_START]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2924
                self.startTransactionStatement()
                pass
            elif token in [HiveParser.KW_COMMIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2925
                self.commitStatement()
                pass
            elif token in [HiveParser.KW_ROLLBACK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2926
                self.rollbackStatement()
                pass
            elif token in [HiveParser.KW_SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2927
                self.setAutoCommitStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_START(self):
            return self.getToken(HiveParser.KW_START, 0)

        def KW_TRANSACTION(self):
            return self.getToken(HiveParser.KW_TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(HiveParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_startTransactionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransactionStatement" ):
                return visitor.visitStartTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def startTransactionStatement(self):

        localctx = HiveParser.StartTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_startTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2930
            self.match(HiveParser.KW_START)
            self.state = 2931
            self.match(HiveParser.KW_TRANSACTION)
            self.state = 2940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_READ or _la==HiveParser.KW_ISOLATION:
                self.state = 2932
                self.transactionMode()
                self.state = 2937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 2933
                    self.match(HiveParser.COMMA)
                    self.state = 2934
                    self.transactionMode()
                    self.state = 2939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isolationLevel(self):
            return self.getTypedRuleContext(HiveParser.IsolationLevelContext,0)


        def transactionAccessMode(self):
            return self.getTypedRuleContext(HiveParser.TransactionAccessModeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_transactionMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionMode" ):
                return visitor.visitTransactionMode(self)
            else:
                return visitor.visitChildren(self)




    def transactionMode(self):

        localctx = HiveParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_transactionMode)
        try:
            self.state = 2944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2942
                self.isolationLevel()
                pass
            elif token in [HiveParser.KW_READ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2943
                self.transactionAccessMode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ(self):
            return self.getToken(HiveParser.KW_READ, 0)

        def KW_ONLY(self):
            return self.getToken(HiveParser.KW_ONLY, 0)

        def KW_WRITE(self):
            return self.getToken(HiveParser.KW_WRITE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_transactionAccessMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)




    def transactionAccessMode(self):

        localctx = HiveParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_transactionAccessMode)
        try:
            self.state = 2950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2946
                self.match(HiveParser.KW_READ)
                self.state = 2947
                self.match(HiveParser.KW_ONLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2948
                self.match(HiveParser.KW_READ)
                self.state = 2949
                self.match(HiveParser.KW_WRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ISOLATION(self):
            return self.getToken(HiveParser.KW_ISOLATION, 0)

        def KW_LEVEL(self):
            return self.getToken(HiveParser.KW_LEVEL, 0)

        def levelOfIsolation(self):
            return self.getTypedRuleContext(HiveParser.LevelOfIsolationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_isolationLevel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)




    def isolationLevel(self):

        localctx = HiveParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_isolationLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            self.match(HiveParser.KW_ISOLATION)
            self.state = 2953
            self.match(HiveParser.KW_LEVEL)
            self.state = 2954
            self.levelOfIsolation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SNAPSHOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_levelOfIsolation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelOfIsolation" ):
                return visitor.visitLevelOfIsolation(self)
            else:
                return visitor.visitChildren(self)




    def levelOfIsolation(self):

        localctx = HiveParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_levelOfIsolation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2956
            self.match(HiveParser.KW_SNAPSHOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMMIT(self):
            return self.getToken(HiveParser.KW_COMMIT, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_commitStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommitStatement" ):
                return visitor.visitCommitStatement(self)
            else:
                return visitor.visitChildren(self)




    def commitStatement(self):

        localctx = HiveParser.CommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_commitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.match(HiveParser.KW_COMMIT)
            self.state = 2960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WORK:
                self.state = 2959
                self.match(HiveParser.KW_WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROLLBACK(self):
            return self.getToken(HiveParser.KW_ROLLBACK, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_rollbackStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollbackStatement" ):
                return visitor.visitRollbackStatement(self)
            else:
                return visitor.visitChildren(self)




    def rollbackStatement(self):

        localctx = HiveParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2962
            self.match(HiveParser.KW_ROLLBACK)
            self.state = 2964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WORK:
                self.state = 2963
                self.match(HiveParser.KW_WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutoCommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SET(self):
            return self.getToken(HiveParser.KW_SET, 0)

        def KW_AUTOCOMMIT(self):
            return self.getToken(HiveParser.KW_AUTOCOMMIT, 0)

        def booleanValueTok(self):
            return self.getTypedRuleContext(HiveParser.BooleanValueTokContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_setAutoCommitStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAutoCommitStatement" ):
                return visitor.visitSetAutoCommitStatement(self)
            else:
                return visitor.visitChildren(self)




    def setAutoCommitStatement(self):

        localctx = HiveParser.SetAutoCommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_setAutoCommitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self.match(HiveParser.KW_SET)
            self.state = 2967
            self.match(HiveParser.KW_AUTOCOMMIT)
            self.state = 2968
            self.booleanValueTok()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbortTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def getRuleIndex(self):
            return HiveParser.RULE_abortTransactionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbortTransactionStatement" ):
                return visitor.visitAbortTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def abortTransactionStatement(self):

        localctx = HiveParser.AbortTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_abortTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2970
            self.match(HiveParser.KW_ABORT)
            self.state = 2971
            self.match(HiveParser.KW_TRANSACTIONS)
            self.state = 2973 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2972
                self.match(HiveParser.Number)
                self.state = 2975 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==HiveParser.Number):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MERGE(self):
            return self.getToken(HiveParser.KW_MERGE, 0)

        def KW_INTO(self):
            return self.getToken(HiveParser.KW_INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def joinSourcePart(self):
            return self.getTypedRuleContext(HiveParser.JoinSourcePartContext,0)


        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def whenClauses(self):
            return self.getTypedRuleContext(HiveParser.WhenClausesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_mergeStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeStatement" ):
                return visitor.visitMergeStatement(self)
            else:
                return visitor.visitChildren(self)




    def mergeStatement(self):

        localctx = HiveParser.MergeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_mergeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2977
            self.match(HiveParser.KW_MERGE)
            self.state = 2978
            self.match(HiveParser.KW_INTO)
            self.state = 2979
            self.tableName()
            self.state = 2984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_AS) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.Identifier - 322)))) != 0):
                self.state = 2981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_AS:
                    self.state = 2980
                    self.match(HiveParser.KW_AS)


                self.state = 2983
                self.identifier()


            self.state = 2986
            self.match(HiveParser.KW_USING)
            self.state = 2987
            self.joinSourcePart()
            self.state = 2988
            self.match(HiveParser.KW_ON)
            self.state = 2989
            self.expression(0)
            self.state = 2990
            self.whenClauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenMatchedAndClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.WhenMatchedAndClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.WhenMatchedAndClauseContext,i)


        def whenMatchedThenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.WhenMatchedThenClauseContext)
            else:
                return self.getTypedRuleContext(HiveParser.WhenMatchedThenClauseContext,i)


        def whenNotMatchedClause(self):
            return self.getTypedRuleContext(HiveParser.WhenNotMatchedClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenClauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClauses" ):
                return visitor.visitWhenClauses(self)
            else:
                return visitor.visitChildren(self)




    def whenClauses(self):

        localctx = HiveParser.WhenClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_whenClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2996
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2994
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                    if la_ == 1:
                        self.state = 2992
                        self.whenMatchedAndClause()
                        pass

                    elif la_ == 2:
                        self.state = 2993
                        self.whenMatchedThenClause()
                        pass

             
                self.state = 2998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_WHEN:
                self.state = 2999
                self.whenNotMatchedClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenNotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def KW_INSERT(self):
            return self.getToken(HiveParser.KW_INSERT, 0)

        def KW_VALUES(self):
            return self.getToken(HiveParser.KW_VALUES, 0)

        def valueRowConstructor(self):
            return self.getTypedRuleContext(HiveParser.ValueRowConstructorContext,0)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenNotMatchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenNotMatchedClause" ):
                return visitor.visitWhenNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def whenNotMatchedClause(self):

        localctx = HiveParser.WhenNotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_whenNotMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3002
            self.match(HiveParser.KW_WHEN)
            self.state = 3003
            self.match(HiveParser.KW_NOT)
            self.state = 3004
            self.match(HiveParser.KW_MATCHED)
            self.state = 3007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AND:
                self.state = 3005
                self.match(HiveParser.KW_AND)
                self.state = 3006
                self.expression(0)


            self.state = 3009
            self.match(HiveParser.KW_THEN)
            self.state = 3010
            self.match(HiveParser.KW_INSERT)
            self.state = 3011
            self.match(HiveParser.KW_VALUES)
            self.state = 3012
            self.valueRowConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenMatchedAndClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def updateOrDelete(self):
            return self.getTypedRuleContext(HiveParser.UpdateOrDeleteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenMatchedAndClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenMatchedAndClause" ):
                return visitor.visitWhenMatchedAndClause(self)
            else:
                return visitor.visitChildren(self)




    def whenMatchedAndClause(self):

        localctx = HiveParser.WhenMatchedAndClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_whenMatchedAndClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3014
            self.match(HiveParser.KW_WHEN)
            self.state = 3015
            self.match(HiveParser.KW_MATCHED)
            self.state = 3016
            self.match(HiveParser.KW_AND)
            self.state = 3017
            self.expression(0)
            self.state = 3018
            self.match(HiveParser.KW_THEN)
            self.state = 3019
            self.updateOrDelete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenMatchedThenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_THEN(self):
            return self.getToken(HiveParser.KW_THEN, 0)

        def updateOrDelete(self):
            return self.getTypedRuleContext(HiveParser.UpdateOrDeleteContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whenMatchedThenClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenMatchedThenClause" ):
                return visitor.visitWhenMatchedThenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenMatchedThenClause(self):

        localctx = HiveParser.WhenMatchedThenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_whenMatchedThenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            self.match(HiveParser.KW_WHEN)
            self.state = 3022
            self.match(HiveParser.KW_MATCHED)
            self.state = 3023
            self.match(HiveParser.KW_THEN)
            self.state = 3024
            self.updateOrDelete()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateOrDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UPDATE(self):
            return self.getToken(HiveParser.KW_UPDATE, 0)

        def setColumnsClause(self):
            return self.getTypedRuleContext(HiveParser.SetColumnsClauseContext,0)


        def KW_DELETE(self):
            return self.getToken(HiveParser.KW_DELETE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_updateOrDelete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateOrDelete" ):
                return visitor.visitUpdateOrDelete(self)
            else:
                return visitor.visitChildren(self)




    def updateOrDelete(self):

        localctx = HiveParser.UpdateOrDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_updateOrDelete)
        try:
            self.state = 3029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_UPDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3026
                self.match(HiveParser.KW_UPDATE)
                self.state = 3027
                self.setColumnsClause()
                pass
            elif token in [HiveParser.KW_DELETE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3028
                self.match(HiveParser.KW_DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillQueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_killQueryStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKillQueryStatement" ):
                return visitor.visitKillQueryStatement(self)
            else:
                return visitor.visitChildren(self)




    def killQueryStatement(self):

        localctx = HiveParser.KillQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_killQueryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3031
            self.match(HiveParser.KW_KILL)
            self.state = 3032
            self.match(HiveParser.KW_QUERY)
            self.state = 3034 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3033
                self.match(HiveParser.StringLiteral)
                self.state = 3036 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==HiveParser.StringLiteral):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SELECT(self):
            return self.getToken(HiveParser.KW_SELECT, 0)

        def QUERY_HINT(self):
            return self.getToken(HiveParser.QUERY_HINT, 0)

        def selectList(self):
            return self.getTypedRuleContext(HiveParser.SelectListContext,0)


        def KW_TRANSFORM(self):
            return self.getToken(HiveParser.KW_TRANSFORM, 0)

        def selectTrfmClause(self):
            return self.getTypedRuleContext(HiveParser.SelectTrfmClauseContext,0)


        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def trfmClause(self):
            return self.getTypedRuleContext(HiveParser.TrfmClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = HiveParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.state = 3051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3038
                self.match(HiveParser.KW_SELECT)
                self.state = 3040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.QUERY_HINT:
                    self.state = 3039
                    self.match(HiveParser.QUERY_HINT)


                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 3043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==HiveParser.KW_ALL or _la==HiveParser.KW_DISTINCT:
                        self.state = 3042
                        _la = self._input.LA(1)
                        if not(_la==HiveParser.KW_ALL or _la==HiveParser.KW_DISTINCT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3045
                    self.selectList()
                    pass

                elif la_ == 2:
                    self.state = 3046
                    self.match(HiveParser.KW_TRANSFORM)
                    self.state = 3047
                    self.selectTrfmClause()
                    pass


                pass
            elif token in [HiveParser.KW_MAP, HiveParser.KW_REDUCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3050
                self.trfmClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectList" ):
                return visitor.visitSelectList(self)
            else:
                return visitor.visitChildren(self)




    def selectList(self):

        localctx = HiveParser.SelectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_selectList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.selectItem()
            self.state = 3058
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3054
                    self.match(HiveParser.COMMA)
                    self.state = 3055
                    self.selectItem() 
                self.state = 3060
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectTrfmClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def selectExpressionList(self):
            return self.getTypedRuleContext(HiveParser.SelectExpressionListContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(HiveParser.RowFormatContext,i)


        def recordWriter(self):
            return self.getTypedRuleContext(HiveParser.RecordWriterContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def recordReader(self):
            return self.getTypedRuleContext(HiveParser.RecordReaderContext,0)


        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectTrfmClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectTrfmClause" ):
                return visitor.visitSelectTrfmClause(self)
            else:
                return visitor.visitChildren(self)




    def selectTrfmClause(self):

        localctx = HiveParser.SelectTrfmClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_selectTrfmClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.match(HiveParser.LPAREN)
            self.state = 3062
            self.selectExpressionList()
            self.state = 3063
            self.match(HiveParser.RPAREN)
            self.state = 3065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ROW:
                self.state = 3064
                self.rowFormat()


            self.state = 3068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RECORDWRITER:
                self.state = 3067
                self.recordWriter()


            self.state = 3070
            self.match(HiveParser.KW_USING)
            self.state = 3071
            self.match(HiveParser.StringLiteral)
            self.state = 3086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3072
                self.match(HiveParser.KW_AS)
                self.state = 3084
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.LPAREN]:
                    self.state = 3073
                    self.match(HiveParser.LPAREN)
                    self.state = 3076
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                    if la_ == 1:
                        self.state = 3074
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3075
                        self.columnNameTypeList()
                        pass


                    self.state = 3078
                    self.match(HiveParser.RPAREN)
                    pass
                elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                    self.state = 3082
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                    if la_ == 1:
                        self.state = 3080
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3081
                        self.columnNameTypeList()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ROW:
                self.state = 3088
                self.rowFormat()


            self.state = 3092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RECORDREADER:
                self.state = 3091
                self.recordReader()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableAllColumns(self):
            return self.getTypedRuleContext(HiveParser.TableAllColumnsContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_selectItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectItem" ):
                return visitor.visitSelectItem(self)
            else:
                return visitor.visitChildren(self)




    def selectItem(self):

        localctx = HiveParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 3107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3094
                self.tableAllColumns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3095
                self.expression(0)
                self.state = 3105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 3097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==HiveParser.KW_AS:
                        self.state = 3096
                        self.match(HiveParser.KW_AS)


                    self.state = 3099
                    self.identifier()

                elif la_ == 2:
                    self.state = 3100
                    self.match(HiveParser.KW_AS)
                    self.state = 3101
                    self.match(HiveParser.LPAREN)
                    self.state = 3102
                    self.aliasList()
                    self.state = 3103
                    self.match(HiveParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrfmClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USING(self):
            return self.getToken(HiveParser.KW_USING, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def selectExpressionList(self):
            return self.getTypedRuleContext(HiveParser.SelectExpressionListContext,0)


        def KW_REDUCE(self):
            return self.getToken(HiveParser.KW_REDUCE, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(HiveParser.RowFormatContext,i)


        def recordWriter(self):
            return self.getTypedRuleContext(HiveParser.RecordWriterContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def recordReader(self):
            return self.getTypedRuleContext(HiveParser.RecordReaderContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def columnNameTypeList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameTypeListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_trfmClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrfmClause" ):
                return visitor.visitTrfmClause(self)
            else:
                return visitor.visitChildren(self)




    def trfmClause(self):

        localctx = HiveParser.TrfmClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_trfmClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_MAP]:
                self.state = 3109
                self.match(HiveParser.KW_MAP)
                self.state = 3110
                self.selectExpressionList()
                pass
            elif token in [HiveParser.KW_REDUCE]:
                self.state = 3111
                self.match(HiveParser.KW_REDUCE)
                self.state = 3112
                self.selectExpressionList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ROW:
                self.state = 3115
                self.rowFormat()


            self.state = 3119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RECORDWRITER:
                self.state = 3118
                self.recordWriter()


            self.state = 3121
            self.match(HiveParser.KW_USING)
            self.state = 3122
            self.match(HiveParser.StringLiteral)
            self.state = 3137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3123
                self.match(HiveParser.KW_AS)
                self.state = 3135
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.LPAREN]:
                    self.state = 3124
                    self.match(HiveParser.LPAREN)
                    self.state = 3127
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                    if la_ == 1:
                        self.state = 3125
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3126
                        self.columnNameTypeList()
                        pass


                    self.state = 3129
                    self.match(HiveParser.RPAREN)
                    pass
                elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                    self.state = 3133
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                    if la_ == 1:
                        self.state = 3131
                        self.aliasList()
                        pass

                    elif la_ == 2:
                        self.state = 3132
                        self.columnNameTypeList()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ROW:
                self.state = 3139
                self.rowFormat()


            self.state = 3143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_RECORDREADER:
                self.state = 3142
                self.recordReader()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableAllColumns(self):
            return self.getTypedRuleContext(HiveParser.TableAllColumnsContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_selectExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpression" ):
                return visitor.visitSelectExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectExpression(self):

        localctx = HiveParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_selectExpression)
        try:
            self.state = 3147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3145
                self.tableAllColumns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3146
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_selectExpressionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpressionList" ):
                return visitor.visitSelectExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def selectExpressionList(self):

        localctx = HiveParser.SelectExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_selectExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3149
            self.selectExpression()
            self.state = 3154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3150
                self.match(HiveParser.COMMA)
                self.state = 3151
                self.selectExpression()
                self.state = 3156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WINDOW(self):
            return self.getToken(HiveParser.KW_WINDOW, 0)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_defnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_window_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_clause" ):
                return visitor.visitWindow_clause(self)
            else:
                return visitor.visitChildren(self)




    def window_clause(self):

        localctx = HiveParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_window_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            self.match(HiveParser.KW_WINDOW)
            self.state = 3158
            self.window_defn()
            self.state = 3163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3159
                self.match(HiveParser.COMMA)
                self.state = 3160
                self.window_defn()
                self.state = 3165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def window_specification(self):
            return self.getTypedRuleContext(HiveParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_defn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_defn" ):
                return visitor.visitWindow_defn(self)
            else:
                return visitor.visitChildren(self)




    def window_defn(self):

        localctx = HiveParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_window_defn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self.identifier()
            self.state = 3167
            self.match(HiveParser.KW_AS)
            self.state = 3168
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def partitioningSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitioningSpecContext,0)


        def window_frame(self):
            return self.getTypedRuleContext(HiveParser.Window_frameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_specification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_specification" ):
                return visitor.visitWindow_specification(self)
            else:
                return visitor.visitChildren(self)




    def window_specification(self):

        localctx = HiveParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_window_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.state = 3170
                self.identifier()
                pass
            elif token in [HiveParser.LPAREN]:
                self.state = 3171
                self.match(HiveParser.LPAREN)
                self.state = 3173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 3172
                    self.identifier()


                self.state = 3176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ORDER) | (1 << HiveParser.KW_PARTITION) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0):
                    self.state = 3175
                    self.partitioningSpec()


                self.state = 3179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ROWS or _la==HiveParser.KW_RANGE:
                    self.state = 3178
                    self.window_frame()


                self.state = 3181
                self.match(HiveParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_range_expression(self):
            return self.getTypedRuleContext(HiveParser.Window_range_expressionContext,0)


        def window_value_expression(self):
            return self.getTypedRuleContext(HiveParser.Window_value_expressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_frame

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame" ):
                return visitor.visitWindow_frame(self)
            else:
                return visitor.visitChildren(self)




    def window_frame(self):

        localctx = HiveParser.Window_frameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_window_frame)
        try:
            self.state = 3186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ROWS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3184
                self.window_range_expression()
                pass
            elif token in [HiveParser.KW_RANGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3185
                self.window_value_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_range_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ROWS(self):
            return self.getToken(HiveParser.KW_ROWS, 0)

        def window_frame_start_boundary(self):
            return self.getTypedRuleContext(HiveParser.Window_frame_start_boundaryContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def window_frame_boundary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_frame_boundaryContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_frame_boundaryContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_range_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_range_expression" ):
                return visitor.visitWindow_range_expression(self)
            else:
                return visitor.visitChildren(self)




    def window_range_expression(self):

        localctx = HiveParser.Window_range_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_window_range_expression)
        try:
            self.state = 3196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3188
                self.match(HiveParser.KW_ROWS)
                self.state = 3189
                self.window_frame_start_boundary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3190
                self.match(HiveParser.KW_ROWS)
                self.state = 3191
                self.match(HiveParser.KW_BETWEEN)
                self.state = 3192
                self.window_frame_boundary()
                self.state = 3193
                self.match(HiveParser.KW_AND)
                self.state = 3194
                self.window_frame_boundary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RANGE(self):
            return self.getToken(HiveParser.KW_RANGE, 0)

        def window_frame_start_boundary(self):
            return self.getTypedRuleContext(HiveParser.Window_frame_start_boundaryContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def window_frame_boundary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.Window_frame_boundaryContext)
            else:
                return self.getTypedRuleContext(HiveParser.Window_frame_boundaryContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_value_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_value_expression" ):
                return visitor.visitWindow_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def window_value_expression(self):

        localctx = HiveParser.Window_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_window_value_expression)
        try:
            self.state = 3206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3198
                self.match(HiveParser.KW_RANGE)
                self.state = 3199
                self.window_frame_start_boundary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3200
                self.match(HiveParser.KW_RANGE)
                self.state = 3201
                self.match(HiveParser.KW_BETWEEN)
                self.state = 3202
                self.window_frame_boundary()
                self.state = 3203
                self.match(HiveParser.KW_AND)
                self.state = 3204
                self.window_frame_boundary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_start_boundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNBOUNDED(self):
            return self.getToken(HiveParser.KW_UNBOUNDED, 0)

        def KW_PRECEDING(self):
            return self.getToken(HiveParser.KW_PRECEDING, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_window_frame_start_boundary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_start_boundary" ):
                return visitor.visitWindow_frame_start_boundary(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_start_boundary(self):

        localctx = HiveParser.Window_frame_start_boundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_window_frame_start_boundary)
        try:
            self.state = 3214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3208
                self.match(HiveParser.KW_UNBOUNDED)
                self.state = 3209
                self.match(HiveParser.KW_PRECEDING)
                pass
            elif token in [HiveParser.KW_CURRENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3210
                self.match(HiveParser.KW_CURRENT)
                self.state = 3211
                self.match(HiveParser.KW_ROW)
                pass
            elif token in [HiveParser.Number]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3212
                self.match(HiveParser.Number)
                self.state = 3213
                self.match(HiveParser.KW_PRECEDING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNBOUNDED(self):
            return self.getToken(HiveParser.KW_UNBOUNDED, 0)

        def KW_PRECEDING(self):
            return self.getToken(HiveParser.KW_PRECEDING, 0)

        def KW_FOLLOWING(self):
            return self.getToken(HiveParser.KW_FOLLOWING, 0)

        def KW_CURRENT(self):
            return self.getToken(HiveParser.KW_CURRENT, 0)

        def KW_ROW(self):
            return self.getToken(HiveParser.KW_ROW, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def intervalExpression(self):
            return self.getTypedRuleContext(HiveParser.IntervalExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_window_frame_boundary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_boundary" ):
                return visitor.visitWindow_frame_boundary(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_boundary(self):

        localctx = HiveParser.Window_frame_boundaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_window_frame_boundary)
        self._la = 0 # Token type
        try:
            self.state = 3225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3216
                self.match(HiveParser.KW_UNBOUNDED)
                self.state = 3217
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_PRECEDING or _la==HiveParser.KW_FOLLOWING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [HiveParser.KW_CURRENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3218
                self.match(HiveParser.KW_CURRENT)
                self.state = 3219
                self.match(HiveParser.KW_ROW)
                pass
            elif token in [HiveParser.Number]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3220
                self.match(HiveParser.Number)
                self.state = 3221
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_PRECEDING or _la==HiveParser.KW_FOLLOWING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [HiveParser.KW_INTERVAL, HiveParser.LPAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3222
                self.intervalExpression()
                self.state = 3223
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_PRECEDING or _la==HiveParser.KW_FOLLOWING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAllColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableAllColumns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAllColumns" ):
                return visitor.visitTableAllColumns(self)
            else:
                return visitor.visitChildren(self)




    def tableAllColumns(self):

        localctx = HiveParser.TableAllColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_tableAllColumns)
        try:
            self.state = 3232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3227
                self.match(HiveParser.STAR)
                pass
            elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3228
                self.tableName()
                self.state = 3229
                self.match(HiveParser.DOT)
                self.state = 3230
                self.match(HiveParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOrColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableOrColumn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOrColumn" ):
                return visitor.visitTableOrColumn(self)
            else:
                return visitor.visitChildren(self)




    def tableOrColumn(self):

        localctx = HiveParser.TableOrColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_tableOrColumn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_expressionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = HiveParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self.expression(0)
            self.state = 3241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3237
                self.match(HiveParser.COMMA)
                self.state = 3238
                self.expression(0)
                self.state = 3243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_aliasList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasList" ):
                return visitor.visitAliasList(self)
            else:
                return visitor.visitChildren(self)




    def aliasList(self):

        localctx = HiveParser.AliasListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_aliasList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            self.identifier()
            self.state = 3249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3245
                    self.match(HiveParser.COMMA)
                    self.state = 3246
                    self.identifier() 
                self.state = 3251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def fromSource(self):
            return self.getTypedRuleContext(HiveParser.FromSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HiveParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3252
            self.match(HiveParser.KW_FROM)
            self.state = 3253
            self.fromSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uniqueJoinToken(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinTokenContext,0)


        def uniqueJoinSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.UniqueJoinSourceContext)
            else:
                return self.getTypedRuleContext(HiveParser.UniqueJoinSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def joinSource(self):
            return self.getTypedRuleContext(HiveParser.JoinSourceContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_fromSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromSource" ):
                return visitor.visitFromSource(self)
            else:
                return visitor.visitChildren(self)




    def fromSource(self):

        localctx = HiveParser.FromSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_fromSource)
        self._la = 0 # Token type
        try:
            self.state = 3264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_UNIQUEJOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3255
                self.uniqueJoinToken()
                self.state = 3256
                self.uniqueJoinSource()
                self.state = 3259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3257
                    self.match(HiveParser.COMMA)
                    self.state = 3258
                    self.uniqueJoinSource()
                    self.state = 3261 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==HiveParser.COMMA):
                        break

                pass
            elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLE, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.LPAREN, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3263
                self.joinSource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomjoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def lateralOrPivotView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.LateralOrPivotViewContext)
            else:
                return self.getTypedRuleContext(HiveParser.LateralOrPivotViewContext,i)


        def virtualTableSource(self):
            return self.getTypedRuleContext(HiveParser.VirtualTableSourceContext,0)


        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def joinSource(self):
            return self.getTypedRuleContext(HiveParser.JoinSourceContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_atomjoinSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomjoinSource" ):
                return visitor.visitAtomjoinSource(self)
            else:
                return visitor.visitChildren(self)




    def atomjoinSource(self):

        localctx = HiveParser.AtomjoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_atomjoinSource)
        try:
            self.state = 3298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3266
                self.tableSource()
                self.state = 3270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3267
                        self.lateralOrPivotView() 
                    self.state = 3272
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3273
                self.virtualTableSource()
                self.state = 3277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,392,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3274
                        self.lateralOrPivotView() 
                    self.state = 3279
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3280
                self.subQuerySource()
                self.state = 3284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,393,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3281
                        self.lateralOrPivotView() 
                    self.state = 3286
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,393,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3287
                self.partitionedTableFunction()
                self.state = 3291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3288
                        self.lateralOrPivotView() 
                    self.state = 3293
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3294
                self.match(HiveParser.LPAREN)
                self.state = 3295
                self.joinSource()
                self.state = 3296
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomjoinSource(self):
            return self.getTypedRuleContext(HiveParser.AtomjoinSourceContext,0)


        def joinToken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.JoinTokenContext)
            else:
                return self.getTypedRuleContext(HiveParser.JoinTokenContext,i)


        def joinSourcePart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.JoinSourcePartContext)
            else:
                return self.getTypedRuleContext(HiveParser.JoinSourcePartContext,i)


        def KW_ON(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_ON)
            else:
                return self.getToken(HiveParser.KW_ON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_USING(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_USING)
            else:
                return self.getToken(HiveParser.KW_USING, i)

        def columnParenthesesList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnParenthesesListContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnParenthesesListContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_joinSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinSource" ):
                return visitor.visitJoinSource(self)
            else:
                return visitor.visitChildren(self)




    def joinSource(self):

        localctx = HiveParser.JoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_joinSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self.atomjoinSource()
            self.state = 3311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_JOIN) | (1 << HiveParser.KW_ANTI) | (1 << HiveParser.KW_LEFT) | (1 << HiveParser.KW_RIGHT) | (1 << HiveParser.KW_FULL))) != 0) or _la==HiveParser.KW_CROSS or _la==HiveParser.KW_INNER or _la==HiveParser.COMMA:
                self.state = 3301
                self.joinToken()
                self.state = 3302
                self.joinSourcePart()
                self.state = 3307
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [HiveParser.KW_ON]:
                    self.state = 3303
                    self.match(HiveParser.KW_ON)
                    self.state = 3304
                    self.expression(0)
                    pass
                elif token in [HiveParser.KW_USING]:
                    self.state = 3305
                    self.match(HiveParser.KW_USING)
                    self.state = 3306
                    self.columnParenthesesList()
                    pass
                elif token in [HiveParser.EOF, HiveParser.KW_DESC, HiveParser.KW_ORDER, HiveParser.KW_GROUP, HiveParser.KW_HAVING, HiveParser.KW_WHERE, HiveParser.KW_FROM, HiveParser.KW_SELECT, HiveParser.KW_INSERT, HiveParser.KW_JOIN, HiveParser.KW_ANTI, HiveParser.KW_LEFT, HiveParser.KW_RIGHT, HiveParser.KW_FULL, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_UNION, HiveParser.KW_EXCEPT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_IMPORT, HiveParser.KW_CREATE, HiveParser.KW_ALTER, HiveParser.KW_DESCRIBE, HiveParser.KW_DROP, HiveParser.KW_MAP, HiveParser.KW_REDUCE, HiveParser.KW_KILL, HiveParser.KW_EXPLAIN, HiveParser.KW_WITH, HiveParser.KW_LIMIT, HiveParser.KW_SET, HiveParser.KW_DELETE, HiveParser.KW_MINUS, HiveParser.KW_INTERSECT, HiveParser.KW_GRANT, HiveParser.KW_REVOKE, HiveParser.KW_LOCK, HiveParser.KW_UNLOCK, HiveParser.KW_ANALYZE, HiveParser.KW_CROSS, HiveParser.KW_USE, HiveParser.KW_UPDATE, HiveParser.KW_WINDOW, HiveParser.KW_TRUNCATE, HiveParser.KW_INNER, HiveParser.KW_RELOAD, HiveParser.KW_START, HiveParser.KW_COMMIT, HiveParser.KW_ROLLBACK, HiveParser.KW_ABORT, HiveParser.KW_MERGE, HiveParser.KW_REPL, HiveParser.COMMA, HiveParser.SEMICOLON, HiveParser.LPAREN, HiveParser.RPAREN]:
                    pass
                else:
                    pass
                self.state = 3313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinSourcePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def virtualTableSource(self):
            return self.getTypedRuleContext(HiveParser.VirtualTableSourceContext,0)


        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def lateralOrPivotView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.LateralOrPivotViewContext)
            else:
                return self.getTypedRuleContext(HiveParser.LateralOrPivotViewContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_joinSourcePart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinSourcePart" ):
                return visitor.visitJoinSourcePart(self)
            else:
                return visitor.visitChildren(self)




    def joinSourcePart(self):

        localctx = HiveParser.JoinSourcePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_joinSourcePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 3314
                self.tableSource()
                pass

            elif la_ == 2:
                self.state = 3315
                self.virtualTableSource()
                pass

            elif la_ == 3:
                self.state = 3316
                self.subQuerySource()
                pass

            elif la_ == 4:
                self.state = 3317
                self.partitionedTableFunction()
                pass


            self.state = 3323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3320
                    self.lateralOrPivotView() 
                self.state = 3325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uniqueJoinTableSource(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinTableSourceContext,0)


        def uniqueJoinExpr(self):
            return self.getTypedRuleContext(HiveParser.UniqueJoinExprContext,0)


        def KW_PRESERVE(self):
            return self.getToken(HiveParser.KW_PRESERVE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueJoinSource" ):
                return visitor.visitUniqueJoinSource(self)
            else:
                return visitor.visitChildren(self)




    def uniqueJoinSource(self):

        localctx = HiveParser.UniqueJoinSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_uniqueJoinSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PRESERVE:
                self.state = 3326
                self.match(HiveParser.KW_PRESERVE)


            self.state = 3329
            self.uniqueJoinTableSource()
            self.state = 3330
            self.uniqueJoinExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(HiveParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueJoinExpr" ):
                return visitor.visitUniqueJoinExpr(self)
            else:
                return visitor.visitChildren(self)




    def uniqueJoinExpr(self):

        localctx = HiveParser.UniqueJoinExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_uniqueJoinExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3332
            self.match(HiveParser.LPAREN)
            self.state = 3333
            self.expressionList()
            self.state = 3334
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNIQUEJOIN(self):
            return self.getToken(HiveParser.KW_UNIQUEJOIN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinToken

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueJoinToken" ):
                return visitor.visitUniqueJoinToken(self)
            else:
                return visitor.visitChildren(self)




    def uniqueJoinToken(self):

        localctx = HiveParser.UniqueJoinTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_uniqueJoinToken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self.match(HiveParser.KW_UNIQUEJOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JOIN(self):
            return self.getToken(HiveParser.KW_JOIN, 0)

        def KW_INNER(self):
            return self.getToken(HiveParser.KW_INNER, 0)

        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def KW_CROSS(self):
            return self.getToken(HiveParser.KW_CROSS, 0)

        def KW_LEFT(self):
            return self.getToken(HiveParser.KW_LEFT, 0)

        def KW_OUTER(self):
            return self.getToken(HiveParser.KW_OUTER, 0)

        def KW_RIGHT(self):
            return self.getToken(HiveParser.KW_RIGHT, 0)

        def KW_FULL(self):
            return self.getToken(HiveParser.KW_FULL, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def KW_ANTI(self):
            return self.getToken(HiveParser.KW_ANTI, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_joinToken

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinToken" ):
                return visitor.visitJoinToken(self)
            else:
                return visitor.visitChildren(self)




    def joinToken(self):

        localctx = HiveParser.JoinTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_joinToken)
        self._la = 0 # Token type
        try:
            self.state = 3367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3338
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3339
                self.match(HiveParser.KW_INNER)
                self.state = 3340
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3341
                self.match(HiveParser.COMMA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3342
                self.match(HiveParser.KW_CROSS)
                self.state = 3343
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3344
                self.match(HiveParser.KW_LEFT)
                self.state = 3346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_OUTER:
                    self.state = 3345
                    self.match(HiveParser.KW_OUTER)


                self.state = 3348
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3349
                self.match(HiveParser.KW_RIGHT)
                self.state = 3351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_OUTER:
                    self.state = 3350
                    self.match(HiveParser.KW_OUTER)


                self.state = 3353
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3354
                self.match(HiveParser.KW_FULL)
                self.state = 3356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_OUTER:
                    self.state = 3355
                    self.match(HiveParser.KW_OUTER)


                self.state = 3358
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3359
                self.match(HiveParser.KW_LEFT)
                self.state = 3360
                self.match(HiveParser.KW_SEMI)
                self.state = 3361
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3362
                self.match(HiveParser.KW_LEFT)
                self.state = 3363
                self.match(HiveParser.KW_ANTI)
                self.state = 3364
                self.match(HiveParser.KW_JOIN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3365
                self.match(HiveParser.KW_ANTI)
                self.state = 3366
                self.match(HiveParser.KW_JOIN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewWithViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LATERAL(self):
            return self.getToken(HiveParser.KW_LATERAL, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def KW_OUTER(self):
            return self.getToken(HiveParser.KW_OUTER, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_lateralViewWithView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralViewWithView" ):
                return visitor.visitLateralViewWithView(self)
            else:
                return visitor.visitChildren(self)




    def lateralViewWithView(self):

        localctx = HiveParser.LateralViewWithViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_lateralViewWithView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3369
            self.match(HiveParser.KW_LATERAL)
            self.state = 3370
            self.match(HiveParser.KW_VIEW)
            self.state = 3372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_OUTER:
                self.state = 3371
                self.match(HiveParser.KW_OUTER)


            self.state = 3374
            self.function_()
            self.state = 3376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 3375
                self.tableAlias()


            self.state = 3380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3378
                self.match(HiveParser.KW_AS)
                self.state = 3379
                self.aliasList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewWithTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LATERAL(self):
            return self.getToken(HiveParser.KW_LATERAL, 0)

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_lateralViewWithTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralViewWithTable" ):
                return visitor.visitLateralViewWithTable(self)
            else:
                return visitor.visitChildren(self)




    def lateralViewWithTable(self):

        localctx = HiveParser.LateralViewWithTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_lateralViewWithTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self.match(HiveParser.KW_LATERAL)
            self.state = 3383
            self.match(HiveParser.KW_TABLE)
            self.state = 3384
            self.match(HiveParser.LPAREN)
            self.state = 3385
            self.valuesClause()
            self.state = 3386
            self.match(HiveParser.RPAREN)
            self.state = 3388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3387
                self.match(HiveParser.KW_AS)


            self.state = 3390
            self.tableAlias()
            self.state = 3395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.state = 3391
                self.match(HiveParser.LPAREN)
                self.state = 3392
                self.aliasList()
                self.state = 3393
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PIVOT(self):
            return self.getToken(HiveParser.KW_PIVOT, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_FOR(self):
            return self.getToken(HiveParser.KW_FOR, 0)

        def columnNameList(self):
            return self.getTypedRuleContext(HiveParser.ColumnNameListContext,0)


        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def multiNamedExpression(self):
            return self.getTypedRuleContext(HiveParser.MultiNamedExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.AsExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_pivotView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotView" ):
                return visitor.visitPivotView(self)
            else:
                return visitor.visitChildren(self)




    def pivotView(self):

        localctx = HiveParser.PivotViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_pivotView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            self.match(HiveParser.KW_PIVOT)
            self.state = 3398
            self.match(HiveParser.LPAREN)
            self.state = 3407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_LEFT) | (1 << HiveParser.KW_RIGHT) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_TRANSFORM) | (1 << HiveParser.KW_TRANSFORM_KEYS) | (1 << HiveParser.KW_TRANSFORM_VALUES) | (1 << HiveParser.KW_FILTER) | (1 << HiveParser.KW_ARRAY_SORT) | (1 << HiveParser.KW_ZIP_WITH) | (1 << HiveParser.KW_AGGREGATE) | (1 << HiveParser.KW_FORALL) | (1 << HiveParser.KW_MAP_FILTER) | (1 << HiveParser.KW_MAP_ZIP_WITH) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_NULL - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_BOOLEAN - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_SMALLINT - 66)) | (1 << (HiveParser.KW_INT - 66)) | (1 << (HiveParser.KW_BIGINT - 66)) | (1 << (HiveParser.KW_FLOAT - 66)) | (1 << (HiveParser.KW_DOUBLE - 66)) | (1 << (HiveParser.KW_DATE - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_TIMESTAMP - 66)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_INTERVAL - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_ARRAY - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_MAP - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_CAST - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_CASE - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_BINARY - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_CURRENT_DATE - 194)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 194)) | (1 << (HiveParser.KW_GROUPING - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_EXTRACT - 258)) | (1 << (HiveParser.KW_FLOOR - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.LPAREN - 322)) | (1 << (HiveParser.PLUS - 322)) | (1 << (HiveParser.MINUS - 322)) | (1 << (HiveParser.TILDE - 322)) | (1 << (HiveParser.StringLiteral - 322)) | (1 << (HiveParser.IntegralLiteral - 322)) | (1 << (HiveParser.NumberLiteral - 322)) | (1 << (HiveParser.Number - 322)) | (1 << (HiveParser.Identifier - 322)) | (1 << (HiveParser.CharSetName - 322)))) != 0):
                self.state = 3399
                self.asExpression()
                self.state = 3404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 3400
                    self.match(HiveParser.COMMA)
                    self.state = 3401
                    self.asExpression()
                    self.state = 3406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3409
            self.match(HiveParser.KW_FOR)
            self.state = 3410
            self.columnNameList()
            self.state = 3411
            self.match(HiveParser.KW_IN)
            self.state = 3412
            self.multiNamedExpression()
            self.state = 3413
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralOrPivotViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lateralViewWithView(self):
            return self.getTypedRuleContext(HiveParser.LateralViewWithViewContext,0)


        def lateralViewWithTable(self):
            return self.getTypedRuleContext(HiveParser.LateralViewWithTableContext,0)


        def pivotView(self):
            return self.getTypedRuleContext(HiveParser.PivotViewContext,0)


        def COMMA(self):
            return self.getToken(HiveParser.COMMA, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_lateralOrPivotView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralOrPivotView" ):
                return visitor.visitLateralOrPivotView(self)
            else:
                return visitor.visitChildren(self)




    def lateralOrPivotView(self):

        localctx = HiveParser.LateralOrPivotViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_lateralOrPivotView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.COMMA:
                self.state = 3415
                self.match(HiveParser.COMMA)


            self.state = 3421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 3418
                self.lateralViewWithView()
                pass

            elif la_ == 2:
                self.state = 3419
                self.lateralViewWithTable()
                pass

            elif la_ == 3:
                self.state = 3420
                self.pivotView()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = HiveParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3423
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableBucketSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLESAMPLE(self):
            return self.getToken(HiveParser.KW_TABLESAMPLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Number)
            else:
                return self.getToken(HiveParser.Number, i)

        def KW_OUT(self):
            return self.getToken(HiveParser.KW_OUT, 0)

        def KW_OF(self):
            return self.getToken(HiveParser.KW_OF, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_tableBucketSample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableBucketSample" ):
                return visitor.visitTableBucketSample(self)
            else:
                return visitor.visitChildren(self)




    def tableBucketSample(self):

        localctx = HiveParser.TableBucketSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_tableBucketSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3425
            self.match(HiveParser.KW_TABLESAMPLE)
            self.state = 3426
            self.match(HiveParser.LPAREN)
            self.state = 3427
            self.match(HiveParser.KW_BUCKET)
            self.state = 3428
            self.match(HiveParser.Number)
            self.state = 3429
            self.match(HiveParser.KW_OUT)
            self.state = 3430
            self.match(HiveParser.KW_OF)
            self.state = 3431
            self.match(HiveParser.Number)
            self.state = 3441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_ON:
                self.state = 3432
                self.match(HiveParser.KW_ON)
                self.state = 3433
                self.expression(0)
                self.state = 3438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 3434
                    self.match(HiveParser.COMMA)
                    self.state = 3435
                    self.expression(0)
                    self.state = 3440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3443
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SplitSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLESAMPLE(self):
            return self.getToken(HiveParser.KW_TABLESAMPLE, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_PERCENT(self):
            return self.getToken(HiveParser.KW_PERCENT, 0)

        def KW_ROWS(self):
            return self.getToken(HiveParser.KW_ROWS, 0)

        def ByteLengthLiteral(self):
            return self.getToken(HiveParser.ByteLengthLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_splitSample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSplitSample" ):
                return visitor.visitSplitSample(self)
            else:
                return visitor.visitChildren(self)




    def splitSample(self):

        localctx = HiveParser.SplitSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_splitSample)
        self._la = 0 # Token type
        try:
            self.state = 3454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3445
                self.match(HiveParser.KW_TABLESAMPLE)
                self.state = 3446
                self.match(HiveParser.LPAREN)
                self.state = 3447
                self.match(HiveParser.Number)
                self.state = 3448
                _la = self._input.LA(1)
                if not(_la==HiveParser.KW_ROWS or _la==HiveParser.KW_PERCENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3449
                self.match(HiveParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3450
                self.match(HiveParser.KW_TABLESAMPLE)
                self.state = 3451
                self.match(HiveParser.LPAREN)
                self.state = 3452
                self.match(HiveParser.ByteLengthLiteral)
                self.state = 3453
                self.match(HiveParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableBucketSample(self):
            return self.getTypedRuleContext(HiveParser.TableBucketSampleContext,0)


        def splitSample(self):
            return self.getTypedRuleContext(HiveParser.SplitSampleContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableSample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSample" ):
                return visitor.visitTableSample(self)
            else:
                return visitor.visitChildren(self)




    def tableSample(self):

        localctx = HiveParser.TableSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_tableSample)
        try:
            self.state = 3458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3456
                self.tableBucketSample()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3457
                self.splitSample()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def tableProperties(self):
            return self.getTypedRuleContext(HiveParser.TablePropertiesContext,0)


        def tableSample(self):
            return self.getTypedRuleContext(HiveParser.TableSampleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSource" ):
                return visitor.visitTableSource(self)
            else:
                return visitor.visitChildren(self)




    def tableSource(self):

        localctx = HiveParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3460
            self.tableName()
            self.state = 3462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 3461
                self.tableProperties()


            self.state = 3465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TABLESAMPLE:
                self.state = 3464
                self.tableSample()


            self.state = 3471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 3468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_AS:
                    self.state = 3467
                    self.match(HiveParser.KW_AS)


                self.state = 3470
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UniqueJoinTableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def tableSample(self):
            return self.getTypedRuleContext(HiveParser.TableSampleContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_uniqueJoinTableSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueJoinTableSource" ):
                return visitor.visitUniqueJoinTableSource(self)
            else:
                return visitor.visitChildren(self)




    def uniqueJoinTableSource(self):

        localctx = HiveParser.UniqueJoinTableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_uniqueJoinTableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3473
            self.tableName()
            self.state = 3475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TABLESAMPLE:
                self.state = 3474
                self.tableSample()


            self.state = 3481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_AS) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.Identifier - 322)))) != 0):
                self.state = 3478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_AS:
                    self.state = 3477
                    self.match(HiveParser.KW_AS)


                self.state = 3480
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_tableName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = HiveParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_tableName)
        try:
            self.state = 3488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3483
                self.identifier()
                self.state = 3484
                self.match(HiveParser.DOT)
                self.state = 3485
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3487
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_viewName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewName" ):
                return visitor.visitViewName(self)
            else:
                return visitor.visitChildren(self)




    def viewName(self):

        localctx = HiveParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 3490
                self.identifier()
                self.state = 3491
                self.match(HiveParser.DOT)


            self.state = 3495
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQuerySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def queryStatementExpression(self):
            return self.getTypedRuleContext(HiveParser.QueryStatementExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_subQuerySource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubQuerySource" ):
                return visitor.visitSubQuerySource(self)
            else:
                return visitor.visitChildren(self)




    def subQuerySource(self):

        localctx = HiveParser.SubQuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_subQuerySource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3497
            self.match(HiveParser.LPAREN)
            self.state = 3498
            self.queryStatementExpression()
            self.state = 3499
            self.match(HiveParser.RPAREN)
            self.state = 3501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3500
                self.match(HiveParser.KW_AS)


            self.state = 3504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.state = 3503
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitioningSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionByClause(self):
            return self.getTypedRuleContext(HiveParser.PartitionByClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HiveParser.OrderByClauseContext,0)


        def distributeByClause(self):
            return self.getTypedRuleContext(HiveParser.DistributeByClauseContext,0)


        def sortByClause(self):
            return self.getTypedRuleContext(HiveParser.SortByClauseContext,0)


        def clusterByClause(self):
            return self.getTypedRuleContext(HiveParser.ClusterByClauseContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitioningSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitioningSpec" ):
                return visitor.visitPartitioningSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitioningSpec(self):

        localctx = HiveParser.PartitioningSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_partitioningSpec)
        self._la = 0 # Token type
        try:
            self.state = 3517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_PARTITION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3506
                self.partitionByClause()
                self.state = 3508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ORDER:
                    self.state = 3507
                    self.orderByClause()


                pass
            elif token in [HiveParser.KW_ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3510
                self.orderByClause()
                pass
            elif token in [HiveParser.KW_DISTRIBUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3511
                self.distributeByClause()
                self.state = 3513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_SORT:
                    self.state = 3512
                    self.sortByClause()


                pass
            elif token in [HiveParser.KW_SORT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3515
                self.sortByClause()
                pass
            elif token in [HiveParser.KW_CLUSTER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3516
                self.clusterByClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTableFunctionSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subQuerySource(self):
            return self.getTypedRuleContext(HiveParser.SubQuerySourceContext,0)


        def tableSource(self):
            return self.getTypedRuleContext(HiveParser.TableSourceContext,0)


        def partitionedTableFunction(self):
            return self.getTypedRuleContext(HiveParser.PartitionedTableFunctionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionTableFunctionSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionTableFunctionSource" ):
                return visitor.visitPartitionTableFunctionSource(self)
            else:
                return visitor.visitChildren(self)




    def partitionTableFunctionSource(self):

        localctx = HiveParser.PartitionTableFunctionSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_partitionTableFunctionSource)
        try:
            self.state = 3522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3519
                self.subQuerySource()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3520
                self.tableSource()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3521
                self.partitionedTableFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedTableFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def KW_ON(self):
            return self.getToken(HiveParser.KW_ON, 0)

        def partitionTableFunctionSource(self):
            return self.getTypedRuleContext(HiveParser.PartitionTableFunctionSourceContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def partitioningSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitioningSpecContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.Identifier)
            else:
                return self.getToken(HiveParser.Identifier, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionedTableFunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionedTableFunction" ):
                return visitor.visitPartitionedTableFunction(self)
            else:
                return visitor.visitChildren(self)




    def partitionedTableFunction(self):

        localctx = HiveParser.PartitionedTableFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_partitionedTableFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524
            self.identifier()
            self.state = 3525
            self.match(HiveParser.LPAREN)
            self.state = 3526
            self.match(HiveParser.KW_ON)
            self.state = 3527
            self.partitionTableFunctionSource()
            self.state = 3529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ORDER) | (1 << HiveParser.KW_PARTITION) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0):
                self.state = 3528
                self.partitioningSpec()


            self.state = 3546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.Identifier:
                self.state = 3531
                self.match(HiveParser.Identifier)
                self.state = 3532
                self.match(HiveParser.LPAREN)
                self.state = 3533
                self.expression(0)
                self.state = 3534
                self.match(HiveParser.RPAREN)
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 3535
                    self.match(HiveParser.COMMA)
                    self.state = 3536
                    self.match(HiveParser.Identifier)
                    self.state = 3537
                    self.match(HiveParser.LPAREN)
                    self.state = 3538
                    self.expression(0)
                    self.state = 3539
                    self.match(HiveParser.RPAREN)
                    self.state = 3545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3548
            self.match(HiveParser.RPAREN)
            self.state = 3550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.state = 3549
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHERE(self):
            return self.getToken(HiveParser.KW_WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(HiveParser.SearchConditionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HiveParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3552
            self.match(HiveParser.KW_WHERE)
            self.state = 3553
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_searchCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchCondition" ):
                return visitor.visitSearchCondition(self)
            else:
                return visitor.visitChildren(self)




    def searchCondition(self):

        localctx = HiveParser.SearchConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_searchCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUES(self):
            return self.getToken(HiveParser.KW_VALUES, 0)

        def valuesTableConstructor(self):
            return self.getTypedRuleContext(HiveParser.ValuesTableConstructorContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valuesClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesClause" ):
                return visitor.visitValuesClause(self)
            else:
                return visitor.visitChildren(self)




    def valuesClause(self):

        localctx = HiveParser.ValuesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_valuesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(HiveParser.KW_VALUES)
            self.state = 3558
            self.valuesTableConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesTableConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueRowConstructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ValueRowConstructorContext)
            else:
                return self.getTypedRuleContext(HiveParser.ValueRowConstructorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_valuesTableConstructor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesTableConstructor" ):
                return visitor.visitValuesTableConstructor(self)
            else:
                return visitor.visitChildren(self)




    def valuesTableConstructor(self):

        localctx = HiveParser.ValuesTableConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_valuesTableConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3560
            self.valueRowConstructor()
            self.state = 3565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3561
                self.match(HiveParser.COMMA)
                self.state = 3562
                self.valueRowConstructor()
                self.state = 3567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueRowConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_valueRowConstructor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueRowConstructor" ):
                return visitor.visitValueRowConstructor(self)
            else:
                return visitor.visitChildren(self)




    def valueRowConstructor(self):

        localctx = HiveParser.ValueRowConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_valueRowConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3568
            self.expressionsInParenthesis()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualTableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABLE(self):
            return self.getToken(HiveParser.KW_TABLE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def valuesClause(self):
            return self.getTypedRuleContext(HiveParser.ValuesClauseContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def tableAlias(self):
            return self.getTypedRuleContext(HiveParser.TableAliasContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_virtualTableSource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtualTableSource" ):
                return visitor.visitVirtualTableSource(self)
            else:
                return visitor.visitChildren(self)




    def virtualTableSource(self):

        localctx = HiveParser.VirtualTableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_virtualTableSource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3570
            self.match(HiveParser.KW_TABLE)
            self.state = 3571
            self.match(HiveParser.LPAREN)
            self.state = 3572
            self.valuesClause()
            self.state = 3573
            self.match(HiveParser.RPAREN)
            self.state = 3575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3574
                self.match(HiveParser.KW_AS)


            self.state = 3577
            self.tableAlias()
            self.state = 3582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 3578
                self.match(HiveParser.LPAREN)
                self.state = 3579
                self.aliasList()
                self.state = 3580
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def groupby_expression(self):
            return self.getTypedRuleContext(HiveParser.Groupby_expressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HiveParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            self.match(HiveParser.KW_GROUP)
            self.state = 3585
            self.match(HiveParser.KW_BY)
            self.state = 3586
            self.groupby_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollupStandard(self):
            return self.getTypedRuleContext(HiveParser.RollupStandardContext,0)


        def rollupOldSyntax(self):
            return self.getTypedRuleContext(HiveParser.RollupOldSyntaxContext,0)


        def groupByEmpty(self):
            return self.getTypedRuleContext(HiveParser.GroupByEmptyContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupby_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupby_expression" ):
                return visitor.visitGroupby_expression(self)
            else:
                return visitor.visitChildren(self)




    def groupby_expression(self):

        localctx = HiveParser.Groupby_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_groupby_expression)
        try:
            self.state = 3591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3588
                self.rollupStandard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3589
                self.rollupOldSyntax()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3590
                self.groupByEmpty()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_groupByEmpty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByEmpty" ):
                return visitor.visitGroupByEmpty(self)
            else:
                return visitor.visitChildren(self)




    def groupByEmpty(self):

        localctx = HiveParser.GroupByEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_groupByEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3593
            self.match(HiveParser.LPAREN)
            self.state = 3594
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupStandardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_ROLLUP(self):
            return self.getToken(HiveParser.KW_ROLLUP, 0)

        def KW_CUBE(self):
            return self.getToken(HiveParser.KW_CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rollupStandard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollupStandard" ):
                return visitor.visitRollupStandard(self)
            else:
                return visitor.visitChildren(self)




    def rollupStandard(self):

        localctx = HiveParser.RollupStandardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_rollupStandard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3596
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_ROLLUP or _la==HiveParser.KW_CUBE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3597
            self.match(HiveParser.LPAREN)
            self.state = 3598
            self.expression(0)
            self.state = 3603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3599
                self.match(HiveParser.COMMA)
                self.state = 3600
                self.expression(0)
                self.state = 3605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3606
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollupOldSyntaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def KW_WITH(self):
            return self.getToken(HiveParser.KW_WITH, 0)

        def KW_ROLLUP(self):
            return self.getToken(HiveParser.KW_ROLLUP, 0)

        def KW_CUBE(self):
            return self.getToken(HiveParser.KW_CUBE, 0)

        def KW_GROUPING(self):
            return self.getToken(HiveParser.KW_GROUPING, 0)

        def KW_SETS(self):
            return self.getToken(HiveParser.KW_SETS, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def groupingSetExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.GroupingSetExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.GroupingSetExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_rollupOldSyntax

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollupOldSyntax" ):
                return visitor.visitRollupOldSyntax(self)
            else:
                return visitor.visitChildren(self)




    def rollupOldSyntax(self):

        localctx = HiveParser.RollupOldSyntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_rollupOldSyntax)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3608
            self.expressionsNotInParenthesis()
            self.state = 3613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3609
                self.match(HiveParser.KW_WITH)
                self.state = 3610
                self.match(HiveParser.KW_ROLLUP)

            elif la_ == 2:
                self.state = 3611
                self.match(HiveParser.KW_WITH)
                self.state = 3612
                self.match(HiveParser.KW_CUBE)


            self.state = 3628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_GROUPING:
                self.state = 3615
                self.match(HiveParser.KW_GROUPING)
                self.state = 3616
                self.match(HiveParser.KW_SETS)
                self.state = 3617
                self.match(HiveParser.LPAREN)
                self.state = 3618
                self.groupingSetExpression()
                self.state = 3623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 3619
                    self.match(HiveParser.COMMA)
                    self.state = 3620
                    self.groupingSetExpression()
                    self.state = 3625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3626
                self.match(HiveParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingSetExpressionMultiple(self):
            return self.getTypedRuleContext(HiveParser.GroupingSetExpressionMultipleContext,0)


        def groupingExpressionSingle(self):
            return self.getTypedRuleContext(HiveParser.GroupingExpressionSingleContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupingSetExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSetExpression" ):
                return visitor.visitGroupingSetExpression(self)
            else:
                return visitor.visitChildren(self)




    def groupingSetExpression(self):

        localctx = HiveParser.GroupingSetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_groupingSetExpression)
        try:
            self.state = 3632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3630
                self.groupingSetExpressionMultiple()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3631
                self.groupingExpressionSingle()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetExpressionMultipleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_groupingSetExpressionMultiple

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSetExpressionMultiple" ):
                return visitor.visitGroupingSetExpressionMultiple(self)
            else:
                return visitor.visitChildren(self)




    def groupingSetExpressionMultiple(self):

        localctx = HiveParser.GroupingSetExpressionMultipleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_groupingSetExpressionMultiple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3634
            self.match(HiveParser.LPAREN)
            self.state = 3636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_LEFT) | (1 << HiveParser.KW_RIGHT) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_TRANSFORM) | (1 << HiveParser.KW_TRANSFORM_KEYS) | (1 << HiveParser.KW_TRANSFORM_VALUES) | (1 << HiveParser.KW_FILTER) | (1 << HiveParser.KW_ARRAY_SORT) | (1 << HiveParser.KW_ZIP_WITH) | (1 << HiveParser.KW_AGGREGATE) | (1 << HiveParser.KW_FORALL) | (1 << HiveParser.KW_MAP_FILTER) | (1 << HiveParser.KW_MAP_ZIP_WITH) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_NULL - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_BOOLEAN - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_SMALLINT - 66)) | (1 << (HiveParser.KW_INT - 66)) | (1 << (HiveParser.KW_BIGINT - 66)) | (1 << (HiveParser.KW_FLOAT - 66)) | (1 << (HiveParser.KW_DOUBLE - 66)) | (1 << (HiveParser.KW_DATE - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_TIMESTAMP - 66)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_INTERVAL - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_ARRAY - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_MAP - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_CAST - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_CASE - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_BINARY - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_CURRENT_DATE - 194)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 194)) | (1 << (HiveParser.KW_GROUPING - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_EXTRACT - 258)) | (1 << (HiveParser.KW_FLOOR - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.LPAREN - 322)) | (1 << (HiveParser.PLUS - 322)) | (1 << (HiveParser.MINUS - 322)) | (1 << (HiveParser.TILDE - 322)) | (1 << (HiveParser.StringLiteral - 322)) | (1 << (HiveParser.IntegralLiteral - 322)) | (1 << (HiveParser.NumberLiteral - 322)) | (1 << (HiveParser.Number - 322)) | (1 << (HiveParser.Identifier - 322)) | (1 << (HiveParser.CharSetName - 322)))) != 0):
                self.state = 3635
                self.expression(0)


            self.state = 3642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3638
                self.match(HiveParser.COMMA)
                self.state = 3639
                self.expression(0)
                self.state = 3644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3645
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionSingleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_groupingExpressionSingle

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingExpressionSingle" ):
                return visitor.visitGroupingExpressionSingle(self)
            else:
                return visitor.visitChildren(self)




    def groupingExpressionSingle(self):

        localctx = HiveParser.GroupingExpressionSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_groupingExpressionSingle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3647
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAVING(self):
            return self.getToken(HiveParser.KW_HAVING, 0)

        def havingCondition(self):
            return self.getTypedRuleContext(HiveParser.HavingConditionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HiveParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self.match(HiveParser.KW_HAVING)
            self.state = 3650
            self.havingCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_havingCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingCondition" ):
                return visitor.visitHavingCondition(self)
            else:
                return visitor.visitChildren(self)




    def havingCondition(self):

        localctx = HiveParser.HavingConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_havingCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3652
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_expressionsInParenthesis

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionsInParenthesis" ):
                return visitor.visitExpressionsInParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def expressionsInParenthesis(self):

        localctx = HiveParser.ExpressionsInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_expressionsInParenthesis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3654
            self.match(HiveParser.LPAREN)
            self.state = 3655
            self.expressionsNotInParenthesis()
            self.state = 3656
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsNotInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def expressionPart(self):
            return self.getTypedRuleContext(HiveParser.ExpressionPartContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionsNotInParenthesis

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionsNotInParenthesis" ):
                return visitor.visitExpressionsNotInParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def expressionsNotInParenthesis(self):

        localctx = HiveParser.ExpressionsNotInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_expressionsNotInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3658
            self.expression(0)
            self.state = 3660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.COMMA:
                self.state = 3659
                self.expressionPart()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_expressionPart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionPart" ):
                return visitor.visitExpressionPart(self)
            else:
                return visitor.visitChildren(self)




    def expressionPart(self):

        localctx = HiveParser.ExpressionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_expressionPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3664 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3662
                self.match(HiveParser.COMMA)
                self.state = 3663
                self.expression(0)
                self.state = 3666 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==HiveParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def expressionsNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsNotInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = HiveParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_expressions)
        try:
            self.state = 3670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3668
                self.expressionsInParenthesis()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3669
                self.expressionsNotInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrderInParenthesis

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnRefOrderInParenthesis" ):
                return visitor.visitColumnRefOrderInParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def columnRefOrderInParenthesis(self):

        localctx = HiveParser.ColumnRefOrderInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_columnRefOrderInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3672
            self.match(HiveParser.LPAREN)
            self.state = 3673
            self.columnRefOrder()
            self.state = 3678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3674
                self.match(HiveParser.COMMA)
                self.state = 3675
                self.columnRefOrder()
                self.state = 3680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3681
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefOrderNotInParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_columnRefOrderNotInParenthesis

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnRefOrderNotInParenthesis" ):
                return visitor.visitColumnRefOrderNotInParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def columnRefOrderNotInParenthesis(self):

        localctx = HiveParser.ColumnRefOrderNotInParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_columnRefOrderNotInParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3683
            self.columnRefOrder()
            self.state = 3688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3684
                self.match(HiveParser.COMMA)
                self.state = 3685
                self.columnRefOrder()
                self.state = 3690
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ORDER(self):
            return self.getToken(HiveParser.KW_ORDER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def columnRefOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ColumnRefOrderContext)
            else:
                return self.getTypedRuleContext(HiveParser.ColumnRefOrderContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HiveParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3691
            self.match(HiveParser.KW_ORDER)
            self.state = 3692
            self.match(HiveParser.KW_BY)
            self.state = 3693
            self.columnRefOrder()
            self.state = 3698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 3694
                self.match(HiveParser.COMMA)
                self.state = 3695
                self.columnRefOrder()
                self.state = 3700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CLUSTER(self):
            return self.getToken(HiveParser.KW_CLUSTER, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_clusterByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClusterByClause" ):
                return visitor.visitClusterByClause(self)
            else:
                return visitor.visitChildren(self)




    def clusterByClause(self):

        localctx = HiveParser.ClusterByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_clusterByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3701
            self.match(HiveParser.KW_CLUSTER)
            self.state = 3702
            self.match(HiveParser.KW_BY)
            self.state = 3703
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionByClause" ):
                return visitor.visitPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionByClause(self):

        localctx = HiveParser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_partitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3705
            self.match(HiveParser.KW_PARTITION)
            self.state = 3706
            self.match(HiveParser.KW_BY)
            self.state = 3707
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistributeByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISTRIBUTE(self):
            return self.getToken(HiveParser.KW_DISTRIBUTE, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def expressions(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_distributeByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistributeByClause" ):
                return visitor.visitDistributeByClause(self)
            else:
                return visitor.visitChildren(self)




    def distributeByClause(self):

        localctx = HiveParser.DistributeByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_distributeByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3709
            self.match(HiveParser.KW_DISTRIBUTE)
            self.state = 3710
            self.match(HiveParser.KW_BY)
            self.state = 3711
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SORT(self):
            return self.getToken(HiveParser.KW_SORT, 0)

        def KW_BY(self):
            return self.getToken(HiveParser.KW_BY, 0)

        def columnRefOrderInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ColumnRefOrderInParenthesisContext,0)


        def columnRefOrderNotInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ColumnRefOrderNotInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sortByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortByClause" ):
                return visitor.visitSortByClause(self)
            else:
                return visitor.visitChildren(self)




    def sortByClause(self):

        localctx = HiveParser.SortByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_sortByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3713
            self.match(HiveParser.KW_SORT)
            self.state = 3714
            self.match(HiveParser.KW_BY)
            self.state = 3717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
            if la_ == 1:
                self.state = 3715
                self.columnRefOrderInParenthesis()
                pass

            elif la_ == 2:
                self.state = 3716
                self.columnRefOrderNotInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionName(self):
            return self.getTypedRuleContext(HiveParser.FunctionNameContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(HiveParser.FunctionArgumentContext,i)


        def KW_OVER(self):
            return self.getToken(HiveParser.KW_OVER, 0)

        def window_specification(self):
            return self.getTypedRuleContext(HiveParser.Window_specificationContext,0)


        def selectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.SelectExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.SelectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_function_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_" ):
                return visitor.visitFunction_(self)
            else:
                return visitor.visitChildren(self)




    def function_(self):

        localctx = HiveParser.Function_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_function_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3719
            self.functionName()
            self.state = 3720
            self.match(HiveParser.LPAREN)
            self.state = 3743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3721
                self.match(HiveParser.STAR)
                pass

            elif la_ == 2:
                self.state = 3723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==HiveParser.KW_ALL or _la==HiveParser.KW_DISTINCT:
                    self.state = 3722
                    _la = self._input.LA(1)
                    if not(_la==HiveParser.KW_ALL or _la==HiveParser.KW_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_LEFT) | (1 << HiveParser.KW_RIGHT) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_TRANSFORM) | (1 << HiveParser.KW_TRANSFORM_KEYS) | (1 << HiveParser.KW_TRANSFORM_VALUES) | (1 << HiveParser.KW_FILTER) | (1 << HiveParser.KW_ARRAY_SORT) | (1 << HiveParser.KW_ZIP_WITH) | (1 << HiveParser.KW_AGGREGATE) | (1 << HiveParser.KW_FORALL) | (1 << HiveParser.KW_MAP_FILTER) | (1 << HiveParser.KW_MAP_ZIP_WITH) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_NULL - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_BOOLEAN - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_SMALLINT - 66)) | (1 << (HiveParser.KW_INT - 66)) | (1 << (HiveParser.KW_BIGINT - 66)) | (1 << (HiveParser.KW_FLOAT - 66)) | (1 << (HiveParser.KW_DOUBLE - 66)) | (1 << (HiveParser.KW_DATE - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_TIMESTAMP - 66)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_INTERVAL - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_ARRAY - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_MAP - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_CAST - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_CASE - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_BINARY - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_CURRENT_DATE - 194)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 194)) | (1 << (HiveParser.KW_GROUPING - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_EXTRACT - 258)) | (1 << (HiveParser.KW_FLOOR - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)) | (1 << (HiveParser.LPAREN - 322)) | (1 << (HiveParser.PLUS - 322)) | (1 << (HiveParser.MINUS - 322)) | (1 << (HiveParser.STAR - 322)) | (1 << (HiveParser.TILDE - 322)) | (1 << (HiveParser.StringLiteral - 322)) | (1 << (HiveParser.IntegralLiteral - 322)) | (1 << (HiveParser.NumberLiteral - 322)) | (1 << (HiveParser.Number - 322)) | (1 << (HiveParser.Identifier - 322)) | (1 << (HiveParser.CharSetName - 322)))) != 0):
                    self.state = 3725
                    self.selectExpression()
                    self.state = 3730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==HiveParser.COMMA:
                        self.state = 3726
                        self.match(HiveParser.COMMA)
                        self.state = 3727
                        self.selectExpression()
                        self.state = 3732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 3:
                self.state = 3735
                self.functionArgument()
                self.state = 3740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==HiveParser.COMMA:
                    self.state = 3736
                    self.match(HiveParser.COMMA)
                    self.state = 3737
                    self.functionArgument()
                    self.state = 3742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3745
            self.match(HiveParser.RPAREN)
            self.state = 3748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3746
                self.match(HiveParser.KW_OVER)
                self.state = 3747
                self.window_specification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def nonReservedColumnName(self):
            return self.getTypedRuleContext(HiveParser.NonReservedColumnNameContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_functionArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgument" ):
                return visitor.visitFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionArgument(self):

        localctx = HiveParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_functionArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_TRUE, HiveParser.KW_FALSE, HiveParser.KW_NOT, HiveParser.KW_IF, HiveParser.KW_EXISTS, HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_LEFT, HiveParser.KW_RIGHT, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_TRANSFORM, HiveParser.KW_TRANSFORM_KEYS, HiveParser.KW_TRANSFORM_VALUES, HiveParser.KW_FILTER, HiveParser.KW_ARRAY_SORT, HiveParser.KW_ZIP_WITH, HiveParser.KW_AGGREGATE, HiveParser.KW_FORALL, HiveParser.KW_MAP_FILTER, HiveParser.KW_MAP_ZIP_WITH, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_NULL, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_BOOLEAN, HiveParser.KW_TINYINT, HiveParser.KW_SMALLINT, HiveParser.KW_INT, HiveParser.KW_BIGINT, HiveParser.KW_FLOAT, HiveParser.KW_DOUBLE, HiveParser.KW_DATE, HiveParser.KW_DATETIME, HiveParser.KW_TIMESTAMP, HiveParser.KW_TIMESTAMPLOCALTZ, HiveParser.KW_ZONE, HiveParser.KW_INTERVAL, HiveParser.KW_STRING, HiveParser.KW_ARRAY, HiveParser.KW_STRUCT, HiveParser.KW_MAP, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_CAST, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_CASE, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_BINARY, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_CURRENT_DATE, HiveParser.KW_CURRENT_TIMESTAMP, HiveParser.KW_GROUPING, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_EXTRACT, HiveParser.KW_FLOOR, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.LPAREN, HiveParser.PLUS, HiveParser.MINUS, HiveParser.TILDE, HiveParser.StringLiteral, HiveParser.IntegralLiteral, HiveParser.NumberLiteral, HiveParser.Number, HiveParser.Identifier, HiveParser.CharSetName]:
                self.state = 3750
                self.expression(0)
                pass
            elif token in [HiveParser.KW_END, HiveParser.KW_START]:
                self.state = 3751
                self.nonReservedColumnName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_AS:
                self.state = 3754
                self.match(HiveParser.KW_AS)
                self.state = 3755
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def sql11ReservedKeywordsUsedAsFunctionName(self):
            return self.getTypedRuleContext(HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_functionName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = HiveParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_functionName)
        try:
            self.state = 3760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3758
                self.functionIdentifier()
                pass
            elif token in [HiveParser.KW_IF, HiveParser.KW_EXISTS, HiveParser.KW_LEFT, HiveParser.KW_RIGHT, HiveParser.KW_TRANSFORM, HiveParser.KW_TRANSFORM_KEYS, HiveParser.KW_TRANSFORM_VALUES, HiveParser.KW_FILTER, HiveParser.KW_ARRAY_SORT, HiveParser.KW_ZIP_WITH, HiveParser.KW_AGGREGATE, HiveParser.KW_FORALL, HiveParser.KW_MAP_FILTER, HiveParser.KW_MAP_ZIP_WITH, HiveParser.KW_BOOLEAN, HiveParser.KW_SMALLINT, HiveParser.KW_INT, HiveParser.KW_BIGINT, HiveParser.KW_FLOAT, HiveParser.KW_DOUBLE, HiveParser.KW_DATE, HiveParser.KW_TIMESTAMP, HiveParser.KW_ARRAY, HiveParser.KW_MAP, HiveParser.KW_BINARY, HiveParser.KW_CURRENT_DATE, HiveParser.KW_CURRENT_TIMESTAMP, HiveParser.KW_GROUPING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3759
                self.sql11ReservedKeywordsUsedAsFunctionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionalNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def KW_TRANSFORM(self):
            return self.getToken(HiveParser.KW_TRANSFORM, 0)

        def KW_TRANSFORM_KEYS(self):
            return self.getToken(HiveParser.KW_TRANSFORM_KEYS, 0)

        def KW_TRANSFORM_VALUES(self):
            return self.getToken(HiveParser.KW_TRANSFORM_VALUES, 0)

        def KW_FILTER(self):
            return self.getToken(HiveParser.KW_FILTER, 0)

        def KW_ARRAY_SORT(self):
            return self.getToken(HiveParser.KW_ARRAY_SORT, 0)

        def KW_ZIP_WITH(self):
            return self.getToken(HiveParser.KW_ZIP_WITH, 0)

        def KW_AGGREGATE(self):
            return self.getToken(HiveParser.KW_AGGREGATE, 0)

        def KW_FORALL(self):
            return self.getToken(HiveParser.KW_FORALL, 0)

        def KW_MAP_FILTER(self):
            return self.getToken(HiveParser.KW_MAP_FILTER, 0)

        def KW_MAP_ZIP_WITH(self):
            return self.getToken(HiveParser.KW_MAP_ZIP_WITH, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_functionalName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionalName" ):
                return visitor.visitFunctionalName(self)
            else:
                return visitor.visitChildren(self)




    def functionalName(self):

        localctx = HiveParser.FunctionalNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_functionalName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3762
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_TRANSFORM) | (1 << HiveParser.KW_TRANSFORM_KEYS) | (1 << HiveParser.KW_TRANSFORM_VALUES) | (1 << HiveParser.KW_FILTER) | (1 << HiveParser.KW_ARRAY_SORT) | (1 << HiveParser.KW_ZIP_WITH) | (1 << HiveParser.KW_AGGREGATE) | (1 << HiveParser.KW_FORALL) | (1 << HiveParser.KW_MAP_FILTER) | (1 << HiveParser.KW_MAP_ZIP_WITH))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionalName(self):
            return self.getTypedRuleContext(HiveParser.FunctionalNameContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LPAREN)
            else:
                return self.getToken(HiveParser.LPAREN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def PROCESSTO(self):
            return self.getToken(HiveParser.PROCESSTO, 0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RPAREN)
            else:
                return self.getToken(HiveParser.RPAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def aliasList(self):
            return self.getTypedRuleContext(HiveParser.AliasListContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_functional

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctional" ):
                return visitor.visitFunctional(self)
            else:
                return visitor.visitChildren(self)




    def functional(self):

        localctx = HiveParser.FunctionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_functional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3764
            self.functionalName()
            self.state = 3765
            self.match(HiveParser.LPAREN)
            self.state = 3766
            self.expression(0)
            self.state = 3771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,464,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3767
                    self.match(HiveParser.COMMA)
                    self.state = 3768
                    self.expression(0) 
                self.state = 3773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

            self.state = 3774
            self.match(HiveParser.COMMA)
            self.state = 3780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.state = 3775
                self.identifier()
                pass
            elif token in [HiveParser.LPAREN]:
                self.state = 3776
                self.match(HiveParser.LPAREN)
                self.state = 3777
                self.aliasList()
                self.state = 3778
                self.match(HiveParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3782
            self.match(HiveParser.PROCESSTO)
            self.state = 3783
            self.expression(0)
            self.state = 3784
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAST(self):
            return self.getToken(HiveParser.KW_CAST, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(HiveParser.PrimitiveTypeContext,0)


        def listType(self):
            return self.getTypedRuleContext(HiveParser.ListTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(HiveParser.StructTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(HiveParser.MapTypeContext,0)


        def unionType(self):
            return self.getTypedRuleContext(HiveParser.UnionTypeContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_castExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = HiveParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_castExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3786
            self.match(HiveParser.KW_CAST)
            self.state = 3787
            self.match(HiveParser.LPAREN)
            self.state = 3788
            self.expression(0)
            self.state = 3789
            self.match(HiveParser.KW_AS)
            self.state = 3795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_BOOLEAN, HiveParser.KW_TINYINT, HiveParser.KW_SMALLINT, HiveParser.KW_INT, HiveParser.KW_BIGINT, HiveParser.KW_FLOAT, HiveParser.KW_DOUBLE, HiveParser.KW_DATE, HiveParser.KW_DATETIME, HiveParser.KW_TIMESTAMP, HiveParser.KW_TIMESTAMPLOCALTZ, HiveParser.KW_DECIMAL, HiveParser.KW_STRING, HiveParser.KW_CHAR, HiveParser.KW_VARCHAR, HiveParser.KW_LONG, HiveParser.KW_BINARY]:
                self.state = 3790
                self.primitiveType()
                pass
            elif token in [HiveParser.KW_ARRAY]:
                self.state = 3791
                self.listType()
                pass
            elif token in [HiveParser.KW_STRUCT]:
                self.state = 3792
                self.structType()
                pass
            elif token in [HiveParser.KW_MAP]:
                self.state = 3793
                self.mapType()
                pass
            elif token in [HiveParser.KW_UNIONTYPE]:
                self.state = 3794
                self.unionType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3797
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_WHEN)
            else:
                return self.getToken(HiveParser.KW_WHEN, i)

        def KW_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_THEN)
            else:
                return self.getToken(HiveParser.KW_THEN, i)

        def KW_ELSE(self):
            return self.getToken(HiveParser.KW_ELSE, 0)

        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.AsExpressionContext,i)


        def multiNamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.MultiNamedExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.MultiNamedExpressionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_caseExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseExpression" ):
                return visitor.visitCaseExpression(self)
            else:
                return visitor.visitChildren(self)




    def caseExpression(self):

        localctx = HiveParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_caseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3799
            self.match(HiveParser.KW_CASE)
            self.state = 3800
            self.expression(0)
            self.state = 3808 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3801
                    self.match(HiveParser.KW_WHEN)
                    self.state = 3802
                    self.expression(0)
                    self.state = 3803
                    self.match(HiveParser.KW_THEN)
                    self.state = 3806
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                    if la_ == 1:
                        self.state = 3804
                        self.asExpression()
                        pass

                    elif la_ == 2:
                        self.state = 3805
                        self.multiNamedExpression()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3810 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,468,self._ctx)

            self.state = 3817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.state = 3812
                self.match(HiveParser.KW_ELSE)
                self.state = 3815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 3813
                    self.asExpression()
                    pass

                elif la_ == 2:
                    self.state = 3814
                    self.multiNamedExpression()
                    pass




            self.state = 3820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.state = 3819
                self.match(HiveParser.KW_END)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def KW_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_WHEN)
            else:
                return self.getToken(HiveParser.KW_WHEN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.KW_THEN)
            else:
                return self.getToken(HiveParser.KW_THEN, i)

        def KW_ELSE(self):
            return self.getToken(HiveParser.KW_ELSE, 0)

        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.AsExpressionContext,i)


        def multiNamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.MultiNamedExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.MultiNamedExpressionContext,i)


        def getRuleIndex(self):
            return HiveParser.RULE_whenExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenExpression" ):
                return visitor.visitWhenExpression(self)
            else:
                return visitor.visitChildren(self)




    def whenExpression(self):

        localctx = HiveParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_whenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3822
            self.match(HiveParser.KW_CASE)
            self.state = 3830 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3823
                    self.match(HiveParser.KW_WHEN)
                    self.state = 3824
                    self.expression(0)
                    self.state = 3825
                    self.match(HiveParser.KW_THEN)
                    self.state = 3828
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                    if la_ == 1:
                        self.state = 3826
                        self.asExpression()
                        pass

                    elif la_ == 2:
                        self.state = 3827
                        self.multiNamedExpression()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3832 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,473,self._ctx)

            self.state = 3839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.state = 3834
                self.match(HiveParser.KW_ELSE)
                self.state = 3837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 3835
                    self.asExpression()
                    pass

                elif la_ == 2:
                    self.state = 3836
                    self.multiNamedExpression()
                    pass




            self.state = 3842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.state = 3841
                self.match(HiveParser.KW_END)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FLOOR(self):
            return self.getToken(HiveParser.KW_FLOOR, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def floorDateQualifiers(self):
            return self.getTypedRuleContext(HiveParser.FloorDateQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_floorExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloorExpression" ):
                return visitor.visitFloorExpression(self)
            else:
                return visitor.visitChildren(self)




    def floorExpression(self):

        localctx = HiveParser.FloorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_floorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3844
            self.match(HiveParser.KW_FLOOR)
            self.state = 3845
            self.match(HiveParser.LPAREN)
            self.state = 3846
            self.expression(0)
            self.state = 3849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_TO:
                self.state = 3847
                self.match(HiveParser.KW_TO)
                self.state = 3848
                self.floorDateQualifiers()


            self.state = 3851
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorDateQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_floorDateQualifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloorDateQualifiers" ):
                return visitor.visitFloorDateQualifiers(self)
            else:
                return visitor.visitChildren(self)




    def floorDateQualifiers(self):

        localctx = HiveParser.FloorDateQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_floorDateQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3853
            _la = self._input.LA(1)
            if not(((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (HiveParser.KW_YEAR - 276)) | (1 << (HiveParser.KW_QUARTER - 276)) | (1 << (HiveParser.KW_MONTH - 276)) | (1 << (HiveParser.KW_WEEK - 276)) | (1 << (HiveParser.KW_DAY - 276)) | (1 << (HiveParser.KW_HOUR - 276)) | (1 << (HiveParser.KW_MINUTE - 276)) | (1 << (HiveParser.KW_SECOND - 276)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTRACT(self):
            return self.getToken(HiveParser.KW_EXTRACT, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def timeQualifiers(self):
            return self.getTypedRuleContext(HiveParser.TimeQualifiersContext,0)


        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_extractExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractExpression" ):
                return visitor.visitExtractExpression(self)
            else:
                return visitor.visitChildren(self)




    def extractExpression(self):

        localctx = HiveParser.ExtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_extractExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3855
            self.match(HiveParser.KW_EXTRACT)
            self.state = 3856
            self.match(HiveParser.LPAREN)
            self.state = 3857
            self.timeQualifiers()
            self.state = 3858
            self.match(HiveParser.KW_FROM)
            self.state = 3859
            self.expression(0)
            self.state = 3860
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_DOW(self):
            return self.getToken(HiveParser.KW_DOW, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timeQualifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeQualifiers" ):
                return visitor.visitTimeQualifiers(self)
            else:
                return visitor.visitChildren(self)




    def timeQualifiers(self):

        localctx = HiveParser.TimeQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_timeQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3862
            _la = self._input.LA(1)
            if not(((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (HiveParser.KW_YEAR - 276)) | (1 << (HiveParser.KW_QUARTER - 276)) | (1 << (HiveParser.KW_MONTH - 276)) | (1 << (HiveParser.KW_WEEK - 276)) | (1 << (HiveParser.KW_DAY - 276)) | (1 << (HiveParser.KW_DOW - 276)) | (1 << (HiveParser.KW_HOUR - 276)) | (1 << (HiveParser.KW_MINUTE - 276)) | (1 << (HiveParser.KW_SECOND - 276)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalLiteral(self):
            return self.getTypedRuleContext(HiveParser.IntervalLiteralContext,0)


        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def dateLiteral(self):
            return self.getTypedRuleContext(HiveParser.DateLiteralContext,0)


        def timestampLiteral(self):
            return self.getTypedRuleContext(HiveParser.TimestampLiteralContext,0)


        def timestampLocalTZLiteral(self):
            return self.getTypedRuleContext(HiveParser.TimestampLocalTZLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def stringLiteralSequence(self):
            return self.getTypedRuleContext(HiveParser.StringLiteralSequenceContext,0)


        def IntegralLiteral(self):
            return self.getToken(HiveParser.IntegralLiteral, 0)

        def NumberLiteral(self):
            return self.getToken(HiveParser.NumberLiteral, 0)

        def charSetStringLiteral(self):
            return self.getTypedRuleContext(HiveParser.CharSetStringLiteralContext,0)


        def booleanValue(self):
            return self.getTypedRuleContext(HiveParser.BooleanValueContext,0)


        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_constant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = HiveParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_constant)
        try:
            self.state = 3876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3864
                self.intervalLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3865
                self.match(HiveParser.Number)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3866
                self.dateLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3867
                self.timestampLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3868
                self.timestampLocalTZLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3869
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3870
                self.stringLiteralSequence()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3871
                self.match(HiveParser.IntegralLiteral)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3872
                self.match(HiveParser.NumberLiteral)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3873
                self.charSetStringLiteral()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3874
                self.booleanValue()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3875
                self.match(HiveParser.KW_NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.StringLiteral)
            else:
                return self.getToken(HiveParser.StringLiteral, i)

        def getRuleIndex(self):
            return HiveParser.RULE_stringLiteralSequence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralSequence" ):
                return visitor.visitStringLiteralSequence(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteralSequence(self):

        localctx = HiveParser.StringLiteralSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_stringLiteralSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3878
            self.match(HiveParser.StringLiteral)
            self.state = 3880 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3879
                    self.match(HiveParser.StringLiteral)

                else:
                    raise NoViableAltException(self)
                self.state = 3882 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharSetStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CharSetName(self):
            return self.getToken(HiveParser.CharSetName, 0)

        def CharSetLiteral(self):
            return self.getToken(HiveParser.CharSetLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_charSetStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharSetStringLiteral" ):
                return visitor.visitCharSetStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def charSetStringLiteral(self):

        localctx = HiveParser.CharSetStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_charSetStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3884
            self.match(HiveParser.CharSetName)
            self.state = 3885
            self.match(HiveParser.CharSetLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_CURRENT_DATE(self):
            return self.getToken(HiveParser.KW_CURRENT_DATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dateLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateLiteral" ):
                return visitor.visitDateLiteral(self)
            else:
                return visitor.visitChildren(self)




    def dateLiteral(self):

        localctx = HiveParser.DateLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_dateLiteral)
        try:
            self.state = 3890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_DATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3887
                self.match(HiveParser.KW_DATE)
                self.state = 3888
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [HiveParser.KW_CURRENT_DATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3889
                self.match(HiveParser.KW_CURRENT_DATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def KW_CURRENT_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timestampLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampLiteral" ):
                return visitor.visitTimestampLiteral(self)
            else:
                return visitor.visitChildren(self)




    def timestampLiteral(self):

        localctx = HiveParser.TimestampLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_timestampLiteral)
        try:
            self.state = 3895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3892
                self.match(HiveParser.KW_TIMESTAMP)
                self.state = 3893
                self.match(HiveParser.StringLiteral)
                pass
            elif token in [HiveParser.KW_CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3894
                self.match(HiveParser.KW_CURRENT_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampLocalTZLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMESTAMPLOCALTZ(self):
            return self.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0)

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_timestampLocalTZLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampLocalTZLiteral" ):
                return visitor.visitTimestampLocalTZLiteral(self)
            else:
                return visitor.visitChildren(self)




    def timestampLocalTZLiteral(self):

        localctx = HiveParser.TimestampLocalTZLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_timestampLocalTZLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3897
            self.match(HiveParser.KW_TIMESTAMPLOCALTZ)
            self.state = 3898
            self.match(HiveParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def Number(self):
            return self.getToken(HiveParser.Number, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_intervalValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = HiveParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3900
            _la = self._input.LA(1)
            if not(_la==HiveParser.StringLiteral or _la==HiveParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self):
            return self.getTypedRuleContext(HiveParser.IntervalValueContext,0)


        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_intervalLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def intervalLiteral(self):

        localctx = HiveParser.IntervalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_intervalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3902
            self.intervalValue()
            self.state = 3903
            self.intervalQualifiers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(HiveParser.IntervalValueContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def intervalQualifiers(self):
            return self.getTypedRuleContext(HiveParser.IntervalQualifiersContext,0)


        def KW_INTERVAL(self):
            return self.getToken(HiveParser.KW_INTERVAL, 0)

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_intervalExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalExpression" ):
                return visitor.visitIntervalExpression(self)
            else:
                return visitor.visitChildren(self)




    def intervalExpression(self):

        localctx = HiveParser.IntervalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_intervalExpression)
        try:
            self.state = 3920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3905
                self.match(HiveParser.LPAREN)
                self.state = 3906
                self.intervalValue()
                self.state = 3907
                self.match(HiveParser.RPAREN)
                self.state = 3908
                self.intervalQualifiers()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3910
                self.match(HiveParser.KW_INTERVAL)
                self.state = 3911
                self.intervalValue()
                self.state = 3912
                self.intervalQualifiers()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3914
                self.match(HiveParser.KW_INTERVAL)
                self.state = 3915
                self.match(HiveParser.LPAREN)
                self.state = 3916
                self.expression(0)
                self.state = 3917
                self.match(HiveParser.RPAREN)
                self.state = 3918
                self.intervalQualifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalQualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_TO(self):
            return self.getToken(HiveParser.KW_TO, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_intervalQualifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalQualifiers" ):
                return visitor.visitIntervalQualifiers(self)
            else:
                return visitor.visitChildren(self)




    def intervalQualifiers(self):

        localctx = HiveParser.IntervalQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_intervalQualifiers)
        try:
            self.state = 3934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3922
                self.match(HiveParser.KW_YEAR)
                self.state = 3923
                self.match(HiveParser.KW_TO)
                self.state = 3924
                self.match(HiveParser.KW_MONTH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3925
                self.match(HiveParser.KW_DAY)
                self.state = 3926
                self.match(HiveParser.KW_TO)
                self.state = 3927
                self.match(HiveParser.KW_SECOND)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3928
                self.match(HiveParser.KW_YEAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3929
                self.match(HiveParser.KW_MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3930
                self.match(HiveParser.KW_DAY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3931
                self.match(HiveParser.KW_HOUR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3932
                self.match(HiveParser.KW_MINUTE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3933
                self.match(HiveParser.KW_SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def intervalExpression(self):
            return self.getTypedRuleContext(HiveParser.IntervalExpressionContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(HiveParser.CastExpressionContext,0)


        def extractExpression(self):
            return self.getTypedRuleContext(HiveParser.ExtractExpressionContext,0)


        def floorExpression(self):
            return self.getTypedRuleContext(HiveParser.FloorExpressionContext,0)


        def caseExpression(self):
            return self.getTypedRuleContext(HiveParser.CaseExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(HiveParser.WhenExpressionContext,0)


        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def function_(self):
            return self.getTypedRuleContext(HiveParser.Function_Context,0)


        def functional(self):
            return self.getTypedRuleContext(HiveParser.FunctionalContext,0)


        def tableOrColumn(self):
            return self.getTypedRuleContext(HiveParser.TableOrColumnContext,0)


        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_atomExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpression" ):
                return visitor.visitAtomExpression(self)
            else:
                return visitor.visitChildren(self)




    def atomExpression(self):

        localctx = HiveParser.AtomExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_atomExpression)
        try:
            self.state = 3948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3936
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3937
                self.intervalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3938
                self.castExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3939
                self.extractExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3940
                self.floorExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3941
                self.caseExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3942
                self.whenExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3943
                self.subQueryExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3944
                self.function_()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3945
                self.functional()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3946
                self.tableOrColumn()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3947
                self.expressionsInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceUnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(HiveParser.TILDE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceUnaryOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceUnaryOperator" ):
                return visitor.visitPrecedenceUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceUnaryOperator(self):

        localctx = HiveParser.PrecedenceUnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_precedenceUnaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3950
            _la = self._input.LA(1)
            if not(((((_la - 361)) & ~0x3f) == 0 and ((1 << (_la - 361)) & ((1 << (HiveParser.PLUS - 361)) | (1 << (HiveParser.MINUS - 361)) | (1 << (HiveParser.TILDE - 361)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NULL(self):
            return self.getToken(HiveParser.KW_NULL, 0)

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_isCondition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsCondition" ):
                return visitor.visitIsCondition(self)
            else:
                return visitor.visitChildren(self)




    def isCondition(self):

        localctx = HiveParser.IsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_isCondition)
        try:
            self.state = 3961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3952
                self.match(HiveParser.KW_NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3953
                self.match(HiveParser.KW_TRUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3954
                self.match(HiveParser.KW_FALSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3955
                self.match(HiveParser.KW_NOT)
                self.state = 3956
                self.match(HiveParser.KW_NULL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3957
                self.match(HiveParser.KW_NOT)
                self.state = 3958
                self.match(HiveParser.KW_TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3959
                self.match(HiveParser.KW_NOT)
                self.state = 3960
                self.match(HiveParser.KW_FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseXorOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITWISEXOR(self):
            return self.getToken(HiveParser.BITWISEXOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseXorOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceBitwiseXorOperator" ):
                return visitor.visitPrecedenceBitwiseXorOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceBitwiseXorOperator(self):

        localctx = HiveParser.PrecedenceBitwiseXorOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_precedenceBitwiseXorOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3963
            self.match(HiveParser.BITWISEXOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceStarOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(HiveParser.DIVIDE, 0)

        def MOD(self):
            return self.getToken(HiveParser.MOD, 0)

        def DIV(self):
            return self.getToken(HiveParser.DIV, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceStarOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceStarOperator" ):
                return visitor.visitPrecedenceStarOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceStarOperator(self):

        localctx = HiveParser.PrecedenceStarOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_precedenceStarOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3965
            _la = self._input.LA(1)
            if not(((((_la - 360)) & ~0x3f) == 0 and ((1 << (_la - 360)) & ((1 << (HiveParser.DIVIDE - 360)) | (1 << (HiveParser.STAR - 360)) | (1 << (HiveParser.MOD - 360)) | (1 << (HiveParser.DIV - 360)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedencePlusOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedencePlusOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedencePlusOperator" ):
                return visitor.visitPrecedencePlusOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedencePlusOperator(self):

        localctx = HiveParser.PrecedencePlusOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_precedencePlusOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            _la = self._input.LA(1)
            if not(_la==HiveParser.PLUS or _la==HiveParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceConcatenateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCATENATE(self):
            return self.getToken(HiveParser.CONCATENATE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceConcatenateOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceConcatenateOperator" ):
                return visitor.visitPrecedenceConcatenateOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceConcatenateOperator(self):

        localctx = HiveParser.PrecedenceConcatenateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_precedenceConcatenateOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3969
            self.match(HiveParser.CONCATENATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAmpersandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(HiveParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAmpersandOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceAmpersandOperator" ):
                return visitor.visitPrecedenceAmpersandOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceAmpersandOperator(self):

        localctx = HiveParser.PrecedenceAmpersandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_precedenceAmpersandOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3971
            self.match(HiveParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceBitwiseOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITWISEOR(self):
            return self.getToken(HiveParser.BITWISEOR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceBitwiseOrOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceBitwiseOrOperator" ):
                return visitor.visitPrecedenceBitwiseOrOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceBitwiseOrOperator(self):

        localctx = HiveParser.PrecedenceBitwiseOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_precedenceBitwiseOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            self.match(HiveParser.BITWISEOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceRegexpOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_RLIKE(self):
            return self.getToken(HiveParser.KW_RLIKE, 0)

        def KW_REGEXP(self):
            return self.getToken(HiveParser.KW_REGEXP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceRegexpOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceRegexpOperator" ):
                return visitor.visitPrecedenceRegexpOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceRegexpOperator(self):

        localctx = HiveParser.PrecedenceRegexpOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_precedenceRegexpOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3975
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_LIKE or _la==HiveParser.KW_RLIKE or _la==HiveParser.KW_REGEXP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceRegexpOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceRegexpOperatorContext,0)


        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceSimilarOperator" ):
                return visitor.visitPrecedenceSimilarOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceSimilarOperator(self):

        localctx = HiveParser.PrecedenceSimilarOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_precedenceSimilarOperator)
        try:
            self.state = 3982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_LIKE, HiveParser.KW_RLIKE, HiveParser.KW_REGEXP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3977
                self.precedenceRegexpOperator()
                pass
            elif token in [HiveParser.LESSTHANOREQUALTO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3978
                self.match(HiveParser.LESSTHANOREQUALTO)
                pass
            elif token in [HiveParser.LESSTHAN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3979
                self.match(HiveParser.LESSTHAN)
                pass
            elif token in [HiveParser.GREATERTHANOREQUALTO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3980
                self.match(HiveParser.GREATERTHANOREQUALTO)
                pass
            elif token in [HiveParser.GREATERTHAN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3981
                self.match(HiveParser.GREATERTHAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceDistinctOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceDistinctOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceDistinctOperator" ):
                return visitor.visitPrecedenceDistinctOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceDistinctOperator(self):

        localctx = HiveParser.PrecedenceDistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_precedenceDistinctOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3984
            self.match(HiveParser.KW_IS)
            self.state = 3985
            self.match(HiveParser.KW_DISTINCT)
            self.state = 3986
            self.match(HiveParser.KW_FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceEqualOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def EQUAL_NS(self):
            return self.getToken(HiveParser.EQUAL_NS, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_DISTINCT(self):
            return self.getToken(HiveParser.KW_DISTINCT, 0)

        def KW_FROM(self):
            return self.getToken(HiveParser.KW_FROM, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceEqualOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceEqualOperator" ):
                return visitor.visitPrecedenceEqualOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceEqualOperator(self):

        localctx = HiveParser.PrecedenceEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_precedenceEqualOperator)
        try:
            self.state = 3995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.EQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3988
                self.match(HiveParser.EQUAL)
                pass
            elif token in [HiveParser.EQUAL_NS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3989
                self.match(HiveParser.EQUAL_NS)
                pass
            elif token in [HiveParser.NOTEQUAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3990
                self.match(HiveParser.NOTEQUAL)
                pass
            elif token in [HiveParser.KW_IS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3991
                self.match(HiveParser.KW_IS)
                self.state = 3992
                self.match(HiveParser.KW_NOT)
                self.state = 3993
                self.match(HiveParser.KW_DISTINCT)
                self.state = 3994
                self.match(HiveParser.KW_FROM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceNotOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceNotOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceNotOperator" ):
                return visitor.visitPrecedenceNotOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceNotOperator(self):

        localctx = HiveParser.PrecedenceNotOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_precedenceNotOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3997
            self.match(HiveParser.KW_NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceAndOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceAndOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceAndOperator" ):
                return visitor.visitPrecedenceAndOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceAndOperator(self):

        localctx = HiveParser.PrecedenceAndOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_precedenceAndOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3999
            self.match(HiveParser.KW_AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceOrOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceOrOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceOrOperator" ):
                return visitor.visitPrecedenceOrOperator(self)
            else:
                return visitor.visitChildren(self)




    def precedenceOrOperator(self):

        localctx = HiveParser.PrecedenceOrOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_precedenceOrOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4001
            self.match(HiveParser.KW_OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomExpression(self):
            return self.getTypedRuleContext(HiveParser.AtomExpressionContext,0)


        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.LSQUARE)
            else:
                return self.getToken(HiveParser.LSQUARE, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.RSQUARE)
            else:
                return self.getToken(HiveParser.RSQUARE, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.DOT)
            else:
                return self.getToken(HiveParser.DOT, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def nonReservedColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.NonReservedColumnNameContext)
            else:
                return self.getTypedRuleContext(HiveParser.NonReservedColumnNameContext,i)


        def precedenceUnaryOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceUnaryOperatorContext,0)


        def KW_EXISTS(self):
            return self.getToken(HiveParser.KW_EXISTS, 0)

        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def precedenceNotOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceNotOperatorContext,0)


        def multiNamedExpression(self):
            return self.getTypedRuleContext(HiveParser.MultiNamedExpressionContext,0)


        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def precedenceBitwiseXorOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseXorOperatorContext,0)


        def precedenceStarOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceStarOperatorContext,0)


        def precedencePlusOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedencePlusOperatorContext,0)


        def precedenceConcatenateOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceConcatenateOperatorContext,0)


        def precedenceAmpersandOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceAmpersandOperatorContext,0)


        def precedenceBitwiseOrOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceBitwiseOrOperatorContext,0)


        def precedenceEqualOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceEqualOperatorContext,0)


        def precedenceDistinctOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceDistinctOperatorContext,0)


        def precedenceAndOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceAndOperatorContext,0)


        def precedenceOrOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceOrOperatorContext,0)


        def KW_IS(self):
            return self.getToken(HiveParser.KW_IS, 0)

        def isCondition(self):
            return self.getTypedRuleContext(HiveParser.IsConditionContext,0)


        def precedenceSimilarExpressionPart(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionPartContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HiveParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 722
        self.enterRecursionRule(localctx, 722, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.state = 4004
                self.atomExpression()
                self.state = 4015
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,489,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4013
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
                        if la_ == 1:
                            self.state = 4005
                            self.match(HiveParser.LSQUARE)
                            self.state = 4006
                            self.expression(0)
                            self.state = 4007
                            self.match(HiveParser.RSQUARE)
                            pass

                        elif la_ == 2:
                            self.state = 4009
                            self.match(HiveParser.DOT)
                            self.state = 4010
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 4011
                            self.match(HiveParser.DOT)
                            self.state = 4012
                            self.nonReservedColumnName()
                            pass

                 
                    self.state = 4017
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,489,self._ctx)

                pass

            elif la_ == 2:
                self.state = 4018
                self.precedenceUnaryOperator()
                self.state = 4019
                self.expression(16)
                pass

            elif la_ == 3:
                self.state = 4021
                self.match(HiveParser.KW_EXISTS)
                self.state = 4022
                self.subQueryExpression()
                pass

            elif la_ == 4:
                self.state = 4023
                self.precedenceNotOperator()
                self.state = 4024
                self.expression(5)
                pass

            elif la_ == 5:
                self.state = 4026
                self.multiNamedExpression()
                pass

            elif la_ == 6:
                self.state = 4027
                self.match(HiveParser.LPAREN)
                self.state = 4028
                self.expression(0)
                self.state = 4029
                self.match(HiveParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 4079
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,493,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4077
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                    if la_ == 1:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4033
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 4034
                        self.precedenceBitwiseXorOperator()
                        self.state = 4035
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4037
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 4038
                        self.precedenceStarOperator()
                        self.state = 4039
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4041
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 4042
                        self.precedencePlusOperator()
                        self.state = 4043
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4045
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 4046
                        self.precedenceConcatenateOperator()
                        self.state = 4047
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4049
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 4050
                        self.precedenceAmpersandOperator()
                        self.state = 4051
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4053
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 4054
                        self.precedenceBitwiseOrOperator()
                        self.state = 4055
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4057
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 4060
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
                        if la_ == 1:
                            self.state = 4058
                            self.precedenceEqualOperator()
                            pass

                        elif la_ == 2:
                            self.state = 4059
                            self.precedenceDistinctOperator()
                            pass


                        self.state = 4062
                        self.expression(7)
                        pass

                    elif la_ == 8:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4064
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 4065
                        self.precedenceAndOperator()
                        self.state = 4066
                        self.expression(5)
                        pass

                    elif la_ == 9:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4068
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 4069
                        self.precedenceOrOperator()
                        self.state = 4070
                        self.expression(4)
                        pass

                    elif la_ == 10:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4072
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 4073
                        self.match(HiveParser.KW_IS)
                        self.state = 4074
                        self.isCondition()
                        pass

                    elif la_ == 11:
                        localctx = HiveParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 4075
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 4076
                        self.precedenceSimilarExpressionPart()
                        pass

             
                self.state = 4081
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,493,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def KW_AS(self):
            return self.getToken(HiveParser.KW_AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_asExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsExpression" ):
                return visitor.visitAsExpression(self)
            else:
                return visitor.visitChildren(self)




    def asExpression(self):

        localctx = HiveParser.AsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_asExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4082
            self.expression(0)
            self.state = 4085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 4083
                self.match(HiveParser.KW_AS)
                self.state = 4084
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiNamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.AsExpressionContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_multiNamedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiNamedExpression" ):
                return visitor.visitMultiNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiNamedExpression(self):

        localctx = HiveParser.MultiNamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_multiNamedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4087
            self.match(HiveParser.LPAREN)
            self.state = 4088
            self.asExpression()
            self.state = 4093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 4089
                self.match(HiveParser.COMMA)
                self.state = 4090
                self.asExpression()
                self.state = 4095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4096
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(HiveParser.SelectStatementContext,0)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_subQueryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubQueryExpression" ):
                return visitor.visitSubQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def subQueryExpression(self):

        localctx = HiveParser.SubQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_subQueryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4098
            self.match(HiveParser.LPAREN)
            self.state = 4099
            self.selectStatement()
            self.state = 4100
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceSimilarOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def precedenceSimilarExpressionAtom(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionAtomContext,0)


        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def precedenceSimilarExpressionPartNot(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionPartNotContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionPart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceSimilarExpressionPart" ):
                return visitor.visitPrecedenceSimilarExpressionPart(self)
            else:
                return visitor.visitChildren(self)




    def precedenceSimilarExpressionPart(self):

        localctx = HiveParser.PrecedenceSimilarExpressionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_precedenceSimilarExpressionPart)
        try:
            self.state = 4108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4102
                self.precedenceSimilarOperator()
                self.state = 4103
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4105
                self.precedenceSimilarExpressionAtom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4106
                self.match(HiveParser.KW_NOT)
                self.state = 4107
                self.precedenceSimilarExpressionPartNot()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def precedenceSimilarExpressionIn(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionInContext,0)


        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HiveParser.ExpressionContext,i)


        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_ANY(self):
            return self.getToken(HiveParser.KW_ANY, 0)

        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def KW_ALL(self):
            return self.getToken(HiveParser.KW_ALL, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionAtom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceSimilarExpressionAtom" ):
                return visitor.visitPrecedenceSimilarExpressionAtom(self)
            else:
                return visitor.visitChildren(self)




    def precedenceSimilarExpressionAtom(self):

        localctx = HiveParser.PrecedenceSimilarExpressionAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_precedenceSimilarExpressionAtom)
        try:
            self.state = 4123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4110
                self.match(HiveParser.KW_IN)
                self.state = 4111
                self.precedenceSimilarExpressionIn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4112
                self.match(HiveParser.KW_BETWEEN)
                self.state = 4113
                self.expression(0)
                self.state = 4114
                self.match(HiveParser.KW_AND)
                self.state = 4115
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4117
                self.match(HiveParser.KW_LIKE)
                self.state = 4118
                self.match(HiveParser.KW_ANY)
                self.state = 4119
                self.expressionsInParenthesis()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4120
                self.match(HiveParser.KW_LIKE)
                self.state = 4121
                self.match(HiveParser.KW_ALL)
                self.state = 4122
                self.expressionsInParenthesis()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subQueryExpression(self):
            return self.getTypedRuleContext(HiveParser.SubQueryExpressionContext,0)


        def expressionsInParenthesis(self):
            return self.getTypedRuleContext(HiveParser.ExpressionsInParenthesisContext,0)


        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionIn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceSimilarExpressionIn" ):
                return visitor.visitPrecedenceSimilarExpressionIn(self)
            else:
                return visitor.visitChildren(self)




    def precedenceSimilarExpressionIn(self):

        localctx = HiveParser.PrecedenceSimilarExpressionInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_precedenceSimilarExpressionIn)
        try:
            self.state = 4128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4125
                self.subQueryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4126
                self.expressionsInParenthesis()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4127
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecedenceSimilarExpressionPartNotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceRegexpOperator(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceRegexpOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(HiveParser.ExpressionContext,0)


        def precedenceSimilarExpressionAtom(self):
            return self.getTypedRuleContext(HiveParser.PrecedenceSimilarExpressionAtomContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_precedenceSimilarExpressionPartNot

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecedenceSimilarExpressionPartNot" ):
                return visitor.visitPrecedenceSimilarExpressionPartNot(self)
            else:
                return visitor.visitChildren(self)




    def precedenceSimilarExpressionPartNot(self):

        localctx = HiveParser.PrecedenceSimilarExpressionPartNotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_precedenceSimilarExpressionPartNot)
        try:
            self.state = 4134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4130
                self.precedenceRegexpOperator()
                self.state = 4131
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4133
                self.precedenceSimilarExpressionAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_booleanValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = HiveParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4136
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_TRUE or _la==HiveParser.KW_FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueTokContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRUE(self):
            return self.getToken(HiveParser.KW_TRUE, 0)

        def KW_FALSE(self):
            return self.getToken(HiveParser.KW_FALSE, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_booleanValueTok

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValueTok" ):
                return visitor.visitBooleanValueTok(self)
            else:
                return visitor.visitChildren(self)




    def booleanValueTok(self):

        localctx = HiveParser.BooleanValueTokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_booleanValueTok)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4138
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_TRUE or _la==HiveParser.KW_FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOrPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(HiveParser.TableNameContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(HiveParser.PartitionSpecContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_tableOrPartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOrPartition" ):
                return visitor.visitTableOrPartition(self)
            else:
                return visitor.visitChildren(self)




    def tableOrPartition(self):

        localctx = HiveParser.TableOrPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_tableOrPartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4140
            self.tableName()
            self.state = 4142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.KW_PARTITION:
                self.state = 4141
                self.partitionSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(HiveParser.PartitionValContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_partitionSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = HiveParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4144
            self.match(HiveParser.KW_PARTITION)
            self.state = 4145
            self.match(HiveParser.LPAREN)
            self.state = 4146
            self.partitionVal()
            self.state = 4151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 4147
                self.match(HiveParser.COMMA)
                self.state = 4148
                self.partitionVal()
                self.state = 4153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4154
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_partitionVal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = HiveParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4156
            self.identifier()
            self.state = 4159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==HiveParser.EQUAL:
                self.state = 4157
                self.match(HiveParser.EQUAL)
                self.state = 4158
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PARTITION(self):
            return self.getToken(HiveParser.KW_PARTITION, 0)

        def LPAREN(self):
            return self.getToken(HiveParser.LPAREN, 0)

        def dropPartitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.DropPartitionValContext)
            else:
                return self.getTypedRuleContext(HiveParser.DropPartitionValContext,i)


        def RPAREN(self):
            return self.getToken(HiveParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HiveParser.COMMA)
            else:
                return self.getToken(HiveParser.COMMA, i)

        def getRuleIndex(self):
            return HiveParser.RULE_dropPartitionSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropPartitionSpec" ):
                return visitor.visitDropPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def dropPartitionSpec(self):

        localctx = HiveParser.DropPartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_dropPartitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4161
            self.match(HiveParser.KW_PARTITION)
            self.state = 4162
            self.match(HiveParser.LPAREN)
            self.state = 4163
            self.dropPartitionVal()
            self.state = 4168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==HiveParser.COMMA:
                self.state = 4164
                self.match(HiveParser.COMMA)
                self.state = 4165
                self.dropPartitionVal()
                self.state = 4170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4171
            self.match(HiveParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def dropPartitionOperator(self):
            return self.getTypedRuleContext(HiveParser.DropPartitionOperatorContext,0)


        def constant(self):
            return self.getTypedRuleContext(HiveParser.ConstantContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_dropPartitionVal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropPartitionVal" ):
                return visitor.visitDropPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def dropPartitionVal(self):

        localctx = HiveParser.DropPartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_dropPartitionVal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4173
            self.identifier()
            self.state = 4174
            self.dropPartitionOperator()
            self.state = 4175
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropPartitionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_dropPartitionOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropPartitionOperator" ):
                return visitor.visitDropPartitionOperator(self)
            else:
                return visitor.visitChildren(self)




    def dropPartitionOperator(self):

        localctx = HiveParser.DropPartitionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_dropPartitionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4177
            _la = self._input.LA(1)
            if not(((((_la - 353)) & ~0x3f) == 0 and ((1 << (_la - 353)) & ((1 << (HiveParser.EQUAL - 353)) | (1 << (HiveParser.NOTEQUAL - 353)) | (1 << (HiveParser.LESSTHANOREQUALTO - 353)) | (1 << (HiveParser.LESSTHAN - 353)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 353)) | (1 << (HiveParser.GREATERTHAN - 353)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysFuncNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AND(self):
            return self.getToken(HiveParser.KW_AND, 0)

        def KW_OR(self):
            return self.getToken(HiveParser.KW_OR, 0)

        def KW_NOT(self):
            return self.getToken(HiveParser.KW_NOT, 0)

        def KW_LIKE(self):
            return self.getToken(HiveParser.KW_LIKE, 0)

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_CASE(self):
            return self.getToken(HiveParser.KW_CASE, 0)

        def KW_WHEN(self):
            return self.getToken(HiveParser.KW_WHEN, 0)

        def KW_FLOOR(self):
            return self.getToken(HiveParser.KW_FLOOR, 0)

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def EQUAL(self):
            return self.getToken(HiveParser.EQUAL, 0)

        def EQUAL_NS(self):
            return self.getToken(HiveParser.EQUAL_NS, 0)

        def NOTEQUAL(self):
            return self.getToken(HiveParser.NOTEQUAL, 0)

        def LESSTHANOREQUALTO(self):
            return self.getToken(HiveParser.LESSTHANOREQUALTO, 0)

        def LESSTHAN(self):
            return self.getToken(HiveParser.LESSTHAN, 0)

        def GREATERTHANOREQUALTO(self):
            return self.getToken(HiveParser.GREATERTHANOREQUALTO, 0)

        def GREATERTHAN(self):
            return self.getToken(HiveParser.GREATERTHAN, 0)

        def DIVIDE(self):
            return self.getToken(HiveParser.DIVIDE, 0)

        def PLUS(self):
            return self.getToken(HiveParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(HiveParser.MINUS, 0)

        def STAR(self):
            return self.getToken(HiveParser.STAR, 0)

        def MOD(self):
            return self.getToken(HiveParser.MOD, 0)

        def DIV(self):
            return self.getToken(HiveParser.DIV, 0)

        def AMPERSAND(self):
            return self.getToken(HiveParser.AMPERSAND, 0)

        def TILDE(self):
            return self.getToken(HiveParser.TILDE, 0)

        def BITWISEOR(self):
            return self.getToken(HiveParser.BITWISEOR, 0)

        def BITWISEXOR(self):
            return self.getToken(HiveParser.BITWISEXOR, 0)

        def KW_RLIKE(self):
            return self.getToken(HiveParser.KW_RLIKE, 0)

        def KW_REGEXP(self):
            return self.getToken(HiveParser.KW_REGEXP, 0)

        def KW_IN(self):
            return self.getToken(HiveParser.KW_IN, 0)

        def KW_BETWEEN(self):
            return self.getToken(HiveParser.KW_BETWEEN, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_sysFuncNames

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSysFuncNames" ):
                return visitor.visitSysFuncNames(self)
            else:
                return visitor.visitChildren(self)




    def sysFuncNames(self):

        localctx = HiveParser.SysFuncNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_sysFuncNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4179
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_AND) | (1 << HiveParser.KW_OR) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_LIKE) | (1 << HiveParser.KW_IF))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (HiveParser.KW_BOOLEAN - 87)) | (1 << (HiveParser.KW_TINYINT - 87)) | (1 << (HiveParser.KW_SMALLINT - 87)) | (1 << (HiveParser.KW_INT - 87)) | (1 << (HiveParser.KW_BIGINT - 87)) | (1 << (HiveParser.KW_FLOAT - 87)) | (1 << (HiveParser.KW_DOUBLE - 87)) | (1 << (HiveParser.KW_STRING - 87)) | (1 << (HiveParser.KW_ARRAY - 87)) | (1 << (HiveParser.KW_STRUCT - 87)) | (1 << (HiveParser.KW_MAP - 87)) | (1 << (HiveParser.KW_UNIONTYPE - 87)) | (1 << (HiveParser.KW_RLIKE - 87)) | (1 << (HiveParser.KW_REGEXP - 87)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (HiveParser.KW_CASE - 172)) | (1 << (HiveParser.KW_WHEN - 172)) | (1 << (HiveParser.KW_IN - 172)) | (1 << (HiveParser.KW_BETWEEN - 172)) | (1 << (HiveParser.KW_BINARY - 172)))) != 0) or ((((_la - 311)) & ~0x3f) == 0 and ((1 << (_la - 311)) & ((1 << (HiveParser.KW_FLOOR - 311)) | (1 << (HiveParser.EQUAL - 311)) | (1 << (HiveParser.EQUAL_NS - 311)) | (1 << (HiveParser.NOTEQUAL - 311)) | (1 << (HiveParser.LESSTHANOREQUALTO - 311)) | (1 << (HiveParser.LESSTHAN - 311)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 311)) | (1 << (HiveParser.GREATERTHAN - 311)) | (1 << (HiveParser.DIVIDE - 311)) | (1 << (HiveParser.PLUS - 311)) | (1 << (HiveParser.MINUS - 311)) | (1 << (HiveParser.STAR - 311)) | (1 << (HiveParser.MOD - 311)) | (1 << (HiveParser.DIV - 311)) | (1 << (HiveParser.AMPERSAND - 311)) | (1 << (HiveParser.TILDE - 311)) | (1 << (HiveParser.BITWISEOR - 311)) | (1 << (HiveParser.BITWISEXOR - 311)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescFuncNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sysFuncNames(self):
            return self.getTypedRuleContext(HiveParser.SysFuncNamesContext,0)


        def StringLiteral(self):
            return self.getToken(HiveParser.StringLiteral, 0)

        def functionIdentifier(self):
            return self.getTypedRuleContext(HiveParser.FunctionIdentifierContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_descFuncNames

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescFuncNames" ):
                return visitor.visitDescFuncNames(self)
            else:
                return visitor.visitChildren(self)




    def descFuncNames(self):

        localctx = HiveParser.DescFuncNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_descFuncNames)
        try:
            self.state = 4184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4181
                self.sysFuncNames()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4182
                self.match(HiveParser.StringLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4183
                self.functionIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(HiveParser.Identifier, 0)

        def nonReserved(self):
            return self.getTypedRuleContext(HiveParser.NonReservedContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HiveParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_identifier)
        try:
            self.state = 4188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4186
                self.match(HiveParser.Identifier)
                pass
            elif token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4187
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HiveParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HiveParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(HiveParser.DOT, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_functionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = HiveParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_functionIdentifier)
        try:
            self.state = 4195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4190
                self.identifier()
                self.state = 4191
                self.match(HiveParser.DOT)
                self.state = 4192
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4194
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HiveParser.IdentifierContext,0)


        def QuotedIdentifier(self):
            return self.getToken(HiveParser.QuotedIdentifier, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_principalIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrincipalIdentifier" ):
                return visitor.visitPrincipalIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def principalIdentifier(self):

        localctx = HiveParser.PrincipalIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_principalIdentifier)
        try:
            self.state = 4199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_ASC, HiveParser.KW_DESC, HiveParser.KW_NULLS, HiveParser.KW_LAST, HiveParser.KW_GROUP, HiveParser.KW_OVERWRITE, HiveParser.KW_PARTITIONS, HiveParser.KW_TABLES, HiveParser.KW_COLUMNS, HiveParser.KW_INDEX, HiveParser.KW_INDEXES, HiveParser.KW_REBUILD, HiveParser.KW_FUNCTIONS, HiveParser.KW_SHOW, HiveParser.KW_MSCK, HiveParser.KW_REPAIR, HiveParser.KW_DIRECTORY, HiveParser.KW_CLUSTER, HiveParser.KW_DISTRIBUTE, HiveParser.KW_SORT, HiveParser.KW_LOAD, HiveParser.KW_EXPORT, HiveParser.KW_REPLICATION, HiveParser.KW_METADATA, HiveParser.KW_DATA, HiveParser.KW_INPATH, HiveParser.KW_CHANGE, HiveParser.KW_FIRST, HiveParser.KW_AFTER, HiveParser.KW_RENAME, HiveParser.KW_COMMENT, HiveParser.KW_TINYINT, HiveParser.KW_DATETIME, HiveParser.KW_ZONE, HiveParser.KW_STRING, HiveParser.KW_STRUCT, HiveParser.KW_UNIONTYPE, HiveParser.KW_PARTITIONED, HiveParser.KW_CLUSTERED, HiveParser.KW_SORTED, HiveParser.KW_BUCKETS, HiveParser.KW_FORMAT, HiveParser.KW_DELIMITED, HiveParser.KW_FIELDS, HiveParser.KW_TERMINATED, HiveParser.KW_ESCAPED, HiveParser.KW_COLLECTION, HiveParser.KW_ITEMS, HiveParser.KW_KEYS, HiveParser.KW_KEY_TYPE, HiveParser.KW_KILL, HiveParser.KW_LINES, HiveParser.KW_STORED, HiveParser.KW_FILEFORMAT, HiveParser.KW_INPUTFORMAT, HiveParser.KW_OUTPUTFORMAT, HiveParser.KW_INPUTDRIVER, HiveParser.KW_OUTPUTDRIVER, HiveParser.KW_ENABLE, HiveParser.KW_DISABLE, HiveParser.KW_LOCATION, HiveParser.KW_BUCKET, HiveParser.KW_ADD, HiveParser.KW_REPLACE, HiveParser.KW_TEMPORARY, HiveParser.KW_FILE, HiveParser.KW_JAR, HiveParser.KW_EXPLAIN, HiveParser.KW_FORMATTED, HiveParser.KW_DEPENDENCY, HiveParser.KW_LOGICAL, HiveParser.KW_SERDE, HiveParser.KW_DEFERRED, HiveParser.KW_SERDEPROPERTIES, HiveParser.KW_DBPROPERTIES, HiveParser.KW_LIMIT, HiveParser.KW_OFFSET, HiveParser.KW_UNSET, HiveParser.KW_TBLPROPERTIES, HiveParser.KW_IDXPROPERTIES, HiveParser.KW_VALUE_TYPE, HiveParser.KW_ELEM_TYPE, HiveParser.KW_DEFINED, HiveParser.KW_MAPJOIN, HiveParser.KW_STREAMTABLE, HiveParser.KW_CLUSTERSTATUS, HiveParser.KW_UTC, HiveParser.KW_UTCTIMESTAMP, HiveParser.KW_LONG, HiveParser.KW_PLUS, HiveParser.KW_VIEW, HiveParser.KW_VIEWS, HiveParser.KW_DATABASES, HiveParser.KW_MATERIALIZED, HiveParser.KW_SCHEMA, HiveParser.KW_SCHEMAS, HiveParser.KW_SSL, HiveParser.KW_UNDO, HiveParser.KW_LOCK, HiveParser.KW_LOCKS, HiveParser.KW_UNLOCK, HiveParser.KW_SHARED, HiveParser.KW_EXCLUSIVE, HiveParser.KW_PROCEDURE, HiveParser.KW_UNSIGNED, HiveParser.KW_WHILE, HiveParser.KW_READ, HiveParser.KW_PURGE, HiveParser.KW_ANALYZE, HiveParser.KW_BEFORE, HiveParser.KW_CONTINUE, HiveParser.KW_RECORDREADER, HiveParser.KW_RECORDWRITER, HiveParser.KW_SEMI, HiveParser.KW_TOUCH, HiveParser.KW_ARCHIVE, HiveParser.KW_UNARCHIVE, HiveParser.KW_COMPUTE, HiveParser.KW_STATISTICS, HiveParser.KW_USE, HiveParser.KW_OPTION, HiveParser.KW_CONCATENATE, HiveParser.KW_SHOW_DATABASE, HiveParser.KW_RESTRICT, HiveParser.KW_CASCADE, HiveParser.KW_SKEWED, HiveParser.KW_DIRECTORIES, HiveParser.KW_SETS, HiveParser.KW_NOSCAN, HiveParser.KW_ROLE, HiveParser.KW_ROLES, HiveParser.KW_URI, HiveParser.KW_SERVER, HiveParser.KW_ADMIN, HiveParser.KW_OWNER, HiveParser.KW_PRINCIPALS, HiveParser.KW_COMPACT, HiveParser.KW_COMPACTIONS, HiveParser.KW_TRANSACTIONS, HiveParser.KW_REWRITE, HiveParser.KW_REOPTIMIZATION, HiveParser.KW_RELOAD, HiveParser.KW_YEAR, HiveParser.KW_QUERY, HiveParser.KW_QUARTER, HiveParser.KW_MONTH, HiveParser.KW_WEEK, HiveParser.KW_DAY, HiveParser.KW_DOW, HiveParser.KW_HOUR, HiveParser.KW_MINUTE, HiveParser.KW_SECOND, HiveParser.KW_TRANSACTION, HiveParser.KW_WORK, HiveParser.KW_WRITE, HiveParser.KW_ISOLATION, HiveParser.KW_LEVEL, HiveParser.KW_SNAPSHOT, HiveParser.KW_AUTOCOMMIT, HiveParser.KW_CACHE, HiveParser.KW_ENFORCED, HiveParser.KW_VALIDATE, HiveParser.KW_NOVALIDATE, HiveParser.KW_RELY, HiveParser.KW_NORELY, HiveParser.KW_KEY, HiveParser.KW_ABORT, HiveParser.KW_MATCHED, HiveParser.KW_REPL, HiveParser.KW_DUMP, HiveParser.KW_STATUS, HiveParser.KW_VECTORIZATION, HiveParser.KW_SUMMARY, HiveParser.KW_OPERATOR, HiveParser.KW_EXPRESSION, HiveParser.KW_DETAIL, HiveParser.KW_WAIT, HiveParser.KW_RESOURCE, HiveParser.KW_PLAN, HiveParser.KW_QUERY_PARALLELISM, HiveParser.KW_PLANS, HiveParser.KW_ACTIVATE, HiveParser.KW_DEFAULT, HiveParser.KW_CHECK, HiveParser.KW_POOL, HiveParser.KW_MOVE, HiveParser.KW_DO, HiveParser.KW_ALLOC_FRACTION, HiveParser.KW_SCHEDULING_POLICY, HiveParser.KW_PATH, HiveParser.KW_MAPPING, HiveParser.KW_WORKLOAD, HiveParser.KW_MANAGEMENT, HiveParser.KW_ACTIVE, HiveParser.KW_UNMANAGED, HiveParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4197
                self.identifier()
                pass
            elif token in [HiveParser.QuotedIdentifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4198
                self.match(HiveParser.QuotedIdentifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABORT(self):
            return self.getToken(HiveParser.KW_ABORT, 0)

        def KW_ADD(self):
            return self.getToken(HiveParser.KW_ADD, 0)

        def KW_ADMIN(self):
            return self.getToken(HiveParser.KW_ADMIN, 0)

        def KW_AFTER(self):
            return self.getToken(HiveParser.KW_AFTER, 0)

        def KW_ANALYZE(self):
            return self.getToken(HiveParser.KW_ANALYZE, 0)

        def KW_ARCHIVE(self):
            return self.getToken(HiveParser.KW_ARCHIVE, 0)

        def KW_ASC(self):
            return self.getToken(HiveParser.KW_ASC, 0)

        def KW_BEFORE(self):
            return self.getToken(HiveParser.KW_BEFORE, 0)

        def KW_BUCKET(self):
            return self.getToken(HiveParser.KW_BUCKET, 0)

        def KW_BUCKETS(self):
            return self.getToken(HiveParser.KW_BUCKETS, 0)

        def KW_CASCADE(self):
            return self.getToken(HiveParser.KW_CASCADE, 0)

        def KW_CHANGE(self):
            return self.getToken(HiveParser.KW_CHANGE, 0)

        def KW_CHECK(self):
            return self.getToken(HiveParser.KW_CHECK, 0)

        def KW_CLUSTER(self):
            return self.getToken(HiveParser.KW_CLUSTER, 0)

        def KW_CLUSTERED(self):
            return self.getToken(HiveParser.KW_CLUSTERED, 0)

        def KW_CLUSTERSTATUS(self):
            return self.getToken(HiveParser.KW_CLUSTERSTATUS, 0)

        def KW_COLLECTION(self):
            return self.getToken(HiveParser.KW_COLLECTION, 0)

        def KW_COLUMNS(self):
            return self.getToken(HiveParser.KW_COLUMNS, 0)

        def KW_COMMENT(self):
            return self.getToken(HiveParser.KW_COMMENT, 0)

        def KW_COMPACT(self):
            return self.getToken(HiveParser.KW_COMPACT, 0)

        def KW_COMPACTIONS(self):
            return self.getToken(HiveParser.KW_COMPACTIONS, 0)

        def KW_COMPUTE(self):
            return self.getToken(HiveParser.KW_COMPUTE, 0)

        def KW_CONCATENATE(self):
            return self.getToken(HiveParser.KW_CONCATENATE, 0)

        def KW_CONTINUE(self):
            return self.getToken(HiveParser.KW_CONTINUE, 0)

        def KW_DATA(self):
            return self.getToken(HiveParser.KW_DATA, 0)

        def KW_DAY(self):
            return self.getToken(HiveParser.KW_DAY, 0)

        def KW_DATABASES(self):
            return self.getToken(HiveParser.KW_DATABASES, 0)

        def KW_DATETIME(self):
            return self.getToken(HiveParser.KW_DATETIME, 0)

        def KW_DBPROPERTIES(self):
            return self.getToken(HiveParser.KW_DBPROPERTIES, 0)

        def KW_DEFERRED(self):
            return self.getToken(HiveParser.KW_DEFERRED, 0)

        def KW_DEFINED(self):
            return self.getToken(HiveParser.KW_DEFINED, 0)

        def KW_DELIMITED(self):
            return self.getToken(HiveParser.KW_DELIMITED, 0)

        def KW_DEPENDENCY(self):
            return self.getToken(HiveParser.KW_DEPENDENCY, 0)

        def KW_DESC(self):
            return self.getToken(HiveParser.KW_DESC, 0)

        def KW_DIRECTORIES(self):
            return self.getToken(HiveParser.KW_DIRECTORIES, 0)

        def KW_DIRECTORY(self):
            return self.getToken(HiveParser.KW_DIRECTORY, 0)

        def KW_DISABLE(self):
            return self.getToken(HiveParser.KW_DISABLE, 0)

        def KW_DISTRIBUTE(self):
            return self.getToken(HiveParser.KW_DISTRIBUTE, 0)

        def KW_DOW(self):
            return self.getToken(HiveParser.KW_DOW, 0)

        def KW_ELEM_TYPE(self):
            return self.getToken(HiveParser.KW_ELEM_TYPE, 0)

        def KW_ENABLE(self):
            return self.getToken(HiveParser.KW_ENABLE, 0)

        def KW_ENFORCED(self):
            return self.getToken(HiveParser.KW_ENFORCED, 0)

        def KW_ESCAPED(self):
            return self.getToken(HiveParser.KW_ESCAPED, 0)

        def KW_EXCLUSIVE(self):
            return self.getToken(HiveParser.KW_EXCLUSIVE, 0)

        def KW_EXPLAIN(self):
            return self.getToken(HiveParser.KW_EXPLAIN, 0)

        def KW_EXPORT(self):
            return self.getToken(HiveParser.KW_EXPORT, 0)

        def KW_FIELDS(self):
            return self.getToken(HiveParser.KW_FIELDS, 0)

        def KW_FILE(self):
            return self.getToken(HiveParser.KW_FILE, 0)

        def KW_FILEFORMAT(self):
            return self.getToken(HiveParser.KW_FILEFORMAT, 0)

        def KW_FIRST(self):
            return self.getToken(HiveParser.KW_FIRST, 0)

        def KW_FORMAT(self):
            return self.getToken(HiveParser.KW_FORMAT, 0)

        def KW_FORMATTED(self):
            return self.getToken(HiveParser.KW_FORMATTED, 0)

        def KW_FUNCTIONS(self):
            return self.getToken(HiveParser.KW_FUNCTIONS, 0)

        def KW_HOUR(self):
            return self.getToken(HiveParser.KW_HOUR, 0)

        def KW_IDXPROPERTIES(self):
            return self.getToken(HiveParser.KW_IDXPROPERTIES, 0)

        def KW_INDEX(self):
            return self.getToken(HiveParser.KW_INDEX, 0)

        def KW_INDEXES(self):
            return self.getToken(HiveParser.KW_INDEXES, 0)

        def KW_INPATH(self):
            return self.getToken(HiveParser.KW_INPATH, 0)

        def KW_INPUTDRIVER(self):
            return self.getToken(HiveParser.KW_INPUTDRIVER, 0)

        def KW_INPUTFORMAT(self):
            return self.getToken(HiveParser.KW_INPUTFORMAT, 0)

        def KW_ITEMS(self):
            return self.getToken(HiveParser.KW_ITEMS, 0)

        def KW_JAR(self):
            return self.getToken(HiveParser.KW_JAR, 0)

        def KW_KILL(self):
            return self.getToken(HiveParser.KW_KILL, 0)

        def KW_KEYS(self):
            return self.getToken(HiveParser.KW_KEYS, 0)

        def KW_KEY_TYPE(self):
            return self.getToken(HiveParser.KW_KEY_TYPE, 0)

        def KW_LAST(self):
            return self.getToken(HiveParser.KW_LAST, 0)

        def KW_LIMIT(self):
            return self.getToken(HiveParser.KW_LIMIT, 0)

        def KW_OFFSET(self):
            return self.getToken(HiveParser.KW_OFFSET, 0)

        def KW_LINES(self):
            return self.getToken(HiveParser.KW_LINES, 0)

        def KW_LOAD(self):
            return self.getToken(HiveParser.KW_LOAD, 0)

        def KW_LOCATION(self):
            return self.getToken(HiveParser.KW_LOCATION, 0)

        def KW_LOCK(self):
            return self.getToken(HiveParser.KW_LOCK, 0)

        def KW_LOCKS(self):
            return self.getToken(HiveParser.KW_LOCKS, 0)

        def KW_LOGICAL(self):
            return self.getToken(HiveParser.KW_LOGICAL, 0)

        def KW_LONG(self):
            return self.getToken(HiveParser.KW_LONG, 0)

        def KW_MAPJOIN(self):
            return self.getToken(HiveParser.KW_MAPJOIN, 0)

        def KW_MATERIALIZED(self):
            return self.getToken(HiveParser.KW_MATERIALIZED, 0)

        def KW_METADATA(self):
            return self.getToken(HiveParser.KW_METADATA, 0)

        def KW_MINUTE(self):
            return self.getToken(HiveParser.KW_MINUTE, 0)

        def KW_MONTH(self):
            return self.getToken(HiveParser.KW_MONTH, 0)

        def KW_MSCK(self):
            return self.getToken(HiveParser.KW_MSCK, 0)

        def KW_NOSCAN(self):
            return self.getToken(HiveParser.KW_NOSCAN, 0)

        def KW_NULLS(self):
            return self.getToken(HiveParser.KW_NULLS, 0)

        def KW_OPTION(self):
            return self.getToken(HiveParser.KW_OPTION, 0)

        def KW_OUTPUTDRIVER(self):
            return self.getToken(HiveParser.KW_OUTPUTDRIVER, 0)

        def KW_OUTPUTFORMAT(self):
            return self.getToken(HiveParser.KW_OUTPUTFORMAT, 0)

        def KW_OVERWRITE(self):
            return self.getToken(HiveParser.KW_OVERWRITE, 0)

        def KW_OWNER(self):
            return self.getToken(HiveParser.KW_OWNER, 0)

        def KW_PARTITIONED(self):
            return self.getToken(HiveParser.KW_PARTITIONED, 0)

        def KW_PARTITIONS(self):
            return self.getToken(HiveParser.KW_PARTITIONS, 0)

        def KW_PLUS(self):
            return self.getToken(HiveParser.KW_PLUS, 0)

        def KW_PRINCIPALS(self):
            return self.getToken(HiveParser.KW_PRINCIPALS, 0)

        def KW_PURGE(self):
            return self.getToken(HiveParser.KW_PURGE, 0)

        def KW_QUERY(self):
            return self.getToken(HiveParser.KW_QUERY, 0)

        def KW_QUARTER(self):
            return self.getToken(HiveParser.KW_QUARTER, 0)

        def KW_READ(self):
            return self.getToken(HiveParser.KW_READ, 0)

        def KW_REBUILD(self):
            return self.getToken(HiveParser.KW_REBUILD, 0)

        def KW_RECORDREADER(self):
            return self.getToken(HiveParser.KW_RECORDREADER, 0)

        def KW_RECORDWRITER(self):
            return self.getToken(HiveParser.KW_RECORDWRITER, 0)

        def KW_RELOAD(self):
            return self.getToken(HiveParser.KW_RELOAD, 0)

        def KW_RENAME(self):
            return self.getToken(HiveParser.KW_RENAME, 0)

        def KW_REPAIR(self):
            return self.getToken(HiveParser.KW_REPAIR, 0)

        def KW_REPLACE(self):
            return self.getToken(HiveParser.KW_REPLACE, 0)

        def KW_REPLICATION(self):
            return self.getToken(HiveParser.KW_REPLICATION, 0)

        def KW_RESTRICT(self):
            return self.getToken(HiveParser.KW_RESTRICT, 0)

        def KW_REWRITE(self):
            return self.getToken(HiveParser.KW_REWRITE, 0)

        def KW_ROLE(self):
            return self.getToken(HiveParser.KW_ROLE, 0)

        def KW_ROLES(self):
            return self.getToken(HiveParser.KW_ROLES, 0)

        def KW_SCHEMA(self):
            return self.getToken(HiveParser.KW_SCHEMA, 0)

        def KW_SCHEMAS(self):
            return self.getToken(HiveParser.KW_SCHEMAS, 0)

        def KW_SECOND(self):
            return self.getToken(HiveParser.KW_SECOND, 0)

        def KW_SEMI(self):
            return self.getToken(HiveParser.KW_SEMI, 0)

        def KW_SERDE(self):
            return self.getToken(HiveParser.KW_SERDE, 0)

        def KW_SERDEPROPERTIES(self):
            return self.getToken(HiveParser.KW_SERDEPROPERTIES, 0)

        def KW_SERVER(self):
            return self.getToken(HiveParser.KW_SERVER, 0)

        def KW_SETS(self):
            return self.getToken(HiveParser.KW_SETS, 0)

        def KW_SHARED(self):
            return self.getToken(HiveParser.KW_SHARED, 0)

        def KW_SHOW(self):
            return self.getToken(HiveParser.KW_SHOW, 0)

        def KW_SHOW_DATABASE(self):
            return self.getToken(HiveParser.KW_SHOW_DATABASE, 0)

        def KW_SKEWED(self):
            return self.getToken(HiveParser.KW_SKEWED, 0)

        def KW_SORT(self):
            return self.getToken(HiveParser.KW_SORT, 0)

        def KW_SORTED(self):
            return self.getToken(HiveParser.KW_SORTED, 0)

        def KW_SSL(self):
            return self.getToken(HiveParser.KW_SSL, 0)

        def KW_STATISTICS(self):
            return self.getToken(HiveParser.KW_STATISTICS, 0)

        def KW_STORED(self):
            return self.getToken(HiveParser.KW_STORED, 0)

        def KW_STREAMTABLE(self):
            return self.getToken(HiveParser.KW_STREAMTABLE, 0)

        def KW_STRING(self):
            return self.getToken(HiveParser.KW_STRING, 0)

        def KW_STRUCT(self):
            return self.getToken(HiveParser.KW_STRUCT, 0)

        def KW_TABLES(self):
            return self.getToken(HiveParser.KW_TABLES, 0)

        def KW_TBLPROPERTIES(self):
            return self.getToken(HiveParser.KW_TBLPROPERTIES, 0)

        def KW_TEMPORARY(self):
            return self.getToken(HiveParser.KW_TEMPORARY, 0)

        def KW_TERMINATED(self):
            return self.getToken(HiveParser.KW_TERMINATED, 0)

        def KW_TINYINT(self):
            return self.getToken(HiveParser.KW_TINYINT, 0)

        def KW_TOUCH(self):
            return self.getToken(HiveParser.KW_TOUCH, 0)

        def KW_TRANSACTIONS(self):
            return self.getToken(HiveParser.KW_TRANSACTIONS, 0)

        def KW_UNARCHIVE(self):
            return self.getToken(HiveParser.KW_UNARCHIVE, 0)

        def KW_UNDO(self):
            return self.getToken(HiveParser.KW_UNDO, 0)

        def KW_UNIONTYPE(self):
            return self.getToken(HiveParser.KW_UNIONTYPE, 0)

        def KW_UNLOCK(self):
            return self.getToken(HiveParser.KW_UNLOCK, 0)

        def KW_UNSET(self):
            return self.getToken(HiveParser.KW_UNSET, 0)

        def KW_UNSIGNED(self):
            return self.getToken(HiveParser.KW_UNSIGNED, 0)

        def KW_URI(self):
            return self.getToken(HiveParser.KW_URI, 0)

        def KW_USE(self):
            return self.getToken(HiveParser.KW_USE, 0)

        def KW_UTC(self):
            return self.getToken(HiveParser.KW_UTC, 0)

        def KW_UTCTIMESTAMP(self):
            return self.getToken(HiveParser.KW_UTCTIMESTAMP, 0)

        def KW_VALUE_TYPE(self):
            return self.getToken(HiveParser.KW_VALUE_TYPE, 0)

        def KW_VIEW(self):
            return self.getToken(HiveParser.KW_VIEW, 0)

        def KW_WEEK(self):
            return self.getToken(HiveParser.KW_WEEK, 0)

        def KW_WHILE(self):
            return self.getToken(HiveParser.KW_WHILE, 0)

        def KW_YEAR(self):
            return self.getToken(HiveParser.KW_YEAR, 0)

        def KW_WORK(self):
            return self.getToken(HiveParser.KW_WORK, 0)

        def KW_TRANSACTION(self):
            return self.getToken(HiveParser.KW_TRANSACTION, 0)

        def KW_WRITE(self):
            return self.getToken(HiveParser.KW_WRITE, 0)

        def KW_ISOLATION(self):
            return self.getToken(HiveParser.KW_ISOLATION, 0)

        def KW_LEVEL(self):
            return self.getToken(HiveParser.KW_LEVEL, 0)

        def KW_SNAPSHOT(self):
            return self.getToken(HiveParser.KW_SNAPSHOT, 0)

        def KW_AUTOCOMMIT(self):
            return self.getToken(HiveParser.KW_AUTOCOMMIT, 0)

        def KW_RELY(self):
            return self.getToken(HiveParser.KW_RELY, 0)

        def KW_NORELY(self):
            return self.getToken(HiveParser.KW_NORELY, 0)

        def KW_VALIDATE(self):
            return self.getToken(HiveParser.KW_VALIDATE, 0)

        def KW_NOVALIDATE(self):
            return self.getToken(HiveParser.KW_NOVALIDATE, 0)

        def KW_KEY(self):
            return self.getToken(HiveParser.KW_KEY, 0)

        def KW_MATCHED(self):
            return self.getToken(HiveParser.KW_MATCHED, 0)

        def KW_REPL(self):
            return self.getToken(HiveParser.KW_REPL, 0)

        def KW_DUMP(self):
            return self.getToken(HiveParser.KW_DUMP, 0)

        def KW_STATUS(self):
            return self.getToken(HiveParser.KW_STATUS, 0)

        def KW_CACHE(self):
            return self.getToken(HiveParser.KW_CACHE, 0)

        def KW_VIEWS(self):
            return self.getToken(HiveParser.KW_VIEWS, 0)

        def KW_VECTORIZATION(self):
            return self.getToken(HiveParser.KW_VECTORIZATION, 0)

        def KW_SUMMARY(self):
            return self.getToken(HiveParser.KW_SUMMARY, 0)

        def KW_OPERATOR(self):
            return self.getToken(HiveParser.KW_OPERATOR, 0)

        def KW_EXPRESSION(self):
            return self.getToken(HiveParser.KW_EXPRESSION, 0)

        def KW_DETAIL(self):
            return self.getToken(HiveParser.KW_DETAIL, 0)

        def KW_WAIT(self):
            return self.getToken(HiveParser.KW_WAIT, 0)

        def KW_ZONE(self):
            return self.getToken(HiveParser.KW_ZONE, 0)

        def KW_DEFAULT(self):
            return self.getToken(HiveParser.KW_DEFAULT, 0)

        def KW_REOPTIMIZATION(self):
            return self.getToken(HiveParser.KW_REOPTIMIZATION, 0)

        def KW_RESOURCE(self):
            return self.getToken(HiveParser.KW_RESOURCE, 0)

        def KW_PLAN(self):
            return self.getToken(HiveParser.KW_PLAN, 0)

        def KW_PLANS(self):
            return self.getToken(HiveParser.KW_PLANS, 0)

        def KW_QUERY_PARALLELISM(self):
            return self.getToken(HiveParser.KW_QUERY_PARALLELISM, 0)

        def KW_ACTIVATE(self):
            return self.getToken(HiveParser.KW_ACTIVATE, 0)

        def KW_MOVE(self):
            return self.getToken(HiveParser.KW_MOVE, 0)

        def KW_DO(self):
            return self.getToken(HiveParser.KW_DO, 0)

        def KW_POOL(self):
            return self.getToken(HiveParser.KW_POOL, 0)

        def KW_ALLOC_FRACTION(self):
            return self.getToken(HiveParser.KW_ALLOC_FRACTION, 0)

        def KW_SCHEDULING_POLICY(self):
            return self.getToken(HiveParser.KW_SCHEDULING_POLICY, 0)

        def KW_PATH(self):
            return self.getToken(HiveParser.KW_PATH, 0)

        def KW_MAPPING(self):
            return self.getToken(HiveParser.KW_MAPPING, 0)

        def KW_WORKLOAD(self):
            return self.getToken(HiveParser.KW_WORKLOAD, 0)

        def KW_MANAGEMENT(self):
            return self.getToken(HiveParser.KW_MANAGEMENT, 0)

        def KW_ACTIVE(self):
            return self.getToken(HiveParser.KW_ACTIVE, 0)

        def KW_UNMANAGED(self):
            return self.getToken(HiveParser.KW_UNMANAGED, 0)

        def KW_PROCEDURE(self):
            return self.getToken(HiveParser.KW_PROCEDURE, 0)

        def KW_GROUP(self):
            return self.getToken(HiveParser.KW_GROUP, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = HiveParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4201
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_GROUP) | (1 << HiveParser.KW_OVERWRITE) | (1 << HiveParser.KW_PARTITIONS) | (1 << HiveParser.KW_TABLES) | (1 << HiveParser.KW_COLUMNS) | (1 << HiveParser.KW_INDEX) | (1 << HiveParser.KW_INDEXES) | (1 << HiveParser.KW_REBUILD) | (1 << HiveParser.KW_FUNCTIONS) | (1 << HiveParser.KW_SHOW) | (1 << HiveParser.KW_MSCK) | (1 << HiveParser.KW_REPAIR) | (1 << HiveParser.KW_DIRECTORY) | (1 << HiveParser.KW_CLUSTER) | (1 << HiveParser.KW_DISTRIBUTE) | (1 << HiveParser.KW_SORT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (HiveParser.KW_LOAD - 66)) | (1 << (HiveParser.KW_EXPORT - 66)) | (1 << (HiveParser.KW_REPLICATION - 66)) | (1 << (HiveParser.KW_METADATA - 66)) | (1 << (HiveParser.KW_DATA - 66)) | (1 << (HiveParser.KW_INPATH - 66)) | (1 << (HiveParser.KW_CHANGE - 66)) | (1 << (HiveParser.KW_FIRST - 66)) | (1 << (HiveParser.KW_AFTER - 66)) | (1 << (HiveParser.KW_RENAME - 66)) | (1 << (HiveParser.KW_COMMENT - 66)) | (1 << (HiveParser.KW_TINYINT - 66)) | (1 << (HiveParser.KW_DATETIME - 66)) | (1 << (HiveParser.KW_ZONE - 66)) | (1 << (HiveParser.KW_STRING - 66)) | (1 << (HiveParser.KW_STRUCT - 66)) | (1 << (HiveParser.KW_UNIONTYPE - 66)) | (1 << (HiveParser.KW_PARTITIONED - 66)) | (1 << (HiveParser.KW_CLUSTERED - 66)) | (1 << (HiveParser.KW_SORTED - 66)) | (1 << (HiveParser.KW_BUCKETS - 66)) | (1 << (HiveParser.KW_FORMAT - 66)) | (1 << (HiveParser.KW_DELIMITED - 66)) | (1 << (HiveParser.KW_FIELDS - 66)) | (1 << (HiveParser.KW_TERMINATED - 66)) | (1 << (HiveParser.KW_ESCAPED - 66)) | (1 << (HiveParser.KW_COLLECTION - 66)) | (1 << (HiveParser.KW_ITEMS - 66)) | (1 << (HiveParser.KW_KEYS - 66)) | (1 << (HiveParser.KW_KEY_TYPE - 66)) | (1 << (HiveParser.KW_KILL - 66)) | (1 << (HiveParser.KW_LINES - 66)) | (1 << (HiveParser.KW_STORED - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (HiveParser.KW_FILEFORMAT - 130)) | (1 << (HiveParser.KW_INPUTFORMAT - 130)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 130)) | (1 << (HiveParser.KW_INPUTDRIVER - 130)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 130)) | (1 << (HiveParser.KW_ENABLE - 130)) | (1 << (HiveParser.KW_DISABLE - 130)) | (1 << (HiveParser.KW_LOCATION - 130)) | (1 << (HiveParser.KW_BUCKET - 130)) | (1 << (HiveParser.KW_ADD - 130)) | (1 << (HiveParser.KW_REPLACE - 130)) | (1 << (HiveParser.KW_TEMPORARY - 130)) | (1 << (HiveParser.KW_FILE - 130)) | (1 << (HiveParser.KW_JAR - 130)) | (1 << (HiveParser.KW_EXPLAIN - 130)) | (1 << (HiveParser.KW_FORMATTED - 130)) | (1 << (HiveParser.KW_DEPENDENCY - 130)) | (1 << (HiveParser.KW_LOGICAL - 130)) | (1 << (HiveParser.KW_SERDE - 130)) | (1 << (HiveParser.KW_DEFERRED - 130)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 130)) | (1 << (HiveParser.KW_DBPROPERTIES - 130)) | (1 << (HiveParser.KW_LIMIT - 130)) | (1 << (HiveParser.KW_OFFSET - 130)) | (1 << (HiveParser.KW_UNSET - 130)) | (1 << (HiveParser.KW_TBLPROPERTIES - 130)) | (1 << (HiveParser.KW_IDXPROPERTIES - 130)) | (1 << (HiveParser.KW_VALUE_TYPE - 130)) | (1 << (HiveParser.KW_ELEM_TYPE - 130)) | (1 << (HiveParser.KW_DEFINED - 130)) | (1 << (HiveParser.KW_MAPJOIN - 130)) | (1 << (HiveParser.KW_STREAMTABLE - 130)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 130)) | (1 << (HiveParser.KW_UTC - 130)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 130)) | (1 << (HiveParser.KW_LONG - 130)) | (1 << (HiveParser.KW_PLUS - 130)) | (1 << (HiveParser.KW_VIEW - 130)) | (1 << (HiveParser.KW_VIEWS - 130)) | (1 << (HiveParser.KW_DATABASES - 130)) | (1 << (HiveParser.KW_MATERIALIZED - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (HiveParser.KW_SCHEMA - 194)) | (1 << (HiveParser.KW_SCHEMAS - 194)) | (1 << (HiveParser.KW_SSL - 194)) | (1 << (HiveParser.KW_UNDO - 194)) | (1 << (HiveParser.KW_LOCK - 194)) | (1 << (HiveParser.KW_LOCKS - 194)) | (1 << (HiveParser.KW_UNLOCK - 194)) | (1 << (HiveParser.KW_SHARED - 194)) | (1 << (HiveParser.KW_EXCLUSIVE - 194)) | (1 << (HiveParser.KW_PROCEDURE - 194)) | (1 << (HiveParser.KW_UNSIGNED - 194)) | (1 << (HiveParser.KW_WHILE - 194)) | (1 << (HiveParser.KW_READ - 194)) | (1 << (HiveParser.KW_PURGE - 194)) | (1 << (HiveParser.KW_ANALYZE - 194)) | (1 << (HiveParser.KW_BEFORE - 194)) | (1 << (HiveParser.KW_CONTINUE - 194)) | (1 << (HiveParser.KW_RECORDREADER - 194)) | (1 << (HiveParser.KW_RECORDWRITER - 194)) | (1 << (HiveParser.KW_SEMI - 194)) | (1 << (HiveParser.KW_TOUCH - 194)) | (1 << (HiveParser.KW_ARCHIVE - 194)) | (1 << (HiveParser.KW_UNARCHIVE - 194)) | (1 << (HiveParser.KW_COMPUTE - 194)) | (1 << (HiveParser.KW_STATISTICS - 194)) | (1 << (HiveParser.KW_USE - 194)) | (1 << (HiveParser.KW_OPTION - 194)) | (1 << (HiveParser.KW_CONCATENATE - 194)) | (1 << (HiveParser.KW_SHOW_DATABASE - 194)) | (1 << (HiveParser.KW_RESTRICT - 194)) | (1 << (HiveParser.KW_CASCADE - 194)) | (1 << (HiveParser.KW_SKEWED - 194)) | (1 << (HiveParser.KW_DIRECTORIES - 194)) | (1 << (HiveParser.KW_SETS - 194)) | (1 << (HiveParser.KW_NOSCAN - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (HiveParser.KW_ROLE - 258)) | (1 << (HiveParser.KW_ROLES - 258)) | (1 << (HiveParser.KW_URI - 258)) | (1 << (HiveParser.KW_SERVER - 258)) | (1 << (HiveParser.KW_ADMIN - 258)) | (1 << (HiveParser.KW_OWNER - 258)) | (1 << (HiveParser.KW_PRINCIPALS - 258)) | (1 << (HiveParser.KW_COMPACT - 258)) | (1 << (HiveParser.KW_COMPACTIONS - 258)) | (1 << (HiveParser.KW_TRANSACTIONS - 258)) | (1 << (HiveParser.KW_REWRITE - 258)) | (1 << (HiveParser.KW_REOPTIMIZATION - 258)) | (1 << (HiveParser.KW_RELOAD - 258)) | (1 << (HiveParser.KW_YEAR - 258)) | (1 << (HiveParser.KW_QUERY - 258)) | (1 << (HiveParser.KW_QUARTER - 258)) | (1 << (HiveParser.KW_MONTH - 258)) | (1 << (HiveParser.KW_WEEK - 258)) | (1 << (HiveParser.KW_DAY - 258)) | (1 << (HiveParser.KW_DOW - 258)) | (1 << (HiveParser.KW_HOUR - 258)) | (1 << (HiveParser.KW_MINUTE - 258)) | (1 << (HiveParser.KW_SECOND - 258)) | (1 << (HiveParser.KW_TRANSACTION - 258)) | (1 << (HiveParser.KW_WORK - 258)) | (1 << (HiveParser.KW_WRITE - 258)) | (1 << (HiveParser.KW_ISOLATION - 258)) | (1 << (HiveParser.KW_LEVEL - 258)) | (1 << (HiveParser.KW_SNAPSHOT - 258)) | (1 << (HiveParser.KW_AUTOCOMMIT - 258)) | (1 << (HiveParser.KW_CACHE - 258)) | (1 << (HiveParser.KW_ENFORCED - 258)) | (1 << (HiveParser.KW_VALIDATE - 258)) | (1 << (HiveParser.KW_NOVALIDATE - 258)) | (1 << (HiveParser.KW_RELY - 258)) | (1 << (HiveParser.KW_NORELY - 258)) | (1 << (HiveParser.KW_KEY - 258)) | (1 << (HiveParser.KW_ABORT - 258)) | (1 << (HiveParser.KW_MATCHED - 258)) | (1 << (HiveParser.KW_REPL - 258)) | (1 << (HiveParser.KW_DUMP - 258)) | (1 << (HiveParser.KW_STATUS - 258)) | (1 << (HiveParser.KW_VECTORIZATION - 258)) | (1 << (HiveParser.KW_SUMMARY - 258)) | (1 << (HiveParser.KW_OPERATOR - 258)) | (1 << (HiveParser.KW_EXPRESSION - 258)) | (1 << (HiveParser.KW_DETAIL - 258)))) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & ((1 << (HiveParser.KW_WAIT - 322)) | (1 << (HiveParser.KW_RESOURCE - 322)) | (1 << (HiveParser.KW_PLAN - 322)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 322)) | (1 << (HiveParser.KW_PLANS - 322)) | (1 << (HiveParser.KW_ACTIVATE - 322)) | (1 << (HiveParser.KW_DEFAULT - 322)) | (1 << (HiveParser.KW_CHECK - 322)) | (1 << (HiveParser.KW_POOL - 322)) | (1 << (HiveParser.KW_MOVE - 322)) | (1 << (HiveParser.KW_DO - 322)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 322)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 322)) | (1 << (HiveParser.KW_PATH - 322)) | (1 << (HiveParser.KW_MAPPING - 322)) | (1 << (HiveParser.KW_WORKLOAD - 322)) | (1 << (HiveParser.KW_MANAGEMENT - 322)) | (1 << (HiveParser.KW_ACTIVE - 322)) | (1 << (HiveParser.KW_UNMANAGED - 322)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql11ReservedKeywordsUsedAsFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(HiveParser.KW_IF, 0)

        def KW_ARRAY(self):
            return self.getToken(HiveParser.KW_ARRAY, 0)

        def KW_MAP(self):
            return self.getToken(HiveParser.KW_MAP, 0)

        def KW_BIGINT(self):
            return self.getToken(HiveParser.KW_BIGINT, 0)

        def KW_BINARY(self):
            return self.getToken(HiveParser.KW_BINARY, 0)

        def KW_BOOLEAN(self):
            return self.getToken(HiveParser.KW_BOOLEAN, 0)

        def KW_CURRENT_DATE(self):
            return self.getToken(HiveParser.KW_CURRENT_DATE, 0)

        def KW_CURRENT_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0)

        def KW_DATE(self):
            return self.getToken(HiveParser.KW_DATE, 0)

        def KW_DOUBLE(self):
            return self.getToken(HiveParser.KW_DOUBLE, 0)

        def KW_FLOAT(self):
            return self.getToken(HiveParser.KW_FLOAT, 0)

        def KW_GROUPING(self):
            return self.getToken(HiveParser.KW_GROUPING, 0)

        def KW_INT(self):
            return self.getToken(HiveParser.KW_INT, 0)

        def KW_SMALLINT(self):
            return self.getToken(HiveParser.KW_SMALLINT, 0)

        def KW_TIMESTAMP(self):
            return self.getToken(HiveParser.KW_TIMESTAMP, 0)

        def KW_LEFT(self):
            return self.getToken(HiveParser.KW_LEFT, 0)

        def KW_RIGHT(self):
            return self.getToken(HiveParser.KW_RIGHT, 0)

        def functionalName(self):
            return self.getTypedRuleContext(HiveParser.FunctionalNameContext,0)


        def getRuleIndex(self):
            return HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql11ReservedKeywordsUsedAsFunctionName" ):
                return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def sql11ReservedKeywordsUsedAsFunctionName(self):

        localctx = HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_sql11ReservedKeywordsUsedAsFunctionName)
        try:
            self.state = 4221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [HiveParser.KW_IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4203
                self.match(HiveParser.KW_IF)
                pass
            elif token in [HiveParser.KW_ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4204
                self.match(HiveParser.KW_ARRAY)
                pass
            elif token in [HiveParser.KW_MAP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4205
                self.match(HiveParser.KW_MAP)
                pass
            elif token in [HiveParser.KW_BIGINT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4206
                self.match(HiveParser.KW_BIGINT)
                pass
            elif token in [HiveParser.KW_BINARY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4207
                self.match(HiveParser.KW_BINARY)
                pass
            elif token in [HiveParser.KW_BOOLEAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4208
                self.match(HiveParser.KW_BOOLEAN)
                pass
            elif token in [HiveParser.KW_CURRENT_DATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4209
                self.match(HiveParser.KW_CURRENT_DATE)
                pass
            elif token in [HiveParser.KW_CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4210
                self.match(HiveParser.KW_CURRENT_TIMESTAMP)
                pass
            elif token in [HiveParser.KW_DATE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4211
                self.match(HiveParser.KW_DATE)
                pass
            elif token in [HiveParser.KW_DOUBLE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4212
                self.match(HiveParser.KW_DOUBLE)
                pass
            elif token in [HiveParser.KW_FLOAT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4213
                self.match(HiveParser.KW_FLOAT)
                pass
            elif token in [HiveParser.KW_GROUPING]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4214
                self.match(HiveParser.KW_GROUPING)
                pass
            elif token in [HiveParser.KW_INT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4215
                self.match(HiveParser.KW_INT)
                pass
            elif token in [HiveParser.KW_SMALLINT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4216
                self.match(HiveParser.KW_SMALLINT)
                pass
            elif token in [HiveParser.KW_TIMESTAMP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4217
                self.match(HiveParser.KW_TIMESTAMP)
                pass
            elif token in [HiveParser.KW_LEFT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4218
                self.match(HiveParser.KW_LEFT)
                pass
            elif token in [HiveParser.KW_RIGHT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4219
                self.match(HiveParser.KW_RIGHT)
                pass
            elif token in [HiveParser.KW_EXISTS, HiveParser.KW_TRANSFORM, HiveParser.KW_TRANSFORM_KEYS, HiveParser.KW_TRANSFORM_VALUES, HiveParser.KW_FILTER, HiveParser.KW_ARRAY_SORT, HiveParser.KW_ZIP_WITH, HiveParser.KW_AGGREGATE, HiveParser.KW_FORALL, HiveParser.KW_MAP_FILTER, HiveParser.KW_MAP_ZIP_WITH]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4220
                self.functionalName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_END(self):
            return self.getToken(HiveParser.KW_END, 0)

        def KW_START(self):
            return self.getToken(HiveParser.KW_START, 0)

        def getRuleIndex(self):
            return HiveParser.RULE_nonReservedColumnName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReservedColumnName" ):
                return visitor.visitNonReservedColumnName(self)
            else:
                return visitor.visitChildren(self)




    def nonReservedColumnName(self):

        localctx = HiveParser.NonReservedColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_nonReservedColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4223
            _la = self._input.LA(1)
            if not(_la==HiveParser.KW_END or _la==HiveParser.KW_START):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[361] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         




