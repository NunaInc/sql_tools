# Generated from ClickHouseParser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00e8")
        buf.write("\u07e2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\3\2\3\2\3\2\7\2\u00fa\n\2\f\2\16\2\u00fd\13")
        buf.write("\2\3\2\5\2\u0100\n\2\3\3\3\3\3\3\3\3\5\3\u0106\n\3\3\3")
        buf.write("\3\3\5\3\u010a\n\3\3\3\5\3\u010d\n\3\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\5\4\u0121\n\4\3\5\3\5\3\5\3\5\5\5\u0127\n\5\3\5\3\5\3")
        buf.write("\5\7\5\u012c\n\5\f\5\16\5\u012f\13\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u0136\n\6\3\6\3\6\3\6\5\6\u013b\n\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u0142\n\6\3\6\3\6\3\6\5\6\u0147\n\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u014e\n\6\3\6\3\6\3\6\5\6\u0153\n\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u0159\n\6\3\6\3\6\3\6\3\6\5\6\u015f")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u0164\n\6\3\6\3\6\3\6\3\6\5\6\u016a")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u016f\n\6\3\6\3\6\3\6\3\6\5\6\u0175")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u017a\n\6\3\6\3\6\3\6\3\6\5\6\u0180")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u018e\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u0195\n\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u019c\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u01a3")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u01a9\n\6\3\6\3\6\3\6\5\6\u01ae")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u01b4\n\6\3\6\3\6\3\6\5\6\u01b9")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u01bf\n\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u01c8\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u01d2\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01dc")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u01f0\n\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u01f8\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\5\6\u0207\n\6\3\7\3\7\3\7\7\7\u020c")
        buf.write("\n\7\f\7\16\7\u020f\13\7\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\n\5\n\u021c\n\n\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u0222\n\13\3\f\3\f\3\f\3\f\5\f\u0228\n\f\3\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u022f\n\r\3\r\3\r\5\r\u0233\n\r\3\r\5\r\u0236")
        buf.write("\n\r\3\r\3\r\3\r\3\r\5\r\u023c\n\r\3\r\5\r\u023f\n\r\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u0245\n\r\3\r\3\r\5\r\u0249\n\r\3\r")
        buf.write("\5\r\u024c\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u0257\n\r\3\r\3\r\5\r\u025b\n\r\3\r\5\r\u025e\n\r\3\r")
        buf.write("\3\r\3\r\5\r\u0263\n\r\5\r\u0265\n\r\3\r\5\r\u0268\n\r")
        buf.write("\3\r\5\r\u026b\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u0275\n\r\3\r\3\r\5\r\u0279\n\r\3\r\5\r\u027c\n\r\3\r")
        buf.write("\5\r\u027f\n\r\3\r\3\r\3\r\5\r\u0284\n\r\5\r\u0286\n\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u028e\n\r\3\r\5\r\u0291\n")
        buf.write("\r\3\r\5\r\u0294\n\r\3\r\3\r\3\r\3\r\5\r\u029a\n\r\3\r")
        buf.write("\3\r\5\r\u029e\n\r\3\r\5\r\u02a1\n\r\3\r\5\r\u02a4\n\r")
        buf.write("\3\r\5\r\u02a7\n\r\3\r\5\r\u02aa\n\r\3\r\3\r\3\r\5\r\u02af")
        buf.write("\n\r\3\r\3\r\3\r\3\r\5\r\u02b5\n\r\3\r\3\r\5\r\u02b9\n")
        buf.write("\r\3\r\5\r\u02bc\n\r\3\r\5\r\u02bf\n\r\3\r\3\r\5\r\u02c3")
        buf.write("\n\r\3\16\3\16\3\16\3\16\7\16\u02c9\n\16\f\16\16\16\u02cc")
        buf.write("\13\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\7\17\u02d9\n\17\f\17\16\17\u02dc\13\17\3\20\5")
        buf.write("\20\u02df\n\20\3\20\3\20\3\20\3\20\3\20\7\20\u02e6\n\20")
        buf.write("\f\20\16\20\u02e9\13\20\3\21\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\5\22\u02f3\n\22\3\22\5\22\u02f6\n\22\3\23\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u02fd\n\23\f\23\16\23\u0300\13")
        buf.write("\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\5\24\u0310\n\24\3\24\3\24\3\25\3")
        buf.write("\25\3\25\3\25\3\25\7\25\u0319\n\25\f\25\16\25\u031c\13")
        buf.write("\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\5\26\u032d\n\26\3\26\3\26\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\5\30\u033a")
        buf.write("\n\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\34\7\34\u0349\n\34\f\34\16\34\u034c\13\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0354\n\34\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\7\35\u035d\n\35\f\35\16\35")
        buf.write("\u0360\13\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3")
        buf.write(" \3 \3 \3 \3!\3!\3!\3!\7!\u0372\n!\f!\16!\u0375\13!\3")
        buf.write("\"\3\"\5\"\u0379\n\"\3\"\3\"\3\"\5\"\u037e\n\"\3\"\5\"")
        buf.write("\u0381\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u038d\n#\3")
        buf.write("$\3$\3$\5$\u0392\n$\3$\3$\5$\u0396\n$\3$\5$\u0399\n$\3")
        buf.write("$\3$\5$\u039d\n$\3$\3$\5$\u03a1\n$\3$\3$\3$\5$\u03a6\n")
        buf.write("$\3$\5$\u03a9\n$\3$\3$\5$\u03ad\n$\5$\u03af\n$\3%\3%\3")
        buf.write("%\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3(\7(\u03c3")
        buf.write("\n(\f(\16(\u03c6\13(\3(\3(\3)\3)\3)\5)\u03cd\n)\3)\5)")
        buf.write("\u03d0\n)\3*\3*\3*\3*\3*\3*\3*\3*\5*\u03da\n*\3+\3+\5")
        buf.write("+\u03de\n+\3+\3+\3,\3,\3,\3,\5,\u03e6\n,\3,\3,\5,\u03ea")
        buf.write("\n,\3,\3,\3,\5,\u03ef\n,\3,\3,\5,\u03f3\n,\3,\3,\5,\u03f7")
        buf.write("\n,\3,\3,\5,\u03fb\n,\3,\3,\5,\u03ff\n,\5,\u0401\n,\3")
        buf.write("-\3-\3-\3-\3-\3-\5-\u0409\n-\3-\3-\5-\u040d\n-\3-\5-\u0410")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\5.\u0418\n.\3/\3/\3/\5/\u041d\n")
        buf.write("/\3/\3/\3/\5/\u0422\n/\3/\5/\u0425\n/\3/\3/\3\60\3\60")
        buf.write("\3\60\3\60\7\60\u042d\n\60\f\60\16\60\u0430\13\60\3\60")
        buf.write("\3\60\3\61\3\61\3\61\3\61\5\61\u0438\n\61\3\62\3\62\3")
        buf.write("\62\5\62\u043d\n\62\3\62\3\62\5\62\u0441\n\62\3\63\3\63")
        buf.write("\3\63\3\63\5\63\u0447\n\63\3\63\5\63\u044a\n\63\3\63\5")
        buf.write("\63\u044d\n\63\3\63\5\63\u0450\n\63\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u045c\n\64\f\64\16")
        buf.write("\64\u045f\13\64\3\64\5\64\u0462\n\64\3\65\3\65\5\65\u0466")
        buf.write("\n\65\3\65\3\65\3\65\5\65\u046b\n\65\3\65\5\65\u046e\n")
        buf.write("\65\3\65\3\65\3\66\3\66\3\66\3\66\7\66\u0476\n\66\f\66")
        buf.write("\16\66\u0479\13\66\3\67\3\67\3\67\3\67\3\67\5\67\u0480")
        buf.write("\n\67\38\58\u0483\n8\38\38\58\u0487\n8\38\58\u048a\n8")
        buf.write("\38\38\58\u048e\n8\38\58\u0491\n8\38\58\u0494\n8\38\5")
        buf.write("8\u0497\n8\38\58\u049a\n8\38\58\u049d\n8\38\58\u04a0\n")
        buf.write("8\38\58\u04a3\n8\38\58\u04a6\n8\38\58\u04a9\n8\38\58\u04ac")
        buf.write("\n8\39\39\39\3:\3:\3:\3:\5:\u04b5\n:\3;\3;\3;\3<\5<\u04bb")
        buf.write("\n<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3?\3?\3")
        buf.write("?\3@\3@\3@\3@\3@\3@\3@\3@\5@\u04d6\n@\3@\5@\u04d9\n@\3")
        buf.write("@\5@\u04dc\n@\3A\3A\3A\3B\3B\3B\3C\3C\3C\3D\3D\3D\3D\3")
        buf.write("E\3E\3E\3E\3F\3F\3F\3F\3F\3G\3G\3G\3G\5G\u04f8\nG\3H\3")
        buf.write("H\3H\3I\3I\3I\7I\u0500\nI\fI\16I\u0503\13I\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\5J\u050f\nJ\3K\3K\3K\5K\u0514\nK\3")
        buf.write("K\5K\u0517\nK\3K\3K\3K\3K\5K\u051d\nK\3K\3K\3K\3K\3K\3")
        buf.write("K\5K\u0525\nK\3K\5K\u0528\nK\3K\3K\3K\3K\7K\u052e\nK\f")
        buf.write("K\16K\u0531\13K\3L\5L\u0534\nL\3L\3L\3L\5L\u0539\nL\3")
        buf.write("L\5L\u053c\nL\3L\5L\u053f\nL\3L\3L\5L\u0543\nL\3L\3L\5")
        buf.write("L\u0547\nL\3L\5L\u054a\nL\5L\u054c\nL\3L\5L\u054f\nL\3")
        buf.write("L\3L\5L\u0553\nL\3L\3L\5L\u0557\nL\3L\5L\u055a\nL\5L\u055c")
        buf.write("\nL\5L\u055e\nL\3M\5M\u0561\nM\3M\3M\3M\5M\u0566\nM\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0571\nN\3O\3O\3O\3O\5O\u0577")
        buf.write("\nO\3P\3P\3P\5P\u057c\nP\3Q\3Q\3Q\7Q\u0581\nQ\fQ\16Q\u0584")
        buf.write("\13Q\3R\3R\3R\3S\5S\u058a\nS\3S\3S\5S\u058e\nS\3S\3S\5")
        buf.write("S\u0592\nS\3T\3T\3T\5T\u0597\nT\3U\3U\3U\7U\u059c\nU\f")
        buf.write("U\16U\u059f\13U\3V\3V\3V\3V\3W\5W\u05a6\nW\3W\5W\u05a9")
        buf.write("\nW\3W\5W\u05ac\nW\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3")
        buf.write("[\3[\3[\3[\3[\3[\5[\u05bf\n[\3\\\3\\\3\\\3\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3\\\3\\\5\\\u05cd\n\\\3]\3]\3]\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u05dd\n^\3^\5^\u05e0\n^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\5^\u05e9\n^\3^\3^\5^\u05ed\n^\3^\3")
        buf.write("^\3^\5^\u05f2\n^\3^\3^\3^\5^\u05f7\n^\3^\5^\u05fa\n^\5")
        buf.write("^\u05fc\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\5_\u0612\n_\3_\5_\u0615\n_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\5_\u0620\n_\3`\3`\5`\u0624\n`\3`\5`\u0627")
        buf.write("\n`\3`\3`\5`\u062b\n`\3`\3`\5`\u062f\n`\3a\3a\3a\3b\3")
        buf.write("b\3b\5b\u0637\nb\3b\3b\5b\u063b\nb\3c\3c\3c\3c\3c\3c\3")
        buf.write("c\3c\3c\7c\u0646\nc\fc\16c\u0649\13c\3c\3c\3c\3c\3c\3")
        buf.write("c\3c\7c\u0652\nc\fc\16c\u0655\13c\3c\3c\3c\3c\3c\3c\3")
        buf.write("c\7c\u065e\nc\fc\16c\u0661\13c\3c\3c\3c\3c\3c\5c\u0668")
        buf.write("\nc\3c\3c\5c\u066c\nc\3d\3d\3d\7d\u0671\nd\fd\16d\u0674")
        buf.write("\13d\3e\3e\3e\5e\u0679\ne\3e\3e\3e\3e\3e\3e\5e\u0681\n")
        buf.write("e\3f\3f\3f\5f\u0686\nf\3f\3f\3f\3f\3f\6f\u068d\nf\rf\16")
        buf.write("f\u068e\3f\3f\5f\u0693\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\5f\u06b2\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\5f\u06c3\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u06cf")
        buf.write("\nf\3f\3f\3f\3f\3f\3f\3f\3f\5f\u06d9\nf\3f\5f\u06dc\n")
        buf.write("f\3f\3f\5f\u06e0\nf\3f\5f\u06e3\nf\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\5f\u06ef\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\5f\u0700\nf\3f\3f\5f\u0704\nf\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0715\nf\3f\5f\u0718")
        buf.write("\nf\3f\3f\5f\u071c\nf\3f\5f\u071f\nf\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\5f\u072a\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0742\nf\3f\3f\3")
        buf.write("f\3f\3f\5f\u0749\nf\7f\u074b\nf\ff\16f\u074e\13f\3g\3")
        buf.write("g\3g\7g\u0753\ng\fg\16g\u0756\13g\3h\3h\5h\u075a\nh\3")
        buf.write("i\3i\3i\3i\7i\u0760\ni\fi\16i\u0763\13i\3i\3i\3i\3i\3")
        buf.write("i\7i\u076a\ni\fi\16i\u076d\13i\5i\u076f\ni\3i\3i\3i\3")
        buf.write("j\3j\3j\5j\u0777\nj\3j\3j\3k\3k\3k\5k\u077e\nk\3l\3l\3")
        buf.write("l\3l\3l\3l\3l\5l\u0787\nl\3l\3l\3l\3l\5l\u078d\nl\7l\u078f")
        buf.write("\nl\fl\16l\u0792\13l\3m\3m\3m\5m\u0797\nm\3m\3m\3n\3n")
        buf.write("\3n\5n\u079e\nn\3n\3n\3o\3o\3o\7o\u07a5\no\fo\16o\u07a8")
        buf.write("\13o\3p\3p\3p\5p\u07ad\np\3q\3q\3r\3r\3r\3r\3r\3r\5r\u07b7")
        buf.write("\nr\5r\u07b9\nr\3s\5s\u07bc\ns\3s\3s\3s\3s\3s\3s\5s\u07c4")
        buf.write("\ns\3t\3t\3t\5t\u07c9\nt\3u\3u\3v\3v\3w\3w\3x\3x\5x\u07d3")
        buf.write("\nx\3y\3y\3y\5y\u07d8\ny\3z\3z\5z\u07dc\nz\3{\3{\3{\3")
        buf.write("{\3{\2\5\u0094\u00ca\u00d6|\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\2\36")
        buf.write("\b\2\5\5\32\32\35\35((ii\u00ae\u00ae\4\2\21\21\37\37\5")
        buf.write("\2\5\5((ii\4\2++--\4\2..\64\64\5\2\20\20\u009d\u009d\u00a3")
        buf.write("\u00a3\4\2UUaa\4\2!!\u008e\u008e\4\2HHff\5\2\6\6\n\n\16")
        buf.write("\16\6\2\6\6\t\n\16\16\u0094\u0094\4\2aa\u008d\u008d\4")
        buf.write("\2\6\6\n\n\4\2ww\u00cd\u00cd\4\2\r\r+,\4\2??^^\4\2\u0086")
        buf.write("\u0086\u0090\u0090\4\2EEQQ\3\2\u009a\u009b\5\2\23\23`")
        buf.write("`\u00ab\u00ab\5\2\u00c9\u00c9\u00db\u00db\u00e4\u00e4")
        buf.write("\4\2\u00ce\u00cf\u00dc\u00dc\4\2PPcc\3\2\u00c4\u00c5\4")
        buf.write("\2\u00cf\u00cf\u00dc\u00dc\n\2&&MMmmoo\u0085\u0085\u0092")
        buf.write("\u0092\u00ba\u00ba\u00bf\u00bf\16\2\4%\'LNRTlnnpqstv\u0083")
        buf.write("\u0086\u0091\u0093\u00b9\u00bb\u00be\u00c0\u00c1\6\2%")
        buf.write("%??NN\\\\\2\u08fb\2\u00f6\3\2\2\2\4\u010c\3\2\2\2\6\u0120")
        buf.write("\3\2\2\2\b\u0122\3\2\2\2\n\u0206\3\2\2\2\f\u0208\3\2\2")
        buf.write("\2\16\u0210\3\2\2\2\20\u0214\3\2\2\2\22\u021b\3\2\2\2")
        buf.write("\24\u021d\3\2\2\2\26\u0223\3\2\2\2\30\u02c2\3\2\2\2\32")
        buf.write("\u02c4\3\2\2\2\34\u02cf\3\2\2\2\36\u02de\3\2\2\2 \u02ea")
        buf.write("\3\2\2\2\"\u02ee\3\2\2\2$\u02f7\3\2\2\2&\u0304\3\2\2\2")
        buf.write("(\u0313\3\2\2\2*\u0320\3\2\2\2,\u0330\3\2\2\2.\u0335\3")
        buf.write("\2\2\2\60\u033b\3\2\2\2\62\u033e\3\2\2\2\64\u0341\3\2")
        buf.write("\2\2\66\u0353\3\2\2\28\u0355\3\2\2\2:\u0361\3\2\2\2<\u0365")
        buf.write("\3\2\2\2>\u0369\3\2\2\2@\u036d\3\2\2\2B\u0376\3\2\2\2")
        buf.write("D\u038c\3\2\2\2F\u03ae\3\2\2\2H\u03b0\3\2\2\2J\u03b3\3")
        buf.write("\2\2\2L\u03ba\3\2\2\2N\u03bd\3\2\2\2P\u03c9\3\2\2\2R\u03d1")
        buf.write("\3\2\2\2T\u03db\3\2\2\2V\u0400\3\2\2\2X\u040f\3\2\2\2")
        buf.write("Z\u0417\3\2\2\2\\\u0419\3\2\2\2^\u0428\3\2\2\2`\u0437")
        buf.write("\3\2\2\2b\u0439\3\2\2\2d\u0442\3\2\2\2f\u0451\3\2\2\2")
        buf.write("h\u0463\3\2\2\2j\u0471\3\2\2\2l\u047f\3\2\2\2n\u0482\3")
        buf.write("\2\2\2p\u04ad\3\2\2\2r\u04b0\3\2\2\2t\u04b6\3\2\2\2v\u04ba")
        buf.write("\3\2\2\2x\u04c0\3\2\2\2z\u04c7\3\2\2\2|\u04ca\3\2\2\2")
        buf.write("~\u04cd\3\2\2\2\u0080\u04dd\3\2\2\2\u0082\u04e0\3\2\2")
        buf.write("\2\u0084\u04e3\3\2\2\2\u0086\u04e6\3\2\2\2\u0088\u04ea")
        buf.write("\3\2\2\2\u008a\u04ee\3\2\2\2\u008c\u04f3\3\2\2\2\u008e")
        buf.write("\u04f9\3\2\2\2\u0090\u04fc\3\2\2\2\u0092\u050e\3\2\2\2")
        buf.write("\u0094\u051c\3\2\2\2\u0096\u055d\3\2\2\2\u0098\u0565\3")
        buf.write("\2\2\2\u009a\u0570\3\2\2\2\u009c\u0572\3\2\2\2\u009e\u0578")
        buf.write("\3\2\2\2\u00a0\u057d\3\2\2\2\u00a2\u0585\3\2\2\2\u00a4")
        buf.write("\u0589\3\2\2\2\u00a6\u0593\3\2\2\2\u00a8\u0598\3\2\2\2")
        buf.write("\u00aa\u05a0\3\2\2\2\u00ac\u05a5\3\2\2\2\u00ae\u05ad\3")
        buf.write("\2\2\2\u00b0\u05b1\3\2\2\2\u00b2\u05b5\3\2\2\2\u00b4\u05be")
        buf.write("\3\2\2\2\u00b6\u05cc\3\2\2\2\u00b8\u05ce\3\2\2\2\u00ba")
        buf.write("\u05fb\3\2\2\2\u00bc\u061f\3\2\2\2\u00be\u0621\3\2\2\2")
        buf.write("\u00c0\u0630\3\2\2\2\u00c2\u0633\3\2\2\2\u00c4\u066b\3")
        buf.write("\2\2\2\u00c6\u066d\3\2\2\2\u00c8\u0680\3\2\2\2\u00ca\u0703")
        buf.write("\3\2\2\2\u00cc\u074f\3\2\2\2\u00ce\u0759\3\2\2\2\u00d0")
        buf.write("\u076e\3\2\2\2\u00d2\u0776\3\2\2\2\u00d4\u077a\3\2\2\2")
        buf.write("\u00d6\u0786\3\2\2\2\u00d8\u0793\3\2\2\2\u00da\u079d\3")
        buf.write("\2\2\2\u00dc\u07a1\3\2\2\2\u00de\u07ac\3\2\2\2\u00e0\u07ae")
        buf.write("\3\2\2\2\u00e2\u07b8\3\2\2\2\u00e4\u07bb\3\2\2\2\u00e6")
        buf.write("\u07c8\3\2\2\2\u00e8\u07ca\3\2\2\2\u00ea\u07cc\3\2\2\2")
        buf.write("\u00ec\u07ce\3\2\2\2\u00ee\u07d2\3\2\2\2\u00f0\u07d7\3")
        buf.write("\2\2\2\u00f2\u07db\3\2\2\2\u00f4\u07dd\3\2\2\2\u00f6\u00fb")
        buf.write("\5\4\3\2\u00f7\u00f8\7\u00e3\2\2\u00f8\u00fa\5\4\3\2\u00f9")
        buf.write("\u00f7\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fb\u00fc\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3")
        buf.write("\2\2\2\u00fe\u0100\7\u00e3\2\2\u00ff\u00fe\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100\3\3\2\2\2\u0101\u0105\5\6\4\2\u0102")
        buf.write("\u0103\7X\2\2\u0103\u0104\7}\2\2\u0104\u0106\7\u00c7\2")
        buf.write("\2\u0105\u0102\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0108\7C\2\2\u0108\u010a\5\u00f2z\2\u0109")
        buf.write("\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010d\3\2\2\2")
        buf.write("\u010b\u010d\5\\/\2\u010c\u0101\3\2\2\2\u010c\u010b\3")
        buf.write("\2\2\2\u010d\5\3\2\2\2\u010e\u0121\5\b\5\2\u010f\u0121")
        buf.write("\5\24\13\2\u0110\u0121\5\26\f\2\u0111\u0121\5\30\r\2\u0112")
        buf.write("\u0121\5T+\2\u0113\u0121\5V,\2\u0114\u0121\5X-\2\u0115")
        buf.write("\u0121\5Z.\2\u0116\u0121\5b\62\2\u0117\u0121\5d\63\2\u0118")
        buf.write("\u0121\5f\64\2\u0119\u0121\5j\66\2\u011a\u0121\5\u00b8")
        buf.write("]\2\u011b\u0121\5\u00ba^\2\u011c\u0121\5\u00bc_\2\u011d")
        buf.write("\u0121\5\u00be`\2\u011e\u0121\5\u00c0a\2\u011f\u0121\5")
        buf.write("\u00c2b\2\u0120\u010e\3\2\2\2\u0120\u010f\3\2\2\2\u0120")
        buf.write("\u0110\3\2\2\2\u0120\u0111\3\2\2\2\u0120\u0112\3\2\2\2")
        buf.write("\u0120\u0113\3\2\2\2\u0120\u0114\3\2\2\2\u0120\u0115\3")
        buf.write("\2\2\2\u0120\u0116\3\2\2\2\u0120\u0117\3\2\2\2\u0120\u0118")
        buf.write("\3\2\2\2\u0120\u0119\3\2\2\2\u0120\u011a\3\2\2\2\u0120")
        buf.write("\u011b\3\2\2\2\u0120\u011c\3\2\2\2\u0120\u011d\3\2\2\2")
        buf.write("\u0120\u011e\3\2\2\2\u0120\u011f\3\2\2\2\u0121\7\3\2\2")
        buf.write("\2\u0122\u0123\7\7\2\2\u0123\u0124\7\u00a0\2\2\u0124\u0126")
        buf.write("\5\u00dan\2\u0125\u0127\5.\30\2\u0126\u0125\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012d\5\n\6\2")
        buf.write("\u0129\u012a\7\u00cd\2\2\u012a\u012c\5\n\6\2\u012b\u0129")
        buf.write("\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012d")
        buf.write("\u012e\3\2\2\2\u012e\t\3\2\2\2\u012f\u012d\3\2\2\2\u0130")
        buf.write("\u0131\7\3\2\2\u0131\u0135\7\34\2\2\u0132\u0133\7O\2\2")
        buf.write("\u0133\u0134\7t\2\2\u0134\u0136\79\2\2\u0135\u0132\3\2")
        buf.write("\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u013a")
        buf.write("\5F$\2\u0138\u0139\7\4\2\2\u0139\u013b\5\u00d4k\2\u013a")
        buf.write("\u0138\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u0207\3\2\2\2")
        buf.write("\u013c\u013d\7\3\2\2\u013d\u0141\7R\2\2\u013e\u013f\7")
        buf.write("O\2\2\u013f\u0140\7t\2\2\u0140\u0142\79\2\2\u0141\u013e")
        buf.write("\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\3\2\2\2\u0143")
        buf.write("\u0146\5J&\2\u0144\u0145\7\4\2\2\u0145\u0147\5\u00d4k")
        buf.write("\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0207")
        buf.write("\3\2\2\2\u0148\u0149\7\3\2\2\u0149\u014d\7\u0084\2\2\u014a")
        buf.write("\u014b\7O\2\2\u014b\u014c\7t\2\2\u014c\u014e\79\2\2\u014d")
        buf.write("\u014a\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f\3\2\2\2")
        buf.write("\u014f\u0152\5L\'\2\u0150\u0151\7\4\2\2\u0151\u0153\5")
        buf.write("\u00d4k\2\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153")
        buf.write("\u0207\3\2\2\2\u0154\u0155\7\21\2\2\u0155\u0158\5\22\n")
        buf.write("\2\u0156\u0157\7E\2\2\u0157\u0159\5\u00dan\2\u0158\u0156")
        buf.write("\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u0207\3\2\2\2\u015a")
        buf.write("\u015b\7\30\2\2\u015b\u015e\7\34\2\2\u015c\u015d\7O\2")
        buf.write("\2\u015d\u015f\79\2\2\u015e\u015c\3\2\2\2\u015e\u015f")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0163\5\u00d4k\2\u0161")
        buf.write("\u0162\7Q\2\2\u0162\u0164\5\22\n\2\u0163\u0161\3\2\2\2")
        buf.write("\u0163\u0164\3\2\2\2\u0164\u0207\3\2\2\2\u0165\u0166\7")
        buf.write("\30\2\2\u0166\u0169\7R\2\2\u0167\u0168\7O\2\2\u0168\u016a")
        buf.write("\79\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a")
        buf.write("\u016b\3\2\2\2\u016b\u016e\5\u00d4k\2\u016c\u016d\7Q\2")
        buf.write("\2\u016d\u016f\5\22\n\2\u016e\u016c\3\2\2\2\u016e\u016f")
        buf.write("\3\2\2\2\u016f\u0207\3\2\2\2\u0170\u0171\7\30\2\2\u0171")
        buf.write("\u0174\7\u0084\2\2\u0172\u0173\7O\2\2\u0173\u0175\79\2")
        buf.write("\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u0179\5\u00d4k\2\u0177\u0178\7Q\2\2\u0178")
        buf.write("\u017a\5\22\n\2\u0179\u0177\3\2\2\2\u0179\u017a\3\2\2")
        buf.write("\2\u017a\u0207\3\2\2\2\u017b\u017c\7\35\2\2\u017c\u017f")
        buf.write("\7\34\2\2\u017d\u017e\7O\2\2\u017e\u0180\79\2\2\u017f")
        buf.write("\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\u0182\5\u00d4k\2\u0182\u0183\7\u00c7\2\2\u0183")
        buf.write("\u0207\3\2\2\2\u0184\u0185\7*\2\2\u0185\u0186\7\u00bc")
        buf.write("\2\2\u0186\u0207\5\u00caf\2\u0187\u0188\7.\2\2\u0188\u0207")
        buf.write("\5\22\n\2\u0189\u018a\7\64\2\2\u018a\u018d\7\34\2\2\u018b")
        buf.write("\u018c\7O\2\2\u018c\u018e\79\2\2\u018d\u018b\3\2\2\2\u018d")
        buf.write("\u018e\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0207\5\u00d4")
        buf.write("k\2\u0190\u0191\7\64\2\2\u0191\u0194\7R\2\2\u0192\u0193")
        buf.write("\7O\2\2\u0193\u0195\79\2\2\u0194\u0192\3\2\2\2\u0194\u0195")
        buf.write("\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0207\5\u00d4k\2\u0197")
        buf.write("\u0198\7\64\2\2\u0198\u019b\7\u0084\2\2\u0199\u019a\7")
        buf.write("O\2\2\u019a\u019c\79\2\2\u019b\u0199\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u0207\5\u00d4k\2\u019e")
        buf.write("\u019f\7\64\2\2\u019f\u0207\5\22\n\2\u01a0\u01a2\7D\2")
        buf.write("\2\u01a1\u01a3\5\22\n\2\u01a2\u01a1\3\2\2\2\u01a2\u01a3")
        buf.write("\3\2\2\2\u01a3\u0207\3\2\2\2\u01a4\u01a5\7h\2\2\u01a5")
        buf.write("\u01a8\7R\2\2\u01a6\u01a7\7O\2\2\u01a7\u01a9\79\2\2\u01a8")
        buf.write("\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\3\2\2\2")
        buf.write("\u01aa\u01ad\5\u00d4k\2\u01ab\u01ac\7Q\2\2\u01ac\u01ae")
        buf.write("\5\22\n\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae")
        buf.write("\u0207\3\2\2\2\u01af\u01b0\7h\2\2\u01b0\u01b3\7\u0084")
        buf.write("\2\2\u01b1\u01b2\7O\2\2\u01b2\u01b4\79\2\2\u01b3\u01b1")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write("\u01b8\5\u00d4k\2\u01b6\u01b7\7Q\2\2\u01b7\u01b9\5\22")
        buf.write("\n\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u0207")
        buf.write("\3\2\2\2\u01ba\u01bb\7n\2\2\u01bb\u01be\7\34\2\2\u01bc")
        buf.write("\u01bd\7O\2\2\u01bd\u01bf\79\2\2\u01be\u01bc\3\2\2\2\u01be")
        buf.write("\u01bf\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\5\u00d4")
        buf.write("k\2\u01c1\u01c2\5N(\2\u01c2\u0207\3\2\2\2\u01c3\u01c4")
        buf.write("\7n\2\2\u01c4\u01c7\7\34\2\2\u01c5\u01c6\7O\2\2\u01c6")
        buf.write("\u01c8\79\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\u01ca\5\u00d4k\2\u01ca\u01cb")
        buf.write("\7\35\2\2\u01cb\u01cc\7\u00c7\2\2\u01cc\u0207\3\2\2\2")
        buf.write("\u01cd\u01ce\7n\2\2\u01ce\u01d1\7\34\2\2\u01cf\u01d0\7")
        buf.write("O\2\2\u01d0\u01d2\79\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2")
        buf.write("\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\5\u00d4k\2\u01d4")
        buf.write("\u01d5\7\u0088\2\2\u01d5\u01d6\5\20\t\2\u01d6\u0207\3")
        buf.write("\2\2\2\u01d7\u01d8\7n\2\2\u01d8\u01db\7\34\2\2\u01d9\u01da")
        buf.write("\7O\2\2\u01da\u01dc\79\2\2\u01db\u01d9\3\2\2\2\u01db\u01dc")
        buf.write("\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u0207\5F$\2\u01de\u01df")
        buf.write("\7n\2\2\u01df\u01e0\7{\2\2\u01e0\u01e1\7\24\2\2\u01e1")
        buf.write("\u0207\5\u00caf\2\u01e2\u01e3\7n\2\2\u01e3\u0207\5@!\2")
        buf.write("\u01e4\u01e5\7p\2\2\u01e5\u01ef\5\22\n\2\u01e6\u01e7\7")
        buf.write("\u00a8\2\2\u01e7\u01e8\7\61\2\2\u01e8\u01f0\7\u00c7\2")
        buf.write("\2\u01e9\u01ea\7\u00a8\2\2\u01ea\u01eb\7\u00b8\2\2\u01eb")
        buf.write("\u01f0\7\u00c7\2\2\u01ec\u01ed\7\u00a8\2\2\u01ed\u01ee")
        buf.write("\7\u00a0\2\2\u01ee\u01f0\5\u00dan\2\u01ef\u01e6\3\2\2")
        buf.write("\2\u01ef\u01e9\3\2\2\2\u01ef\u01ec\3\2\2\2\u01f0\u0207")
        buf.write("\3\2\2\2\u01f1\u01f2\7\u0088\2\2\u01f2\u0207\7\u00ae\2")
        buf.write("\2\u01f3\u01f4\7\u0089\2\2\u01f4\u01f7\7\34\2\2\u01f5")
        buf.write("\u01f6\7O\2\2\u01f6\u01f8\79\2\2\u01f7\u01f5\3\2\2\2\u01f7")
        buf.write("\u01f8\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\5\u00d4")
        buf.write("k\2\u01fa\u01fb\7\u00a8\2\2\u01fb\u01fc\5\u00d4k\2\u01fc")
        buf.write("\u0207\3\2\2\2\u01fd\u01fe\7\u008a\2\2\u01fe\u01ff\5\22")
        buf.write("\n\2\u01ff\u0200\7E\2\2\u0200\u0201\5\u00dan\2\u0201\u0207")
        buf.write("\3\2\2\2\u0202\u0203\7\u00b2\2\2\u0203\u0204\5\f\7\2\u0204")
        buf.write("\u0205\5|?\2\u0205\u0207\3\2\2\2\u0206\u0130\3\2\2\2\u0206")
        buf.write("\u013c\3\2\2\2\u0206\u0148\3\2\2\2\u0206\u0154\3\2\2\2")
        buf.write("\u0206\u015a\3\2\2\2\u0206\u0165\3\2\2\2\u0206\u0170\3")
        buf.write("\2\2\2\u0206\u017b\3\2\2\2\u0206\u0184\3\2\2\2\u0206\u0187")
        buf.write("\3\2\2\2\u0206\u0189\3\2\2\2\u0206\u0190\3\2\2\2\u0206")
        buf.write("\u0197\3\2\2\2\u0206\u019e\3\2\2\2\u0206\u01a0\3\2\2\2")
        buf.write("\u0206\u01a4\3\2\2\2\u0206\u01af\3\2\2\2\u0206\u01ba\3")
        buf.write("\2\2\2\u0206\u01c3\3\2\2\2\u0206\u01cd\3\2\2\2\u0206\u01d7")
        buf.write("\3\2\2\2\u0206\u01de\3\2\2\2\u0206\u01e2\3\2\2\2\u0206")
        buf.write("\u01e4\3\2\2\2\u0206\u01f1\3\2\2\2\u0206\u01f3\3\2\2\2")
        buf.write("\u0206\u01fd\3\2\2\2\u0206\u0202\3\2\2\2\u0207\13\3\2")
        buf.write("\2\2\u0208\u020d\5\16\b\2\u0209\u020a\7\u00cd\2\2\u020a")
        buf.write("\u020c\5\16\b\2\u020b\u0209\3\2\2\2\u020c\u020f\3\2\2")
        buf.write("\2\u020d\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e\r\3\2")
        buf.write("\2\2\u020f\u020d\3\2\2\2\u0210\u0211\5\u00d4k\2\u0211")
        buf.write("\u0212\7\u00d2\2\2\u0212\u0213\5\u00caf\2\u0213\17\3\2")
        buf.write("\2\2\u0214\u0215\t\2\2\2\u0215\21\3\2\2\2\u0216\u0217")
        buf.write("\7\177\2\2\u0217\u021c\5\u00caf\2\u0218\u0219\7\177\2")
        buf.write("\2\u0219\u021a\7N\2\2\u021a\u021c\7\u00c7\2\2\u021b\u0216")
        buf.write("\3\2\2\2\u021b\u0218\3\2\2\2\u021c\23\3\2\2\2\u021d\u021e")
        buf.write("\7\21\2\2\u021e\u021f\7\60\2\2\u021f\u0221\5\u00dan\2")
        buf.write("\u0220\u0222\5.\30\2\u0221\u0220\3\2\2\2\u0221\u0222\3")
        buf.write("\2\2\2\u0222\25\3\2\2\2\u0223\u0224\7\27\2\2\u0224\u0225")
        buf.write("\7\u00a0\2\2\u0225\u0227\5\u00dan\2\u0226\u0228\5\22\n")
        buf.write("\2\u0227\u0226\3\2\2\2\u0227\u0228\3\2\2\2\u0228\27\3")
        buf.write("\2\2\2\u0229\u022a\t\3\2\2\u022a\u022e\7#\2\2\u022b\u022c")
        buf.write("\7O\2\2\u022c\u022d\7t\2\2\u022d\u022f\79\2\2\u022e\u022b")
        buf.write("\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("\u0232\5\u00e0q\2\u0231\u0233\5.\30\2\u0232\u0231\3\2")
        buf.write("\2\2\u0232\u0233\3\2\2\2\u0233\u0235\3\2\2\2\u0234\u0236")
        buf.write("\5B\"\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u02c3\3\2\2\2\u0237\u023f\7\21\2\2\u0238\u023b\7\37\2")
        buf.write("\2\u0239\u023a\7z\2\2\u023a\u023c\7\u008a\2\2\u023b\u0239")
        buf.write("\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023f\3\2\2\2\u023d")
        buf.write("\u023f\7\u008a\2\2\u023e\u0237\3\2\2\2\u023e\u0238\3\2")
        buf.write("\2\2\u023e\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0244")
        buf.write("\7\60\2\2\u0241\u0242\7O\2\2\u0242\u0243\7t\2\2\u0243")
        buf.write("\u0245\79\2\2\u0244\u0241\3\2\2\2\u0244\u0245\3\2\2\2")
        buf.write("\u0245\u0246\3\2\2\2\u0246\u0248\5\u00dan\2\u0247\u0249")
        buf.write("\5\60\31\2\u0248\u0247\3\2\2\2\u0248\u0249\3\2\2\2\u0249")
        buf.write("\u024b\3\2\2\2\u024a\u024c\5.\30\2\u024b\u024a\3\2\2\2")
        buf.write("\u024b\u024c\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\5")
        buf.write("\32\16\2\u024e\u024f\5\36\20\2\u024f\u02c3\3\2\2\2\u0250")
        buf.write("\u0251\t\3\2\2\u0251\u0252\7e\2\2\u0252\u0256\7\u00b7")
        buf.write("\2\2\u0253\u0254\7O\2\2\u0254\u0255\7t\2\2\u0255\u0257")
        buf.write("\79\2\2\u0256\u0253\3\2\2\2\u0256\u0257\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258\u025a\5\u00dan\2\u0259\u025b\5\60")
        buf.write("\31\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025d")
        buf.write("\3\2\2\2\u025c\u025e\5.\30\2\u025d\u025c\3\2\2\2\u025d")
        buf.write("\u025e\3\2\2\2\u025e\u0264\3\2\2\2\u025f\u0260\7\u00be")
        buf.write("\2\2\u0260\u0262\7\u00a6\2\2\u0261\u0263\7\u00c5\2\2\u0262")
        buf.write("\u0261\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\3\2\2\2")
        buf.write("\u0264\u025f\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0267\3")
        buf.write("\2\2\2\u0266\u0268\5\62\32\2\u0267\u0266\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u026a\3\2\2\2\u0269\u026b\5\66\34")
        buf.write("\2\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c")
        buf.write("\3\2\2\2\u026c\u026d\5\64\33\2\u026d\u02c3\3\2\2\2\u026e")
        buf.write("\u026f\t\3\2\2\u026f\u0270\7i\2\2\u0270\u0274\7\u00b7")
        buf.write("\2\2\u0271\u0272\7O\2\2\u0272\u0273\7t\2\2\u0273\u0275")
        buf.write("\79\2\2\u0274\u0271\3\2\2\2\u0274\u0275\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u0278\5\u00dan\2\u0277\u0279\5\60")
        buf.write("\31\2\u0278\u0277\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b")
        buf.write("\3\2\2\2\u027a\u027c\5.\30\2\u027b\u027a\3\2\2\2\u027b")
        buf.write("\u027c\3\2\2\2\u027c\u027e\3\2\2\2\u027d\u027f\5\66\34")
        buf.write("\2\u027e\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0285")
        buf.write("\3\2\2\2\u0280\u0286\5\62\32\2\u0281\u0283\58\35\2\u0282")
        buf.write("\u0284\7\u0080\2\2\u0283\u0282\3\2\2\2\u0283\u0284\3\2")
        buf.write("\2\2\u0284\u0286\3\2\2\2\u0285\u0280\3\2\2\2\u0285\u0281")
        buf.write("\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\5\64\33\2\u0288")
        buf.write("\u02c3\3\2\2\2\u0289\u0291\7\21\2\2\u028a\u028d\7\37\2")
        buf.write("\2\u028b\u028c\7z\2\2\u028c\u028e\7\u008a\2\2\u028d\u028b")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0291\3\2\2\2\u028f")
        buf.write("\u0291\7\u008a\2\2\u0290\u0289\3\2\2\2\u0290\u028a\3\2")
        buf.write("\2\2\u0290\u028f\3\2\2\2\u0291\u0293\3\2\2\2\u0292\u0294")
        buf.write("\7\u00a2\2\2\u0293\u0292\3\2\2\2\u0293\u0294\3\2\2\2\u0294")
        buf.write("\u0295\3\2\2\2\u0295\u0299\7\u00a0\2\2\u0296\u0297\7O")
        buf.write("\2\2\u0297\u0298\7t\2\2\u0298\u029a\79\2\2\u0299\u0296")
        buf.write("\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b")
        buf.write("\u029d\5\u00dan\2\u029c\u029e\5\60\31\2\u029d\u029c\3")
        buf.write("\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a0\3\2\2\2\u029f\u02a1")
        buf.write("\5.\30\2\u02a0\u029f\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1")
        buf.write("\u02a3\3\2\2\2\u02a2\u02a4\5\66\34\2\u02a3\u02a2\3\2\2")
        buf.write("\2\u02a3\u02a4\3\2\2\2\u02a4\u02a6\3\2\2\2\u02a5\u02a7")
        buf.write("\58\35\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a9\3\2\2\2\u02a8\u02aa\5\64\33\2\u02a9\u02a8\3\2\2")
        buf.write("\2\u02a9\u02aa\3\2\2\2\u02aa\u02c3\3\2\2\2\u02ab\u02ae")
        buf.write("\t\3\2\2\u02ac\u02ad\7z\2\2\u02ad\u02af\7\u008a\2\2\u02ae")
        buf.write("\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0\3\2\2\2")
        buf.write("\u02b0\u02b4\7\u00b7\2\2\u02b1\u02b2\7O\2\2\u02b2\u02b3")
        buf.write("\7t\2\2\u02b3\u02b5\79\2\2\u02b4\u02b1\3\2\2\2\u02b4\u02b5")
        buf.write("\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b8\5\u00dan\2\u02b7")
        buf.write("\u02b9\5\60\31\2\u02b8\u02b7\3\2\2\2\u02b8\u02b9\3\2\2")
        buf.write("\2\u02b9\u02bb\3\2\2\2\u02ba\u02bc\5.\30\2\u02bb\u02ba")
        buf.write("\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02be\3\2\2\2\u02bd")
        buf.write("\u02bf\5\66\34\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2")
        buf.write("\2\u02bf\u02c0\3\2\2\2\u02c0\u02c1\5\64\33\2\u02c1\u02c3")
        buf.write("\3\2\2\2\u02c2\u0229\3\2\2\2\u02c2\u023e\3\2\2\2\u02c2")
        buf.write("\u0250\3\2\2\2\u02c2\u026e\3\2\2\2\u02c2\u0290\3\2\2\2")
        buf.write("\u02c2\u02ab\3\2\2\2\u02c3\31\3\2\2\2\u02c4\u02c5\7\u00d8")
        buf.write("\2\2\u02c5\u02ca\5\34\17\2\u02c6\u02c7\7\u00cd\2\2\u02c7")
        buf.write("\u02c9\5\34\17\2\u02c8\u02c6\3\2\2\2\u02c9\u02cc\3\2\2")
        buf.write("\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cd")
        buf.write("\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cd\u02ce\7\u00e2\2\2\u02ce")
        buf.write("\33\3\2\2\2\u02cf\u02d0\5\u00f0y\2\u02d0\u02da\5\u00c4")
        buf.write("c\2\u02d1\u02d2\7(\2\2\u02d2\u02d9\5\u00e6t\2\u02d3\u02d4")
        buf.write("\7;\2\2\u02d4\u02d9\5\u00caf\2\u02d5\u02d9\7L\2\2\u02d6")
        buf.write("\u02d9\7T\2\2\u02d7\u02d9\7Z\2\2\u02d8\u02d1\3\2\2\2\u02d8")
        buf.write("\u02d3\3\2\2\2\u02d8\u02d5\3\2\2\2\u02d8\u02d6\3\2\2\2")
        buf.write("\u02d8\u02d7\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da\u02d8\3")
        buf.write("\2\2\2\u02da\u02db\3\2\2\2\u02db\35\3\2\2\2\u02dc\u02da")
        buf.write("\3\2\2\2\u02dd\u02df\5 \21\2\u02de\u02dd\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02df\u02e7\3\2\2\2\u02e0\u02e6\5$\23\2")
        buf.write("\u02e1\u02e6\5&\24\2\u02e2\u02e6\5(\25\2\u02e3\u02e6\5")
        buf.write("*\26\2\u02e4\u02e6\5,\27\2\u02e5\u02e0\3\2\2\2\u02e5\u02e1")
        buf.write("\3\2\2\2\u02e5\u02e2\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5")
        buf.write("\u02e4\3\2\2\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2")
        buf.write("\u02e7\u02e8\3\2\2\2\u02e8\37\3\2\2\2\u02e9\u02e7\3\2")
        buf.write("\2\2\u02ea\u02eb\7\u0083\2\2\u02eb\u02ec\7\\\2\2\u02ec")
        buf.write("\u02ed\5\u00c6d\2\u02ed!\3\2\2\2\u02ee\u02f5\5\u00f0y")
        buf.write("\2\u02ef\u02f2\5\u00f0y\2\u02f0\u02f1\7\u00d8\2\2\u02f1")
        buf.write("\u02f3\7\u00e2\2\2\u02f2\u02f0\3\2\2\2\u02f2\u02f3\3\2")
        buf.write("\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f6\5\u00e6t\2\u02f5")
        buf.write("\u02ef\3\2\2\2\u02f5\u02f4\3\2\2\2\u02f6#\3\2\2\2\u02f7")
        buf.write("\u02f8\7\u0099\2\2\u02f8\u02f9\7\u00d8\2\2\u02f9\u02fa")
        buf.write("\5\u00f0y\2\u02fa\u02fe\7\u00d8\2\2\u02fb\u02fd\5\"\22")
        buf.write("\2\u02fc\u02fb\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc")
        buf.write("\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0301\3\2\2\2\u0300")
        buf.write("\u02fe\3\2\2\2\u0301\u0302\7\u00e2\2\2\u0302\u0303\7\u00e2")
        buf.write("\2\2\u0303%\3\2\2\2\u0304\u0305\7b\2\2\u0305\u030f\7\u00d8")
        buf.write("\2\2\u0306\u0310\7\u00c5\2\2\u0307\u0308\7l\2\2\u0308")
        buf.write("\u0309\7\u00c5\2\2\u0309\u030a\7j\2\2\u030a\u0310\7\u00c5")
        buf.write("\2\2\u030b\u030c\7j\2\2\u030c\u030d\7\u00c5\2\2\u030d")
        buf.write("\u030e\7l\2\2\u030e\u0310\7\u00c5\2\2\u030f\u0306\3\2")
        buf.write("\2\2\u030f\u0307\3\2\2\2\u030f\u030b\3\2\2\2\u0310\u0311")
        buf.write("\3\2\2\2\u0311\u0312\7\u00e2\2\2\u0312\'\3\2\2\2\u0313")
        buf.write("\u0314\7_\2\2\u0314\u0315\7\u00d8\2\2\u0315\u0316\5\u00f0")
        buf.write("y\2\u0316\u031a\7\u00d8\2\2\u0317\u0319\5\"\22\2\u0318")
        buf.write("\u0317\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031a\u031b\3\2\2\2\u031b\u031d\3\2\2\2\u031c\u031a\3")
        buf.write("\2\2\2\u031d\u031e\7\u00e2\2\2\u031e\u031f\7\u00e2\2\2")
        buf.write("\u031f)\3\2\2\2\u0320\u0321\7\u0086\2\2\u0321\u032c\7")
        buf.write("\u00d8\2\2\u0322\u0323\7l\2\2\u0323\u0324\5\u00f0y\2\u0324")
        buf.write("\u0325\7j\2\2\u0325\u0326\5\u00f0y\2\u0326\u032d\3\2\2")
        buf.write("\2\u0327\u0328\7j\2\2\u0328\u0329\5\u00f0y\2\u0329\u032a")
        buf.write("\7l\2\2\u032a\u032b\5\u00f0y\2\u032b\u032d\3\2\2\2\u032c")
        buf.write("\u0322\3\2\2\2\u032c\u0327\3\2\2\2\u032d\u032e\3\2\2\2")
        buf.write("\u032e\u032f\7\u00e2\2\2\u032f+\3\2\2\2\u0330\u0331\7")
        buf.write("\u0097\2\2\u0331\u0332\7\u00d8\2\2\u0332\u0333\5\u00a8")
        buf.write("U\2\u0333\u0334\7\u00e2\2\2\u0334-\3\2\2\2\u0335\u0336")
        buf.write("\7x\2\2\u0336\u0339\7\31\2\2\u0337\u033a\5\u00f0y\2\u0338")
        buf.write("\u033a\7\u00c7\2\2\u0339\u0337\3\2\2\2\u0339\u0338\3\2")
        buf.write("\2\2\u033a/\3\2\2\2\u033b\u033c\7\u00b5\2\2\u033c\u033d")
        buf.write("\7\u00c7\2\2\u033d\61\3\2\2\2\u033e\u033f\7\u00a8\2\2")
        buf.write("\u033f\u0340\5\u00dan\2\u0340\63\3\2\2\2\u0341\u0342\7")
        buf.write("\f\2\2\u0342\u0343\5j\66\2\u0343\65\3\2\2\2\u0344\u0345")
        buf.write("\7\u00d8\2\2\u0345\u034a\5D#\2\u0346\u0347\7\u00cd\2\2")
        buf.write("\u0347\u0349\5D#\2\u0348\u0346\3\2\2\2\u0349\u034c\3\2")
        buf.write("\2\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034d")
        buf.write("\3\2\2\2\u034c\u034a\3\2\2\2\u034d\u034e\7\u00e2\2\2\u034e")
        buf.write("\u0354\3\2\2\2\u034f\u0350\7\f\2\2\u0350\u0354\5\u00da")
        buf.write("n\2\u0351\u0352\7\f\2\2\u0352\u0354\5\u00d8m\2\u0353\u0344")
        buf.write("\3\2\2\2\u0353\u034f\3\2\2\2\u0353\u0351\3\2\2\2\u0354")
        buf.write("\67\3\2\2\2\u0355\u035e\5B\"\2\u0356\u035d\5\u0086D\2")
        buf.write("\u0357\u035d\5:\36\2\u0358\u035d\5<\37\2\u0359\u035d\5")
        buf.write("> \2\u035a\u035d\5@!\2\u035b\u035d\5\u008eH\2\u035c\u0356")
        buf.write("\3\2\2\2\u035c\u0357\3\2\2\2\u035c\u0358\3\2\2\2\u035c")
        buf.write("\u0359\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035b\3\2\2\2")
        buf.write("\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3")
        buf.write("\2\2\2\u035f9\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0362")
        buf.write("\7\177\2\2\u0362\u0363\7\24\2\2\u0363\u0364\5\u00caf\2")
        buf.write("\u0364;\3\2\2\2\u0365\u0366\7\u0083\2\2\u0366\u0367\7")
        buf.write("\\\2\2\u0367\u0368\5\u00caf\2\u0368=\3\2\2\2\u0369\u036a")
        buf.write("\7\u0091\2\2\u036a\u036b\7\24\2\2\u036b\u036c\5\u00ca")
        buf.write("f\2\u036c?\3\2\2\2\u036d\u036e\7\u00ae\2\2\u036e\u0373")
        buf.write("\5R*\2\u036f\u0370\7\u00cd\2\2\u0370\u0372\5R*\2\u0371")
        buf.write("\u036f\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374A\3\2\2\2\u0375\u0373\3\2\2")
        buf.write("\2\u0376\u0378\7\67\2\2\u0377\u0379\7\u00d2\2\2\u0378")
        buf.write("\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\3\2\2\2")
        buf.write("\u037a\u0380\5\u00f2z\2\u037b\u037d\7\u00d8\2\2\u037c")
        buf.write("\u037e\5\u00c6d\2\u037d\u037c\3\2\2\2\u037d\u037e\3\2")
        buf.write("\2\2\u037e\u037f\3\2\2\2\u037f\u0381\7\u00e2\2\2\u0380")
        buf.write("\u037b\3\2\2\2\u0380\u0381\3\2\2\2\u0381C\3\2\2\2\u0382")
        buf.write("\u038d\5F$\2\u0383\u0384\7\36\2\2\u0384\u0385\5\u00f0")
        buf.write("y\2\u0385\u0386\7\27\2\2\u0386\u0387\5\u00caf\2\u0387")
        buf.write("\u038d\3\2\2\2\u0388\u0389\7R\2\2\u0389\u038d\5J&\2\u038a")
        buf.write("\u038b\7\u0084\2\2\u038b\u038d\5L\'\2\u038c\u0382\3\2")
        buf.write("\2\2\u038c\u0383\3\2\2\2\u038c\u0388\3\2\2\2\u038c\u038a")
        buf.write("\3\2\2\2\u038dE\3\2\2\2\u038e\u038f\5\u00d4k\2\u038f\u0391")
        buf.write("\5\u00c4c\2\u0390\u0392\5H%\2\u0391\u0390\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u0395\3\2\2\2\u0393\u0394\7\35\2")
        buf.write("\2\u0394\u0396\7\u00c7\2\2\u0395\u0393\3\2\2\2\u0395\u0396")
        buf.write("\3\2\2\2\u0396\u0398\3\2\2\2\u0397\u0399\5N(\2\u0398\u0397")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039c\3\2\2\2\u039a")
        buf.write("\u039b\7\u00ae\2\2\u039b\u039d\5\u00caf\2\u039c\u039a")
        buf.write("\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u03af\3\2\2\2\u039e")
        buf.write("\u03a0\5\u00d4k\2\u039f\u03a1\5\u00c4c\2\u03a0\u039f\3")
        buf.write("\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a5")
        buf.write("\5H%\2\u03a3\u03a4\7\35\2\2\u03a4\u03a6\7\u00c7\2\2\u03a5")
        buf.write("\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2")
        buf.write("\u03a7\u03a9\5N(\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2")
        buf.write("\2\2\u03a9\u03ac\3\2\2\2\u03aa\u03ab\7\u00ae\2\2\u03ab")
        buf.write("\u03ad\5\u00caf\2\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3\2")
        buf.write("\2\2\u03ad\u03af\3\2\2\2\u03ae\u038e\3\2\2\2\u03ae\u039e")
        buf.write("\3\2\2\2\u03afG\3\2\2\2\u03b0\u03b1\t\4\2\2\u03b1\u03b2")
        buf.write("\5\u00caf\2\u03b2I\3\2\2\2\u03b3\u03b4\5\u00d4k\2\u03b4")
        buf.write("\u03b5\5\u00caf\2\u03b5\u03b6\7\u00af\2\2\u03b6\u03b7")
        buf.write("\5\u00c4c\2\u03b7\u03b8\7I\2\2\u03b8\u03b9\7\u00c5\2\2")
        buf.write("\u03b9K\3\2\2\2\u03ba\u03bb\5\u00d4k\2\u03bb\u03bc\5h")
        buf.write("\65\2\u03bcM\3\2\2\2\u03bd\u03be\7\32\2\2\u03be\u03bf")
        buf.write("\7\u00d8\2\2\u03bf\u03c4\5P)\2\u03c0\u03c1\7\u00cd\2\2")
        buf.write("\u03c1\u03c3\5P)\2\u03c2\u03c0\3\2\2\2\u03c3\u03c6\3\2")
        buf.write("\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7")
        buf.write("\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03c8\7\u00e2\2\2\u03c8")
        buf.write("O\3\2\2\2\u03c9\u03cf\5\u00f0y\2\u03ca\u03cc\7\u00d8\2")
        buf.write("\2\u03cb\u03cd\5\u00c6d\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d0\7\u00e2\2\2\u03cf")
        buf.write("\u03ca\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0Q\3\2\2\2\u03d1")
        buf.write("\u03d9\5\u00caf\2\u03d2\u03da\7*\2\2\u03d3\u03d4\7\u00a8")
        buf.write("\2\2\u03d4\u03d5\7\61\2\2\u03d5\u03da\7\u00c7\2\2\u03d6")
        buf.write("\u03d7\7\u00a8\2\2\u03d7\u03d8\7\u00b8\2\2\u03d8\u03da")
        buf.write("\7\u00c7\2\2\u03d9\u03d2\3\2\2\2\u03d9\u03d3\3\2\2\2\u03d9")
        buf.write("\u03d6\3\2\2\2\u03d9\u03da\3\2\2\2\u03daS\3\2\2\2\u03db")
        buf.write("\u03dd\t\5\2\2\u03dc\u03de\7\u00a0\2\2\u03dd\u03dc\3\2")
        buf.write("\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e0")
        buf.write("\5\u00d6l\2\u03e0U\3\2\2\2\u03e1\u03e2\t\6\2\2\u03e2\u03e5")
        buf.write("\7#\2\2\u03e3\u03e4\7O\2\2\u03e4\u03e6\79\2\2\u03e5\u03e3")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\u03e9\5\u00e0q\2\u03e8\u03ea\5.\30\2\u03e9\u03e8\3\2")
        buf.write("\2\2\u03e9\u03ea\3\2\2\2\u03ea\u0401\3\2\2\2\u03eb\u03f2")
        buf.write("\t\6\2\2\u03ec\u03f3\7\60\2\2\u03ed\u03ef\7\u00a2\2\2")
        buf.write("\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\3")
        buf.write("\2\2\2\u03f0\u03f3\7\u00a0\2\2\u03f1\u03f3\7\u00b7\2\2")
        buf.write("\u03f2\u03ec\3\2\2\2\u03f2\u03ee\3\2\2\2\u03f2\u03f1\3")
        buf.write("\2\2\2\u03f3\u03f6\3\2\2\2\u03f4\u03f5\7O\2\2\u03f5\u03f7")
        buf.write("\79\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u03fa\5\u00dan\2\u03f9\u03fb\5.\30")
        buf.write("\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fe")
        buf.write("\3\2\2\2\u03fc\u03fd\7s\2\2\u03fd\u03ff\7)\2\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401\3\2\2\2\u0400")
        buf.write("\u03e1\3\2\2\2\u0400\u03eb\3\2\2\2\u0401W\3\2\2\2\u0402")
        buf.write("\u0403\79\2\2\u0403\u0404\7#\2\2\u0404\u0410\5\u00e0q")
        buf.write("\2\u0405\u040c\79\2\2\u0406\u040d\7\60\2\2\u0407\u0409")
        buf.write("\7\u00a2\2\2\u0408\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u040d\7\u00a0\2\2\u040b\u040d\7\u00b7")
        buf.write("\2\2\u040c\u0406\3\2\2\2\u040c\u0408\3\2\2\2\u040c\u040b")
        buf.write("\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u0410\5\u00dan\2\u040f\u0402\3\2\2\2\u040f\u0405\3\2")
        buf.write("\2\2\u0410Y\3\2\2\2\u0411\u0412\7:\2\2\u0412\u0413\7\17")
        buf.write("\2\2\u0413\u0418\5\6\4\2\u0414\u0415\7:\2\2\u0415\u0416")
        buf.write("\7\u009e\2\2\u0416\u0418\5\6\4\2\u0417\u0411\3\2\2\2\u0417")
        buf.write("\u0414\3\2\2\2\u0418[\3\2\2\2\u0419\u041a\7V\2\2\u041a")
        buf.write("\u041c\7X\2\2\u041b\u041d\7\u00a0\2\2\u041c\u041b\3\2")
        buf.write("\2\2\u041c\u041d\3\2\2\2\u041d\u0421\3\2\2\2\u041e\u0422")
        buf.write("\5\u00dan\2\u041f\u0420\7G\2\2\u0420\u0422\5\u00d8m\2")
        buf.write("\u0421\u041e\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0424\3")
        buf.write("\2\2\2\u0423\u0425\5^\60\2\u0424\u0423\3\2\2\2\u0424\u0425")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\5`\61\2\u0427")
        buf.write("]\3\2\2\2\u0428\u0429\7\u00d8\2\2\u0429\u042e\5\u00d4")
        buf.write("k\2\u042a\u042b\7\u00cd\2\2\u042b\u042d\5\u00d4k\2\u042c")
        buf.write("\u042a\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c\3\2\2\2")
        buf.write("\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430\u042e\3")
        buf.write("\2\2\2\u0431\u0432\7\u00e2\2\2\u0432_\3\2\2\2\u0433\u0434")
        buf.write("\7C\2\2\u0434\u0438\5\u00f0y\2\u0435\u0438\7\u00b6\2\2")
        buf.write("\u0436\u0438\5j\66\2\u0437\u0433\3\2\2\2\u0437\u0435\3")
        buf.write("\2\2\2\u0437\u0436\3\2\2\2\u0438a\3\2\2\2\u0439\u043a")
        buf.write("\7]\2\2\u043a\u043c\7q\2\2\u043b\u043d\5.\30\2\u043c\u043b")
        buf.write("\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043e\3\2\2\2\u043e")
        buf.write("\u0440\5|?\2\u043f\u0441\t\7\2\2\u0440\u043f\3\2\2\2\u0440")
        buf.write("\u0441\3\2\2\2\u0441c\3\2\2\2\u0442\u0443\7y\2\2\u0443")
        buf.write("\u0444\7\u00a0\2\2\u0444\u0446\5\u00dan\2\u0445\u0447")
        buf.write("\5.\30\2\u0446\u0445\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write("\u0449\3\2\2\2\u0448\u044a\5\22\n\2\u0449\u0448\3\2\2")
        buf.write("\2\u0449\u044a\3\2\2\2\u044a\u044c\3\2\2\2\u044b\u044d")
        buf.write("\7>\2\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u044f\3\2\2\2\u044e\u0450\7\'\2\2\u044f\u044e\3\2\2\2")
        buf.write("\u044f\u0450\3\2\2\2\u0450e\3\2\2\2\u0451\u0452\7\u0089")
        buf.write("\2\2\u0452\u0453\7\u00a0\2\2\u0453\u0454\5\u00dan\2\u0454")
        buf.write("\u0455\7\u00a8\2\2\u0455\u045d\5\u00dan\2\u0456\u0457")
        buf.write("\7\u00cd\2\2\u0457\u0458\5\u00dan\2\u0458\u0459\7\u00a8")
        buf.write("\2\2\u0459\u045a\5\u00dan\2\u045a\u045c\3\2\2\2\u045b")
        buf.write("\u0456\3\2\2\2\u045c\u045f\3\2\2\2\u045d\u045b\3\2\2\2")
        buf.write("\u045d\u045e\3\2\2\2\u045e\u0461\3\2\2\2\u045f\u045d\3")
        buf.write("\2\2\2\u0460\u0462\5.\30\2\u0461\u0460\3\2\2\2\u0461\u0462")
        buf.write("\3\2\2\2\u0462g\3\2\2\2\u0463\u0465\7\u00d8\2\2\u0464")
        buf.write("\u0466\5p9\2\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466")
        buf.write("\u0467\3\2\2\2\u0467\u0468\7\u0093\2\2\u0468\u046a\5\u00c6")
        buf.write("d\2\u0469\u046b\5~@\2\u046a\u0469\3\2\2\2\u046a\u046b")
        buf.write("\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u046e\5\u0088E\2\u046d")
        buf.write("\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2")
        buf.write("\u046f\u0470\7\u00e2\2\2\u0470i\3\2\2\2\u0471\u0477\5")
        buf.write("l\67\2\u0472\u0473\7\u00b1\2\2\u0473\u0474\7\6\2\2\u0474")
        buf.write("\u0476\5l\67\2\u0475\u0472\3\2\2\2\u0476\u0479\3\2\2\2")
        buf.write("\u0477\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478k\3\2\2")
        buf.write("\2\u0479\u0477\3\2\2\2\u047a\u0480\5n8\2\u047b\u047c\7")
        buf.write("\u00d8\2\2\u047c\u047d\5j\66\2\u047d\u047e\7\u00e2\2\2")
        buf.write("\u047e\u0480\3\2\2\2\u047f\u047a\3\2\2\2\u047f\u047b\3")
        buf.write("\2\2\2\u0480m\3\2\2\2\u0481\u0483\5p9\2\u0482\u0481\3")
        buf.write("\2\2\2\u0482\u0483\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486")
        buf.write("\7\u0093\2\2\u0485\u0487\7\62\2\2\u0486\u0485\3\2\2\2")
        buf.write("\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488\u048a\5")
        buf.write("r:\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048b")
        buf.write("\3\2\2\2\u048b\u048d\5\u00c6d\2\u048c\u048e\5t;\2\u048d")
        buf.write("\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490\3\2\2\2")
        buf.write("\u048f\u0491\5v<\2\u0490\u048f\3\2\2\2\u0490\u0491\3\2")
        buf.write("\2\2\u0491\u0493\3\2\2\2\u0492\u0494\5x=\2\u0493\u0492")
        buf.write("\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0496\3\2\2\2\u0495")
        buf.write("\u0497\5z>\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2\u0497")
        buf.write("\u0499\3\2\2\2\u0498\u049a\5|?\2\u0499\u0498\3\2\2\2\u0499")
        buf.write("\u049a\3\2\2\2\u049a\u049c\3\2\2\2\u049b\u049d\5~@\2\u049c")
        buf.write("\u049b\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\3\2\2\2")
        buf.write("\u049e\u04a0\5\u0084C\2\u049f\u049e\3\2\2\2\u049f\u04a0")
        buf.write("\3\2\2\2\u04a0\u04a2\3\2\2\2\u04a1\u04a3\5\u0086D\2\u04a2")
        buf.write("\u04a1\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a5\3\2\2\2")
        buf.write("\u04a4\u04a6\5\u008aF\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6")
        buf.write("\3\2\2\2\u04a6\u04a8\3\2\2\2\u04a7\u04a9\5\u008cG\2\u04a8")
        buf.write("\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ab\3\2\2\2")
        buf.write("\u04aa\u04ac\5\u008eH\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac")
        buf.write("\3\2\2\2\u04aco\3\2\2\2\u04ad\u04ae\7\u00be\2\2\u04ae")
        buf.write("\u04af\5\u0090I\2\u04afq\3\2\2\2\u04b0\u04b1\7\u00a9\2")
        buf.write("\2\u04b1\u04b4\7\u00c5\2\2\u04b2\u04b3\7\u00be\2\2\u04b3")
        buf.write("\u04b5\7\u00a5\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b5\3\2")
        buf.write("\2\2\u04b5s\3\2\2\2\u04b6\u04b7\7E\2\2\u04b7\u04b8\5\u0094")
        buf.write("K\2\u04b8u\3\2\2\2\u04b9\u04bb\t\b\2\2\u04ba\u04b9\3\2")
        buf.write("\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd")
        buf.write("\7\13\2\2\u04bd\u04be\7[\2\2\u04be\u04bf\5\u00c6d\2\u04bf")
        buf.write("w\3\2\2\2\u04c0\u04c1\7\u00bd\2\2\u04c1\u04c2\5\u00f0")
        buf.write("y\2\u04c2\u04c3\7\f\2\2\u04c3\u04c4\7\u00d8\2\2\u04c4")
        buf.write("\u04c5\5\u00acW\2\u04c5\u04c6\7\u00e2\2\2\u04c6y\3\2\2")
        buf.write("\2\u04c7\u04c8\7\u0082\2\2\u04c8\u04c9\5\u00caf\2\u04c9")
        buf.write("{\3\2\2\2\u04ca\u04cb\7\u00bc\2\2\u04cb\u04cc\5\u00ca")
        buf.write("f\2\u04cc}\3\2\2\2\u04cd\u04ce\7J\2\2\u04ce\u04d5\7\24")
        buf.write("\2\2\u04cf\u04d0\t\t\2\2\u04d0\u04d1\7\u00d8\2\2\u04d1")
        buf.write("\u04d2\5\u00c6d\2\u04d2\u04d3\7\u00e2\2\2\u04d3\u04d6")
        buf.write("\3\2\2\2\u04d4\u04d6\5\u00c6d\2\u04d5\u04cf\3\2\2\2\u04d5")
        buf.write("\u04d4\3\2\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04d9\5\u0080")
        buf.write("A\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04db")
        buf.write("\3\2\2\2\u04da\u04dc\5\u0082B\2\u04db\u04da\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\177\3\2\2\2\u04dd\u04de\7\u00be\2")
        buf.write("\2\u04de\u04df\t\t\2\2\u04df\u0081\3\2\2\2\u04e0\u04e1")
        buf.write("\7\u00be\2\2\u04e1\u04e2\7\u00aa\2\2\u04e2\u0083\3\2\2")
        buf.write("\2\u04e3\u04e4\7K\2\2\u04e4\u04e5\5\u00caf\2\u04e5\u0085")
        buf.write("\3\2\2\2\u04e6\u04e7\7{\2\2\u04e7\u04e8\7\24\2\2\u04e8")
        buf.write("\u04e9\5\u00a0Q\2\u04e9\u0087\3\2\2\2\u04ea\u04eb\7{\2")
        buf.write("\2\u04eb\u04ec\7\24\2\2\u04ec\u04ed\5\u00c6d\2\u04ed\u0089")
        buf.write("\3\2\2\2\u04ee\u04ef\7d\2\2\u04ef\u04f0\5\u009eP\2\u04f0")
        buf.write("\u04f1\7\24\2\2\u04f1\u04f2\5\u00c6d\2\u04f2\u008b\3\2")
        buf.write("\2\2\u04f3\u04f4\7d\2\2\u04f4\u04f7\5\u009eP\2\u04f5\u04f6")
        buf.write("\7\u00be\2\2\u04f6\u04f8\7\u00a5\2\2\u04f7\u04f5\3\2\2")
        buf.write("\2\u04f7\u04f8\3\2\2\2\u04f8\u008d\3\2\2\2\u04f9\u04fa")
        buf.write("\7\u0097\2\2\u04fa\u04fb\5\u00a8U\2\u04fb\u008f\3\2\2")
        buf.write("\2\u04fc\u0501\5\u0092J\2\u04fd\u04fe\7\u00cd\2\2\u04fe")
        buf.write("\u0500\5\u0092J\2\u04ff\u04fd\3\2\2\2\u0500\u0503\3\2")
        buf.write("\2\2\u0501\u04ff\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0091")
        buf.write("\3\2\2\2\u0503\u0501\3\2\2\2\u0504\u0505\5\u00f0y\2\u0505")
        buf.write("\u0506\7\f\2\2\u0506\u0507\7\u00d8\2\2\u0507\u0508\5j")
        buf.write("\66\2\u0508\u0509\7\u00e2\2\2\u0509\u050f\3\2\2\2\u050a")
        buf.write("\u050b\5\u00caf\2\u050b\u050c\7\f\2\2\u050c\u050d\5\u00f0")
        buf.write("y\2\u050d\u050f\3\2\2\2\u050e\u0504\3\2\2\2\u050e\u050a")
        buf.write("\3\2\2\2\u050f\u0093\3\2\2\2\u0510\u0511\bK\1\2\u0511")
        buf.write("\u0513\5\u00d6l\2\u0512\u0514\7>\2\2\u0513\u0512\3\2\2")
        buf.write("\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2\2\2\u0515\u0517")
        buf.write("\5\u009cO\2\u0516\u0515\3\2\2\2\u0516\u0517\3\2\2\2\u0517")
        buf.write("\u051d\3\2\2\2\u0518\u0519\7\u00d8\2\2\u0519\u051a\5\u0094")
        buf.write("K\2\u051a\u051b\7\u00e2\2\2\u051b\u051d\3\2\2\2\u051c")
        buf.write("\u0510\3\2\2\2\u051c\u0518\3\2\2\2\u051d\u052f\3\2\2\2")
        buf.write("\u051e\u051f\f\5\2\2\u051f\u0520\5\u0098M\2\u0520\u0521")
        buf.write("\5\u0094K\6\u0521\u052e\3\2\2\2\u0522\u0524\f\6\2\2\u0523")
        buf.write("\u0525\t\n\2\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2")
        buf.write("\u0525\u0527\3\2\2\2\u0526\u0528\5\u0096L\2\u0527\u0526")
        buf.write("\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\3\2\2\2\u0529")
        buf.write("\u052a\7[\2\2\u052a\u052b\5\u0094K\2\u052b\u052c\5\u009a")
        buf.write("N\2\u052c\u052e\3\2\2\2\u052d\u051e\3\2\2\2\u052d\u0522")
        buf.write("\3\2\2\2\u052e\u0531\3\2\2\2\u052f\u052d\3\2\2\2\u052f")
        buf.write("\u0530\3\2\2\2\u0530\u0095\3\2\2\2\u0531\u052f\3\2\2\2")
        buf.write("\u0532\u0534\t\13\2\2\u0533\u0532\3\2\2\2\u0533\u0534")
        buf.write("\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u053c\7U\2\2\u0536")
        buf.write("\u0538\7U\2\2\u0537\u0539\t\13\2\2\u0538\u0537\3\2\2\2")
        buf.write("\u0538\u0539\3\2\2\2\u0539\u053c\3\2\2\2\u053a\u053c\t")
        buf.write("\13\2\2\u053b\u0533\3\2\2\2\u053b\u0536\3\2\2\2\u053b")
        buf.write("\u053a\3\2\2\2\u053c\u055e\3\2\2\2\u053d\u053f\t\f\2\2")
        buf.write("\u053e\u053d\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0540\3")
        buf.write("\2\2\2\u0540\u0542\t\r\2\2\u0541\u0543\7|\2\2\u0542\u0541")
        buf.write("\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u054c\3\2\2\2\u0544")
        buf.write("\u0546\t\r\2\2\u0545\u0547\7|\2\2\u0546\u0545\3\2\2\2")
        buf.write("\u0546\u0547\3\2\2\2\u0547\u0549\3\2\2\2\u0548\u054a\t")
        buf.write("\f\2\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054c")
        buf.write("\3\2\2\2\u054b\u053e\3\2\2\2\u054b\u0544\3\2\2\2\u054c")
        buf.write("\u055e\3\2\2\2\u054d\u054f\t\16\2\2\u054e\u054d\3\2\2")
        buf.write("\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0552")
        buf.write("\7F\2\2\u0551\u0553\7|\2\2\u0552\u0551\3\2\2\2\u0552\u0553")
        buf.write("\3\2\2\2\u0553\u055c\3\2\2\2\u0554\u0556\7F\2\2\u0555")
        buf.write("\u0557\7|\2\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2")
        buf.write("\u0557\u0559\3\2\2\2\u0558\u055a\t\16\2\2\u0559\u0558")
        buf.write("\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055c\3\2\2\2\u055b")
        buf.write("\u054e\3\2\2\2\u055b\u0554\3\2\2\2\u055c\u055e\3\2\2\2")
        buf.write("\u055d\u053b\3\2\2\2\u055d\u054b\3\2\2\2\u055d\u055b\3")
        buf.write("\2\2\2\u055e\u0097\3\2\2\2\u055f\u0561\t\n\2\2\u0560\u055f")
        buf.write("\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\3\2\2\2\u0562")
        buf.write("\u0563\7 \2\2\u0563\u0566\7[\2\2\u0564\u0566\7\u00cd\2")
        buf.write("\2\u0565\u0560\3\2\2\2\u0565\u0564\3\2\2\2\u0566\u0099")
        buf.write("\3\2\2\2\u0567\u0568\7x\2\2\u0568\u0571\5\u00c6d\2\u0569")
        buf.write("\u056a\7\u00b4\2\2\u056a\u056b\7\u00d8\2\2\u056b\u056c")
        buf.write("\5\u00c6d\2\u056c\u056d\7\u00e2\2\2\u056d\u0571\3\2\2")
        buf.write("\2\u056e\u056f\7\u00b4\2\2\u056f\u0571\5\u00c6d\2\u0570")
        buf.write("\u0567\3\2\2\2\u0570\u0569\3\2\2\2\u0570\u056e\3\2\2\2")
        buf.write("\u0571\u009b\3\2\2\2\u0572\u0573\7\u0091\2\2\u0573\u0576")
        buf.write("\5\u00a6T\2\u0574\u0575\7w\2\2\u0575\u0577\5\u00a6T\2")
        buf.write("\u0576\u0574\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u009d\3")
        buf.write("\2\2\2\u0578\u057b\5\u00caf\2\u0579\u057a\t\17\2\2\u057a")
        buf.write("\u057c\5\u00caf\2\u057b\u0579\3\2\2\2\u057b\u057c\3\2")
        buf.write("\2\2\u057c\u009f\3\2\2\2\u057d\u0582\5\u00a2R\2\u057e")
        buf.write("\u057f\7\u00cd\2\2\u057f\u0581\5\u00a2R\2\u0580\u057e")
        buf.write("\3\2\2\2\u0581\u0584\3\2\2\2\u0582\u0580\3\2\2\2\u0582")
        buf.write("\u0583\3\2\2\2\u0583\u00a1\3\2\2\2\u0584\u0582\3\2\2\2")
        buf.write("\u0585\u0586\5\u00caf\2\u0586\u0587\5\u00a4S\2\u0587\u00a3")
        buf.write("\3\2\2\2\u0588\u058a\t\20\2\2\u0589\u0588\3\2\2\2\u0589")
        buf.write("\u058a\3\2\2\2\u058a\u058d\3\2\2\2\u058b\u058c\7v\2\2")
        buf.write("\u058c\u058e\t\21\2\2\u058d\u058b\3\2\2\2\u058d\u058e")
        buf.write("\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u0590\7\33\2\2\u0590")
        buf.write("\u0592\7\u00c7\2\2\u0591\u058f\3\2\2\2\u0591\u0592\3\2")
        buf.write("\2\2\u0592\u00a5\3\2\2\2\u0593\u0596\5\u00e4s\2\u0594")
        buf.write("\u0595\7\u00e4\2\2\u0595\u0597\5\u00e4s\2\u0596\u0594")
        buf.write("\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u00a7\3\2\2\2\u0598")
        buf.write("\u059d\5\u00aaV\2\u0599\u059a\7\u00cd\2\2\u059a\u059c")
        buf.write("\5\u00aaV\2\u059b\u0599\3\2\2\2\u059c\u059f\3\2\2\2\u059d")
        buf.write("\u059b\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u00a9\3\2\2\2")
        buf.write("\u059f\u059d\3\2\2\2\u05a0\u05a1\5\u00f0y\2\u05a1\u05a2")
        buf.write("\7\u00d2\2\2\u05a2\u05a3\5\u00e6t\2\u05a3\u00ab\3\2\2")
        buf.write("\2\u05a4\u05a6\5\u00aeX\2\u05a5\u05a4\3\2\2\2\u05a5\u05a6")
        buf.write("\3\2\2\2\u05a6\u05a8\3\2\2\2\u05a7\u05a9\5\u00b0Y\2\u05a8")
        buf.write("\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05ab\3\2\2\2")
        buf.write("\u05aa\u05ac\5\u00b2Z\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac")
        buf.write("\3\2\2\2\u05ac\u00ad\3\2\2\2\u05ad\u05ae\7\177\2\2\u05ae")
        buf.write("\u05af\7\24\2\2\u05af\u05b0\5\u00c6d\2\u05b0\u00af\3\2")
        buf.write("\2\2\u05b1\u05b2\7{\2\2\u05b2\u05b3\7\24\2\2\u05b3\u05b4")
        buf.write("\5\u00a0Q\2\u05b4\u00b1\3\2\2\2\u05b5\u05b6\t\22\2\2\u05b6")
        buf.write("\u05b7\5\u00b4[\2\u05b7\u00b3\3\2\2\2\u05b8\u05bf\5\u00b6")
        buf.write("\\\2\u05b9\u05ba\7\22\2\2\u05ba\u05bb\5\u00b6\\\2\u05bb")
        buf.write("\u05bc\7\b\2\2\u05bc\u05bd\5\u00b6\\\2\u05bd\u05bf\3\2")
        buf.write("\2\2\u05be\u05b8\3\2\2\2\u05be\u05b9\3\2\2\2\u05bf\u00b5")
        buf.write("\3\2\2\2\u05c0\u05c1\7\"\2\2\u05c1\u05cd\7\u008f\2\2\u05c2")
        buf.write("\u05c3\7\u00b0\2\2\u05c3\u05cd\7\u0081\2\2\u05c4\u05c5")
        buf.write("\7\u00b0\2\2\u05c5\u05cd\7A\2\2\u05c6\u05c7\5\u00e4s\2")
        buf.write("\u05c7\u05c8\7\u0081\2\2\u05c8\u05cd\3\2\2\2\u05c9\u05ca")
        buf.write("\5\u00e4s\2\u05ca\u05cb\7A\2\2\u05cb\u05cd\3\2\2\2\u05cc")
        buf.write("\u05c0\3\2\2\2\u05cc\u05c2\3\2\2\2\u05cc\u05c4\3\2\2\2")
        buf.write("\u05cc\u05c6\3\2\2\2\u05cc\u05c9\3\2\2\2\u05cd\u00b7\3")
        buf.write("\2\2\2\u05ce\u05cf\7\u0096\2\2\u05cf\u05d0\5\u00a8U\2")
        buf.write("\u05d0\u00b9\3\2\2\2\u05d1\u05d2\7\u0098\2\2\u05d2\u05d3")
        buf.write("\7\37\2\2\u05d3\u05d4\7#\2\2\u05d4\u05fc\5\u00e0q\2\u05d5")
        buf.write("\u05d6\7\u0098\2\2\u05d6\u05d7\7\37\2\2\u05d7\u05d8\7")
        buf.write("\60\2\2\u05d8\u05fc\5\u00dan\2\u05d9\u05da\7\u0098\2\2")
        buf.write("\u05da\u05dc\7\37\2\2\u05db\u05dd\7\u00a2\2\2\u05dc\u05db")
        buf.write("\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05df\3\2\2\2\u05de")
        buf.write("\u05e0\7\u00a0\2\2\u05df\u05de\3\2\2\2\u05df\u05e0\3\2")
        buf.write("\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05fc\5\u00dan\2\u05e2")
        buf.write("\u05e3\7\u0098\2\2\u05e3\u05fc\7$\2\2\u05e4\u05e5\7\u0098")
        buf.write("\2\2\u05e5\u05e8\7/\2\2\u05e6\u05e7\7E\2\2\u05e7\u05e9")
        buf.write("\5\u00e0q\2\u05e8\u05e6\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9")
        buf.write("\u05fc\3\2\2\2\u05ea\u05ec\7\u0098\2\2\u05eb\u05ed\7\u00a2")
        buf.write("\2\2\u05ec\u05eb\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee")
        buf.write("\3\2\2\2\u05ee\u05f1\7\u00a1\2\2\u05ef\u05f0\t\23\2\2")
        buf.write("\u05f0\u05f2\5\u00e0q\2\u05f1\u05ef\3\2\2\2\u05f1\u05f2")
        buf.write("\3\2\2\2\u05f2\u05f6\3\2\2\2\u05f3\u05f4\7c\2\2\u05f4")
        buf.write("\u05f7\7\u00c7\2\2\u05f5\u05f7\5|?\2\u05f6\u05f3\3\2\2")
        buf.write("\2\u05f6\u05f5\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f9")
        buf.write("\3\2\2\2\u05f8\u05fa\5\u008cG\2\u05f9\u05f8\3\2\2\2\u05f9")
        buf.write("\u05fa\3\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05d1\3\2\2\2")
        buf.write("\u05fb\u05d5\3\2\2\2\u05fb\u05d9\3\2\2\2\u05fb\u05e2\3")
        buf.write("\2\2\2\u05fb\u05e4\3\2\2\2\u05fb\u05ea\3\2\2\2\u05fc\u00bb")
        buf.write("\3\2\2\2\u05fd\u05fe\7\u009f\2\2\u05fe\u05ff\7@\2\2\u05ff")
        buf.write("\u0600\7\63\2\2\u0600\u0620\5\u00dan\2\u0601\u0602\7\u009f")
        buf.write("\2\2\u0602\u0603\7@\2\2\u0603\u0620\7g\2\2\u0604\u0605")
        buf.write("\7\u009f\2\2\u0605\u0606\7\u0087\2\2\u0606\u0620\7/\2")
        buf.write("\2\u0607\u0608\7\u009f\2\2\u0608\u0609\7\u0087\2\2\u0609")
        buf.write("\u060a\7\60\2\2\u060a\u0620\5\u00dan\2\u060b\u060c\7\u009f")
        buf.write("\2\2\u060c\u0614\t\24\2\2\u060d\u060e\7\63\2\2\u060e\u0615")
        buf.write("\7\u0095\2\2\u060f\u0615\7=\2\2\u0610\u0612\7\u00ae\2")
        buf.write("\2\u0611\u0610\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0613")
        buf.write("\3\2\2\2\u0613\u0615\7k\2\2\u0614\u060d\3\2\2\2\u0614")
        buf.write("\u060f\3\2\2\2\u0614\u0611\3\2\2\2\u0615\u0616\3\2\2\2")
        buf.write("\u0616\u0620\5\u00dan\2\u0617\u0618\7\u009f\2\2\u0618")
        buf.write("\u0619\t\24\2\2\u0619\u061a\7\u008c\2\2\u061a\u0620\7")
        buf.write("\u0095\2\2\u061b\u061c\7\u009f\2\2\u061c\u061d\7\u009d")
        buf.write("\2\2\u061d\u061e\7\u008b\2\2\u061e\u0620\5\u00dan\2\u061f")
        buf.write("\u05fd\3\2\2\2\u061f\u0601\3\2\2\2\u061f\u0604\3\2\2\2")
        buf.write("\u061f\u0607\3\2\2\2\u061f\u060b\3\2\2\2\u061f\u0617\3")
        buf.write("\2\2\2\u061f\u061b\3\2\2\2\u0620\u00bd\3\2\2\2\u0621\u0623")
        buf.write("\7\u00ad\2\2\u0622\u0624\7\u00a2\2\2\u0623\u0622\3\2\2")
        buf.write("\2\u0623\u0624\3\2\2\2\u0624\u0626\3\2\2\2\u0625\u0627")
        buf.write("\7\u00a0\2\2\u0626\u0625\3\2\2\2\u0626\u0627\3\2\2\2\u0627")
        buf.write("\u062a\3\2\2\2\u0628\u0629\7O\2\2\u0629\u062b\79\2\2\u062a")
        buf.write("\u0628\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\3\2\2\2")
        buf.write("\u062c\u062e\5\u00dan\2\u062d\u062f\5.\30\2\u062e\u062d")
        buf.write("\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u00bf\3\2\2\2\u0630")
        buf.write("\u0631\7\u00b3\2\2\u0631\u0632\5\u00e0q\2\u0632\u00c1")
        buf.write("\3\2\2\2\u0633\u0634\7\u00b9\2\2\u0634\u0636\5\u00dan")
        buf.write("\2\u0635\u0637\78\2\2\u0636\u0635\3\2\2\2\u0636\u0637")
        buf.write("\3\2\2\2\u0637\u063a\3\2\2\2\u0638\u0639\7d\2\2\u0639")
        buf.write("\u063b\7\u00c5\2\2\u063a\u0638\3\2\2\2\u063a\u063b\3\2")
        buf.write("\2\2\u063b\u00c3\3\2\2\2\u063c\u066c\5\u00f0y\2\u063d")
        buf.write("\u063e\5\u00f0y\2\u063e\u063f\7\u00d8\2\2\u063f\u0640")
        buf.write("\5\u00f0y\2\u0640\u0647\5\u00c4c\2\u0641\u0642\7\u00cd")
        buf.write("\2\2\u0642\u0643\5\u00f0y\2\u0643\u0644\5\u00c4c\2\u0644")
        buf.write("\u0646\3\2\2\2\u0645\u0641\3\2\2\2\u0646\u0649\3\2\2\2")
        buf.write("\u0647\u0645\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u064a\3")
        buf.write("\2\2\2\u0649\u0647\3\2\2\2\u064a\u064b\7\u00e2\2\2\u064b")
        buf.write("\u066c\3\2\2\2\u064c\u064d\5\u00f0y\2\u064d\u064e\7\u00d8")
        buf.write("\2\2\u064e\u0653\5\u00f4{\2\u064f\u0650\7\u00cd\2\2\u0650")
        buf.write("\u0652\5\u00f4{\2\u0651\u064f\3\2\2\2\u0652\u0655\3\2")
        buf.write("\2\2\u0653\u0651\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0656")
        buf.write("\3\2\2\2\u0655\u0653\3\2\2\2\u0656\u0657\7\u00e2\2\2\u0657")
        buf.write("\u066c\3\2\2\2\u0658\u0659\5\u00f0y\2\u0659\u065a\7\u00d8")
        buf.write("\2\2\u065a\u065f\5\u00c4c\2\u065b\u065c\7\u00cd\2\2\u065c")
        buf.write("\u065e\5\u00c4c\2\u065d\u065b\3\2\2\2\u065e\u0661\3\2")
        buf.write("\2\2\u065f\u065d\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0662")
        buf.write("\3\2\2\2\u0661\u065f\3\2\2\2\u0662\u0663\7\u00e2\2\2\u0663")
        buf.write("\u066c\3\2\2\2\u0664\u0665\5\u00f0y\2\u0665\u0667\7\u00d8")
        buf.write("\2\2\u0666\u0668\5\u00c6d\2\u0667\u0666\3\2\2\2\u0667")
        buf.write("\u0668\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066a\7\u00e2")
        buf.write("\2\2\u066a\u066c\3\2\2\2\u066b\u063c\3\2\2\2\u066b\u063d")
        buf.write("\3\2\2\2\u066b\u064c\3\2\2\2\u066b\u0658\3\2\2\2\u066b")
        buf.write("\u0664\3\2\2\2\u066c\u00c5\3\2\2\2\u066d\u0672\5\u00c8")
        buf.write("e\2\u066e\u066f\7\u00cd\2\2\u066f\u0671\5\u00c8e\2\u0670")
        buf.write("\u066e\3\2\2\2\u0671\u0674\3\2\2\2\u0672\u0670\3\2\2\2")
        buf.write("\u0672\u0673\3\2\2\2\u0673\u00c7\3\2\2\2\u0674\u0672\3")
        buf.write("\2\2\2\u0675\u0676\5\u00dan\2\u0676\u0677\7\u00d0\2\2")
        buf.write("\u0677\u0679\3\2\2\2\u0678\u0675\3\2\2\2\u0678\u0679\3")
        buf.write("\2\2\2\u0679\u067a\3\2\2\2\u067a\u0681\7\u00c9\2\2\u067b")
        buf.write("\u067c\7\u00d8\2\2\u067c\u067d\5j\66\2\u067d\u067e\7\u00e2")
        buf.write("\2\2\u067e\u0681\3\2\2\2\u067f\u0681\5\u00caf\2\u0680")
        buf.write("\u0678\3\2\2\2\u0680\u067b\3\2\2\2\u0680\u067f\3\2\2\2")
        buf.write("\u0681\u00c9\3\2\2\2\u0682\u0683\bf\1\2\u0683\u0685\7")
        buf.write("\25\2\2\u0684\u0686\5\u00caf\2\u0685\u0684\3\2\2\2\u0685")
        buf.write("\u0686\3\2\2\2\u0686\u068c\3\2\2\2\u0687\u0688\7\u00bb")
        buf.write("\2\2\u0688\u0689\5\u00caf\2\u0689\u068a\7\u00a4\2\2\u068a")
        buf.write("\u068b\5\u00caf\2\u068b\u068d\3\2\2\2\u068c\u0687\3\2")
        buf.write("\2\2\u068d\u068e\3\2\2\2\u068e\u068c\3\2\2\2\u068e\u068f")
        buf.write("\3\2\2\2\u068f\u0692\3\2\2\2\u0690\u0691\7\65\2\2\u0691")
        buf.write("\u0693\5\u00caf\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2")
        buf.write("\2\2\u0693\u0694\3\2\2\2\u0694\u0695\7\66\2\2\u0695\u0704")
        buf.write("\3\2\2\2\u0696\u0697\7\26\2\2\u0697\u0698\7\u00d8\2\2")
        buf.write("\u0698\u0699\5\u00caf\2\u0699\u069a\7\f\2\2\u069a\u069b")
        buf.write("\5\u00c4c\2\u069b\u069c\7\u00e2\2\2\u069c\u0704\3\2\2")
        buf.write("\2\u069d\u069e\7%\2\2\u069e\u0704\7\u00c7\2\2\u069f\u06a0")
        buf.write("\7<\2\2\u06a0\u06a1\7\u00d8\2\2\u06a1\u06a2\5\u00e8u\2")
        buf.write("\u06a2\u06a3\7E\2\2\u06a3\u06a4\5\u00caf\2\u06a4\u06a5")
        buf.write("\7\u00e2\2\2\u06a5\u0704\3\2\2\2\u06a6\u06a7\7W\2\2\u06a7")
        buf.write("\u06a8\5\u00caf\2\u06a8\u06a9\5\u00e8u\2\u06a9\u0704\3")
        buf.write("\2\2\2\u06aa\u06ab\7\u009c\2\2\u06ab\u06ac\7\u00d8\2\2")
        buf.write("\u06ac\u06ad\5\u00caf\2\u06ad\u06ae\7E\2\2\u06ae\u06b1")
        buf.write("\5\u00caf\2\u06af\u06b0\7B\2\2\u06b0\u06b2\5\u00caf\2")
        buf.write("\u06b1\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\3")
        buf.write("\2\2\2\u06b3\u06b4\7\u00e2\2\2\u06b4\u0704\3\2\2\2\u06b5")
        buf.write("\u06b6\7\u00a7\2\2\u06b6\u0704\7\u00c7\2\2\u06b7\u06b8")
        buf.write("\7\u00ac\2\2\u06b8\u06b9\7\u00d8\2\2\u06b9\u06ba\t\25")
        buf.write("\2\2\u06ba\u06bb\7\u00c7\2\2\u06bb\u06bc\7E\2\2\u06bc")
        buf.write("\u06bd\5\u00caf\2\u06bd\u06be\7\u00e2\2\2\u06be\u0704")
        buf.write("\3\2\2\2\u06bf\u06c0\5\u00f0y\2\u06c0\u06c2\7\u00d8\2")
        buf.write("\2\u06c1\u06c3\5\u00c6d\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3")
        buf.write("\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c5\7\u00e2\2\2\u06c5")
        buf.write("\u06c6\3\2\2\2\u06c6\u06c7\7~\2\2\u06c7\u06c8\7\u00d8")
        buf.write("\2\2\u06c8\u06c9\5\u00acW\2\u06c9\u06ca\7\u00e2\2\2\u06ca")
        buf.write("\u0704\3\2\2\2\u06cb\u06cc\5\u00f0y\2\u06cc\u06ce\7\u00d8")
        buf.write("\2\2\u06cd\u06cf\5\u00c6d\2\u06ce\u06cd\3\2\2\2\u06ce")
        buf.write("\u06cf\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d1\7\u00e2")
        buf.write("\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\7~\2\2\u06d3\u06d4")
        buf.write("\5\u00f0y\2\u06d4\u0704\3\2\2\2\u06d5\u06db\5\u00f0y\2")
        buf.write("\u06d6\u06d8\7\u00d8\2\2\u06d7\u06d9\5\u00c6d\2\u06d8")
        buf.write("\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06da\3\2\2\2")
        buf.write("\u06da\u06dc\7\u00e2\2\2\u06db\u06d6\3\2\2\2\u06db\u06dc")
        buf.write("\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06df\7\u00d8\2\2\u06de")
        buf.write("\u06e0\7\62\2\2\u06df\u06de\3\2\2\2\u06df\u06e0\3\2\2")
        buf.write("\2\u06e0\u06e2\3\2\2\2\u06e1\u06e3\5\u00ccg\2\u06e2\u06e1")
        buf.write("\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4")
        buf.write("\u06e5\7\u00e2\2\2\u06e5\u0704\3\2\2\2\u06e6\u0704\5\u00e6")
        buf.write("t\2\u06e7\u06e8\7\u00cf\2\2\u06e8\u0704\5\u00caf\23\u06e9")
        buf.write("\u06ea\7t\2\2\u06ea\u0704\5\u00caf\16\u06eb\u06ec\5\u00da")
        buf.write("n\2\u06ec\u06ed\7\u00d0\2\2\u06ed\u06ef\3\2\2\2\u06ee")
        buf.write("\u06eb\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f0\3\2\2\2")
        buf.write("\u06f0\u0704\7\u00c9\2\2\u06f1\u06f2\7\u00d8\2\2\u06f2")
        buf.write("\u06f3\5j\66\2\u06f3\u06f4\7\u00e2\2\2\u06f4\u0704\3\2")
        buf.write("\2\2\u06f5\u06f6\7\u00d8\2\2\u06f6\u06f7\5\u00caf\2\u06f7")
        buf.write("\u06f8\7\u00e2\2\2\u06f8\u0704\3\2\2\2\u06f9\u06fa\7\u00d8")
        buf.write("\2\2\u06fa\u06fb\5\u00c6d\2\u06fb\u06fc\7\u00e2\2\2\u06fc")
        buf.write("\u0704\3\2\2\2\u06fd\u06ff\7\u00d6\2\2\u06fe\u0700\5\u00c6")
        buf.write("d\2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701")
        buf.write("\3\2\2\2\u0701\u0704\7\u00e1\2\2\u0702\u0704\5\u00d2j")
        buf.write("\2\u0703\u0682\3\2\2\2\u0703\u0696\3\2\2\2\u0703\u069d")
        buf.write("\3\2\2\2\u0703\u069f\3\2\2\2\u0703\u06a6\3\2\2\2\u0703")
        buf.write("\u06aa\3\2\2\2\u0703\u06b5\3\2\2\2\u0703\u06b7\3\2\2\2")
        buf.write("\u0703\u06bf\3\2\2\2\u0703\u06cb\3\2\2\2\u0703\u06d5\3")
        buf.write("\2\2\2\u0703\u06e6\3\2\2\2\u0703\u06e7\3\2\2\2\u0703\u06e9")
        buf.write("\3\2\2\2\u0703\u06ee\3\2\2\2\u0703\u06f1\3\2\2\2\u0703")
        buf.write("\u06f5\3\2\2\2\u0703\u06f9\3\2\2\2\u0703\u06fd\3\2\2\2")
        buf.write("\u0703\u0702\3\2\2\2\u0704\u074c\3\2\2\2\u0705\u0706\f")
        buf.write("\22\2\2\u0706\u0707\t\26\2\2\u0707\u074b\5\u00caf\23\u0708")
        buf.write("\u0709\f\21\2\2\u0709\u070a\t\27\2\2\u070a\u074b\5\u00ca")
        buf.write("f\22\u070b\u071e\f\20\2\2\u070c\u071f\7\u00d1\2\2\u070d")
        buf.write("\u071f\7\u00d2\2\2\u070e\u071f\7\u00da\2\2\u070f\u071f")
        buf.write("\7\u00d7\2\2\u0710\u071f\7\u00d3\2\2\u0711\u071f\7\u00d9")
        buf.write("\2\2\u0712\u071f\7\u00d4\2\2\u0713\u0715\7H\2\2\u0714")
        buf.write("\u0713\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0717\3\2\2\2")
        buf.write("\u0716\u0718\7t\2\2\u0717\u0716\3\2\2\2\u0717\u0718\3")
        buf.write("\2\2\2\u0718\u0719\3\2\2\2\u0719\u071f\7Q\2\2\u071a\u071c")
        buf.write("\7t\2\2\u071b\u071a\3\2\2\2\u071b\u071c\3\2\2\2\u071c")
        buf.write("\u071d\3\2\2\2\u071d\u071f\t\30\2\2\u071e\u070c\3\2\2")
        buf.write("\2\u071e\u070d\3\2\2\2\u071e\u070e\3\2\2\2\u071e\u070f")
        buf.write("\3\2\2\2\u071e\u0710\3\2\2\2\u071e\u0711\3\2\2\2\u071e")
        buf.write("\u0712\3\2\2\2\u071e\u0714\3\2\2\2\u071e\u071b\3\2\2\2")
        buf.write("\u071f\u0720\3\2\2\2\u0720\u074b\5\u00caf\21\u0721\u0722")
        buf.write("\f\r\2\2\u0722\u0723\7\b\2\2\u0723\u074b\5\u00caf\16\u0724")
        buf.write("\u0725\f\f\2\2\u0725\u0726\7z\2\2\u0726\u074b\5\u00ca")
        buf.write("f\r\u0727\u0729\f\13\2\2\u0728\u072a\7t\2\2\u0729\u0728")
        buf.write("\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072b\3\2\2\2\u072b")
        buf.write("\u072c\7\22\2\2\u072c\u072d\5\u00caf\2\u072d\u072e\7\b")
        buf.write("\2\2\u072e\u072f\5\u00caf\f\u072f\u074b\3\2\2\2\u0730")
        buf.write("\u0731\f\n\2\2\u0731\u0732\7\u00dd\2\2\u0732\u0733\5\u00ca")
        buf.write("f\2\u0733\u0734\7\u00cc\2\2\u0734\u0735\5\u00caf\n\u0735")
        buf.write("\u074b\3\2\2\2\u0736\u0737\f\25\2\2\u0737\u0738\7\u00d6")
        buf.write("\2\2\u0738\u0739\5\u00caf\2\u0739\u073a\7\u00e1\2\2\u073a")
        buf.write("\u074b\3\2\2\2\u073b\u073c\f\24\2\2\u073c\u073d\7\u00d0")
        buf.write("\2\2\u073d\u074b\7\u00c5\2\2\u073e\u073f\f\17\2\2\u073f")
        buf.write("\u0741\7Y\2\2\u0740\u0742\7t\2\2\u0741\u0740\3\2\2\2\u0741")
        buf.write("\u0742\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u074b\7u\2\2")
        buf.write("\u0744\u0748\f\t\2\2\u0745\u0749\5\u00eex\2\u0746\u0747")
        buf.write("\7\f\2\2\u0747\u0749\5\u00f0y\2\u0748\u0745\3\2\2\2\u0748")
        buf.write("\u0746\3\2\2\2\u0749\u074b\3\2\2\2\u074a\u0705\3\2\2\2")
        buf.write("\u074a\u0708\3\2\2\2\u074a\u070b\3\2\2\2\u074a\u0721\3")
        buf.write("\2\2\2\u074a\u0724\3\2\2\2\u074a\u0727\3\2\2\2\u074a\u0730")
        buf.write("\3\2\2\2\u074a\u0736\3\2\2\2\u074a\u073b\3\2\2\2\u074a")
        buf.write("\u073e\3\2\2\2\u074a\u0744\3\2\2\2\u074b\u074e\3\2\2\2")
        buf.write("\u074c\u074a\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u00cb\3")
        buf.write("\2\2\2\u074e\u074c\3\2\2\2\u074f\u0754\5\u00ceh\2\u0750")
        buf.write("\u0751\7\u00cd\2\2\u0751\u0753\5\u00ceh\2\u0752\u0750")
        buf.write("\3\2\2\2\u0753\u0756\3\2\2\2\u0754\u0752\3\2\2\2\u0754")
        buf.write("\u0755\3\2\2\2\u0755\u00cd\3\2\2\2\u0756\u0754\3\2\2\2")
        buf.write("\u0757\u075a\5\u00d0i\2\u0758\u075a\5\u00caf\2\u0759\u0757")
        buf.write("\3\2\2\2\u0759\u0758\3\2\2\2\u075a\u00cf\3\2\2\2\u075b")
        buf.write("\u075c\7\u00d8\2\2\u075c\u0761\5\u00f0y\2\u075d\u075e")
        buf.write("\7\u00cd\2\2\u075e\u0760\5\u00f0y\2\u075f\u075d\3\2\2")
        buf.write("\2\u0760\u0763\3\2\2\2\u0761\u075f\3\2\2\2\u0761\u0762")
        buf.write("\3\2\2\2\u0762\u0764\3\2\2\2\u0763\u0761\3\2\2\2\u0764")
        buf.write("\u0765\7\u00e2\2\2\u0765\u076f\3\2\2\2\u0766\u076b\5\u00f0")
        buf.write("y\2\u0767\u0768\7\u00cd\2\2\u0768\u076a\5\u00f0y\2\u0769")
        buf.write("\u0767\3\2\2\2\u076a\u076d\3\2\2\2\u076b\u0769\3\2\2\2")
        buf.write("\u076b\u076c\3\2\2\2\u076c\u076f\3\2\2\2\u076d\u076b\3")
        buf.write("\2\2\2\u076e\u075b\3\2\2\2\u076e\u0766\3\2\2\2\u076f\u0770")
        buf.write("\3\2\2\2\u0770\u0771\7\u00c8\2\2\u0771\u0772\5\u00caf")
        buf.write("\2\u0772\u00d1\3\2\2\2\u0773\u0774\5\u00dan\2\u0774\u0775")
        buf.write("\7\u00d0\2\2\u0775\u0777\3\2\2\2\u0776\u0773\3\2\2\2\u0776")
        buf.write("\u0777\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u0779\5\u00d4")
        buf.write("k\2\u0779\u00d3\3\2\2\2\u077a\u077d\5\u00f0y\2\u077b\u077c")
        buf.write("\7\u00d0\2\2\u077c\u077e\5\u00f0y\2\u077d\u077b\3\2\2")
        buf.write("\2\u077d\u077e\3\2\2\2\u077e\u00d5\3\2\2\2\u077f\u0780")
        buf.write("\bl\1\2\u0780\u0787\5\u00dan\2\u0781\u0787\5\u00d8m\2")
        buf.write("\u0782\u0783\7\u00d8\2\2\u0783\u0784\5j\66\2\u0784\u0785")
        buf.write("\7\u00e2\2\2\u0785\u0787\3\2\2\2\u0786\u077f\3\2\2\2\u0786")
        buf.write("\u0781\3\2\2\2\u0786\u0782\3\2\2\2\u0787\u0790\3\2\2\2")
        buf.write("\u0788\u078c\f\3\2\2\u0789\u078d\5\u00eex\2\u078a\u078b")
        buf.write("\7\f\2\2\u078b\u078d\5\u00f0y\2\u078c\u0789\3\2\2\2\u078c")
        buf.write("\u078a\3\2\2\2\u078d\u078f\3\2\2\2\u078e\u0788\3\2\2\2")
        buf.write("\u078f\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0790\u0791\3")
        buf.write("\2\2\2\u0791\u00d7\3\2\2\2\u0792\u0790\3\2\2\2\u0793\u0794")
        buf.write("\5\u00f0y\2\u0794\u0796\7\u00d8\2\2\u0795\u0797\5\u00dc")
        buf.write("o\2\u0796\u0795\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798")
        buf.write("\3\2\2\2\u0798\u0799\7\u00e2\2\2\u0799\u00d9\3\2\2\2\u079a")
        buf.write("\u079b\5\u00e0q\2\u079b\u079c\7\u00d0\2\2\u079c\u079e")
        buf.write("\3\2\2\2\u079d\u079a\3\2\2\2\u079d\u079e\3\2\2\2\u079e")
        buf.write("\u079f\3\2\2\2\u079f\u07a0\5\u00f0y\2\u07a0\u00db\3\2")
        buf.write("\2\2\u07a1\u07a6\5\u00dep\2\u07a2\u07a3\7\u00cd\2\2\u07a3")
        buf.write("\u07a5\5\u00dep\2\u07a4\u07a2\3\2\2\2\u07a5\u07a8\3\2")
        buf.write("\2\2\u07a6\u07a4\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u00dd")
        buf.write("\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a9\u07ad\5\u00d4k\2\u07aa")
        buf.write("\u07ad\5\u00d8m\2\u07ab\u07ad\5\u00e6t\2\u07ac\u07a9\3")
        buf.write("\2\2\2\u07ac\u07aa\3\2\2\2\u07ac\u07ab\3\2\2\2\u07ad\u00df")
        buf.write("\3\2\2\2\u07ae\u07af\5\u00f0y\2\u07af\u00e1\3\2\2\2\u07b0")
        buf.write("\u07b9\7\u00c3\2\2\u07b1\u07b2\7\u00d0\2\2\u07b2\u07b9")
        buf.write("\t\31\2\2\u07b3\u07b4\7\u00c5\2\2\u07b4\u07b6\7\u00d0")
        buf.write("\2\2\u07b5\u07b7\t\31\2\2\u07b6\u07b5\3\2\2\2\u07b6\u07b7")
        buf.write("\3\2\2\2\u07b7\u07b9\3\2\2\2\u07b8\u07b0\3\2\2\2\u07b8")
        buf.write("\u07b1\3\2\2\2\u07b8\u07b3\3\2\2\2\u07b9\u00e3\3\2\2\2")
        buf.write("\u07ba\u07bc\t\32\2\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc")
        buf.write("\3\2\2\2\u07bc\u07c3\3\2\2\2\u07bd\u07c4\5\u00e2r\2\u07be")
        buf.write("\u07c4\7\u00c4\2\2\u07bf\u07c4\7\u00c5\2\2\u07c0\u07c4")
        buf.write("\7\u00c6\2\2\u07c1\u07c4\7S\2\2\u07c2\u07c4\7r\2\2\u07c3")
        buf.write("\u07bd\3\2\2\2\u07c3\u07be\3\2\2\2\u07c3\u07bf\3\2\2\2")
        buf.write("\u07c3\u07c0\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c2\3")
        buf.write("\2\2\2\u07c4\u00e5\3\2\2\2\u07c5\u07c9\5\u00e4s\2\u07c6")
        buf.write("\u07c9\7\u00c7\2\2\u07c7\u07c9\7u\2\2\u07c8\u07c5\3\2")
        buf.write("\2\2\u07c8\u07c6\3\2\2\2\u07c8\u07c7\3\2\2\2\u07c9\u00e7")
        buf.write("\3\2\2\2\u07ca\u07cb\t\33\2\2\u07cb\u00e9\3\2\2\2\u07cc")
        buf.write("\u07cd\t\34\2\2\u07cd\u00eb\3\2\2\2\u07ce\u07cf\t\35\2")
        buf.write("\2\u07cf\u00ed\3\2\2\2\u07d0\u07d3\7\u00c2\2\2\u07d1\u07d3")
        buf.write("\5\u00ecw\2\u07d2\u07d0\3\2\2\2\u07d2\u07d1\3\2\2\2\u07d3")
        buf.write("\u00ef\3\2\2\2\u07d4\u07d8\7\u00c2\2\2\u07d5\u07d8\5\u00e8")
        buf.write("u\2\u07d6\u07d8\5\u00eav\2\u07d7\u07d4\3\2\2\2\u07d7\u07d5")
        buf.write("\3\2\2\2\u07d7\u07d6\3\2\2\2\u07d8\u00f1\3\2\2\2\u07d9")
        buf.write("\u07dc\5\u00f0y\2\u07da\u07dc\7u\2\2\u07db\u07d9\3\2\2")
        buf.write("\2\u07db\u07da\3\2\2\2\u07dc\u00f3\3\2\2\2\u07dd\u07de")
        buf.write("\7\u00c7\2\2\u07de\u07df\7\u00d2\2\2\u07df\u07e0\5\u00e4")
        buf.write("s\2\u07e0\u00f5\3\2\2\2\u0111\u00fb\u00ff\u0105\u0109")
        buf.write("\u010c\u0120\u0126\u012d\u0135\u013a\u0141\u0146\u014d")
        buf.write("\u0152\u0158\u015e\u0163\u0169\u016e\u0174\u0179\u017f")
        buf.write("\u018d\u0194\u019b\u01a2\u01a8\u01ad\u01b3\u01b8\u01be")
        buf.write("\u01c7\u01d1\u01db\u01ef\u01f7\u0206\u020d\u021b\u0221")
        buf.write("\u0227\u022e\u0232\u0235\u023b\u023e\u0244\u0248\u024b")
        buf.write("\u0256\u025a\u025d\u0262\u0264\u0267\u026a\u0274\u0278")
        buf.write("\u027b\u027e\u0283\u0285\u028d\u0290\u0293\u0299\u029d")
        buf.write("\u02a0\u02a3\u02a6\u02a9\u02ae\u02b4\u02b8\u02bb\u02be")
        buf.write("\u02c2\u02ca\u02d8\u02da\u02de\u02e5\u02e7\u02f2\u02f5")
        buf.write("\u02fe\u030f\u031a\u032c\u0339\u034a\u0353\u035c\u035e")
        buf.write("\u0373\u0378\u037d\u0380\u038c\u0391\u0395\u0398\u039c")
        buf.write("\u03a0\u03a5\u03a8\u03ac\u03ae\u03c4\u03cc\u03cf\u03d9")
        buf.write("\u03dd\u03e5\u03e9\u03ee\u03f2\u03f6\u03fa\u03fe\u0400")
        buf.write("\u0408\u040c\u040f\u0417\u041c\u0421\u0424\u042e\u0437")
        buf.write("\u043c\u0440\u0446\u0449\u044c\u044f\u045d\u0461\u0465")
        buf.write("\u046a\u046d\u0477\u047f\u0482\u0486\u0489\u048d\u0490")
        buf.write("\u0493\u0496\u0499\u049c\u049f\u04a2\u04a5\u04a8\u04ab")
        buf.write("\u04b4\u04ba\u04d5\u04d8\u04db\u04f7\u0501\u050e\u0513")
        buf.write("\u0516\u051c\u0524\u0527\u052d\u052f\u0533\u0538\u053b")
        buf.write("\u053e\u0542\u0546\u0549\u054b\u054e\u0552\u0556\u0559")
        buf.write("\u055b\u055d\u0560\u0565\u0570\u0576\u057b\u0582\u0589")
        buf.write("\u058d\u0591\u0596\u059d\u05a5\u05a8\u05ab\u05be\u05cc")
        buf.write("\u05dc\u05df\u05e8\u05ec\u05f1\u05f6\u05f9\u05fb\u0611")
        buf.write("\u0614\u061f\u0623\u0626\u062a\u062e\u0636\u063a\u0647")
        buf.write("\u0653\u065f\u0667\u066b\u0672\u0678\u0680\u0685\u068e")
        buf.write("\u0692\u06b1\u06c2\u06ce\u06d8\u06db\u06df\u06e2\u06ee")
        buf.write("\u06ff\u0703\u0714\u0717\u071b\u071e\u0729\u0741\u0748")
        buf.write("\u074a\u074c\u0754\u0759\u0761\u076b\u076e\u0776\u077d")
        buf.write("\u0786\u078c\u0790\u0796\u079d\u07a6\u07ac\u07b6\u07b8")
        buf.write("\u07bb\u07c3\u07c8\u07d2\u07d7\u07db")
        return buf.getvalue()


class ClickHouseParser ( Parser ):

    grammarFileName = "ClickHouseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'false'", "'true'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'->'", "'*'", "'`'", "'\\'", "':'", "','", 
                     "'||'", "'-'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'{'", "'['", "'<='", "'('", "'<'", "<INVALID>", "'%'", 
                     "'+'", "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", 
                     "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", 
                      "CREATE", "CROSS", "CUBE", "CURRENT", "DATABASE", 
                      "DATABASES", "DATE", "DAY", "DEDUPLICATE", "DEFAULT", 
                      "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
                      "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "EVENTS", 
                      "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", 
                      "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", 
                      "FREEZE", "FROM", "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", 
                      "GROUP", "HAVING", "HIERARCHICAL", "HOUR", "ID", "IF", 
                      "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER", 
                      "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
                      "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", 
                      "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", "LOCAL", 
                      "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", 
                      "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
                      "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", 
                      "ON", "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", 
                      "OVER", "PARTITION", "POPULATE", "PRECEDING", "PREWHERE", 
                      "PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", 
                      "REMOVE", "RENAME", "REPLACE", "REPLICA", "REPLICATED", 
                      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", 
                      "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
                      "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", 
                      "SYSTEM", "TABLE", "TABLES", "TEMPORARY", "TEST", 
                      "THEN", "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP", 
                      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE", 
                      "UNBOUNDED", "UNION", "UPDATE", "USE", "USING", "UUID", 
                      "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
                      "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", 
                      "COMMA", "CONCAT", "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", 
                      "GE", "GT", "LBRACE", "LBRACKET", "LE", "LPAREN", 
                      "LT", "NOT_EQ", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                      "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE" ]

    RULE_multiQueryStmt = 0
    RULE_queryStmt = 1
    RULE_query = 2
    RULE_alterStmt = 3
    RULE_alterTableClause = 4
    RULE_assignmentExprList = 5
    RULE_assignmentExpr = 6
    RULE_tableColumnPropertyType = 7
    RULE_partitionClause = 8
    RULE_attachStmt = 9
    RULE_checkStmt = 10
    RULE_createStmt = 11
    RULE_dictionarySchemaClause = 12
    RULE_dictionaryAttrDfnt = 13
    RULE_dictionaryEngineClause = 14
    RULE_dictionaryPrimaryKeyClause = 15
    RULE_dictionaryArgExpr = 16
    RULE_sourceClause = 17
    RULE_lifetimeClause = 18
    RULE_layoutClause = 19
    RULE_rangeClause = 20
    RULE_dictionarySettingsClause = 21
    RULE_clusterClause = 22
    RULE_uuidClause = 23
    RULE_destinationClause = 24
    RULE_subqueryClause = 25
    RULE_tableSchemaClause = 26
    RULE_engineClause = 27
    RULE_partitionByClause = 28
    RULE_primaryKeyClause = 29
    RULE_sampleByClause = 30
    RULE_ttlClause = 31
    RULE_engineExpr = 32
    RULE_tableElementExpr = 33
    RULE_tableColumnDfnt = 34
    RULE_tableColumnPropertyExpr = 35
    RULE_tableIndexDfnt = 36
    RULE_tableProjectionDfnt = 37
    RULE_codecExpr = 38
    RULE_codecArgExpr = 39
    RULE_ttlExpr = 40
    RULE_describeStmt = 41
    RULE_dropStmt = 42
    RULE_existsStmt = 43
    RULE_explainStmt = 44
    RULE_insertStmt = 45
    RULE_columnsClause = 46
    RULE_dataClause = 47
    RULE_killStmt = 48
    RULE_optimizeStmt = 49
    RULE_renameStmt = 50
    RULE_projectionSelectStmt = 51
    RULE_selectUnionStmt = 52
    RULE_selectStmtWithParens = 53
    RULE_selectStmt = 54
    RULE_withClause = 55
    RULE_topClause = 56
    RULE_fromClause = 57
    RULE_arrayJoinClause = 58
    RULE_windowClause = 59
    RULE_prewhereClause = 60
    RULE_whereClause = 61
    RULE_groupByClause = 62
    RULE_groupByRollupClause = 63
    RULE_groupByTotalsClause = 64
    RULE_havingClause = 65
    RULE_orderByClause = 66
    RULE_projectionOrderByClause = 67
    RULE_limitByClause = 68
    RULE_limitClause = 69
    RULE_settingsClause = 70
    RULE_withExprList = 71
    RULE_withExpr = 72
    RULE_joinExpr = 73
    RULE_joinOp = 74
    RULE_joinOpCross = 75
    RULE_joinConstraintClause = 76
    RULE_sampleClause = 77
    RULE_limitExpr = 78
    RULE_orderExprList = 79
    RULE_orderExpr = 80
    RULE_orderExprDecoration = 81
    RULE_ratioExpr = 82
    RULE_settingExprList = 83
    RULE_settingExpr = 84
    RULE_windowExpr = 85
    RULE_winPartitionByClause = 86
    RULE_winOrderByClause = 87
    RULE_winFrameClause = 88
    RULE_winFrameExtend = 89
    RULE_winFrameBound = 90
    RULE_setStmt = 91
    RULE_showStmt = 92
    RULE_systemStmt = 93
    RULE_truncateStmt = 94
    RULE_useStmt = 95
    RULE_watchStmt = 96
    RULE_columnTypeExpr = 97
    RULE_columnExprList = 98
    RULE_columnsExpr = 99
    RULE_columnExpr = 100
    RULE_columnArgList = 101
    RULE_columnArgExpr = 102
    RULE_columnLambdaExpr = 103
    RULE_columnIdentifier = 104
    RULE_nestedIdentifier = 105
    RULE_tableExpr = 106
    RULE_tableFunctionExpr = 107
    RULE_tableIdentifier = 108
    RULE_tableArgList = 109
    RULE_tableArgExpr = 110
    RULE_databaseIdentifier = 111
    RULE_floatingLiteral = 112
    RULE_numberLiteral = 113
    RULE_literal = 114
    RULE_interval = 115
    RULE_keyword = 116
    RULE_keywordForAlias = 117
    RULE_alias = 118
    RULE_identifier = 119
    RULE_identifierOrNull = 120
    RULE_enumValue = 121

    ruleNames =  [ "multiQueryStmt", "queryStmt", "query", "alterStmt", 
                   "alterTableClause", "assignmentExprList", "assignmentExpr", 
                   "tableColumnPropertyType", "partitionClause", "attachStmt", 
                   "checkStmt", "createStmt", "dictionarySchemaClause", 
                   "dictionaryAttrDfnt", "dictionaryEngineClause", "dictionaryPrimaryKeyClause", 
                   "dictionaryArgExpr", "sourceClause", "lifetimeClause", 
                   "layoutClause", "rangeClause", "dictionarySettingsClause", 
                   "clusterClause", "uuidClause", "destinationClause", "subqueryClause", 
                   "tableSchemaClause", "engineClause", "partitionByClause", 
                   "primaryKeyClause", "sampleByClause", "ttlClause", "engineExpr", 
                   "tableElementExpr", "tableColumnDfnt", "tableColumnPropertyExpr", 
                   "tableIndexDfnt", "tableProjectionDfnt", "codecExpr", 
                   "codecArgExpr", "ttlExpr", "describeStmt", "dropStmt", 
                   "existsStmt", "explainStmt", "insertStmt", "columnsClause", 
                   "dataClause", "killStmt", "optimizeStmt", "renameStmt", 
                   "projectionSelectStmt", "selectUnionStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "groupByRollupClause", 
                   "groupByTotalsClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitByClause", "limitClause", 
                   "settingsClause", "withExprList", "withExpr", "joinExpr", 
                   "joinOp", "joinOpCross", "joinConstraintClause", "sampleClause", 
                   "limitExpr", "orderExprList", "orderExpr", "orderExprDecoration", 
                   "ratioExpr", "settingExprList", "settingExpr", "windowExpr", 
                   "winPartitionByClause", "winOrderByClause", "winFrameClause", 
                   "winFrameExtend", "winFrameBound", "setStmt", "showStmt", 
                   "systemStmt", "truncateStmt", "useStmt", "watchStmt", 
                   "columnTypeExpr", "columnExprList", "columnsExpr", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "tableArgExpr", "databaseIdentifier", "floatingLiteral", 
                   "numberLiteral", "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "identifierOrNull", "enumValue" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COLLATE=25
    COLUMN=26
    COMMENT=27
    CONSTRAINT=28
    CREATE=29
    CROSS=30
    CUBE=31
    CURRENT=32
    DATABASE=33
    DATABASES=34
    DATE=35
    DAY=36
    DEDUPLICATE=37
    DEFAULT=38
    DELAY=39
    DELETE=40
    DESC=41
    DESCENDING=42
    DESCRIBE=43
    DETACH=44
    DICTIONARIES=45
    DICTIONARY=46
    DISK=47
    DISTINCT=48
    DISTRIBUTED=49
    DROP=50
    ELSE=51
    END=52
    ENGINE=53
    EVENTS=54
    EXISTS=55
    EXPLAIN=56
    EXPRESSION=57
    EXTRACT=58
    FETCHES=59
    FINAL=60
    FIRST=61
    FLUSH=62
    FOLLOWING=63
    FOR=64
    FORMAT=65
    FREEZE=66
    FROM=67
    FULL=68
    FUNCTION=69
    GLOBAL=70
    GRANULARITY=71
    GROUP=72
    HAVING=73
    HIERARCHICAL=74
    HOUR=75
    ID=76
    IF=77
    ILIKE=78
    IN=79
    INDEX=80
    INF=81
    INJECTIVE=82
    INNER=83
    INSERT=84
    INTERVAL=85
    INTO=86
    IS=87
    IS_OBJECT_ID=88
    JOIN=89
    KEY=90
    KILL=91
    LAST=92
    LAYOUT=93
    LEADING=94
    LEFT=95
    LIFETIME=96
    LIKE=97
    LIMIT=98
    LIVE=99
    LOCAL=100
    LOGS=101
    MATERIALIZE=102
    MATERIALIZED=103
    MAX=104
    MERGES=105
    MIN=106
    MINUTE=107
    MODIFY=108
    MONTH=109
    MOVE=110
    MUTATION=111
    NAN_SQL=112
    NO=113
    NOT=114
    NULL_SQL=115
    NULLS=116
    OFFSET=117
    ON=118
    OPTIMIZE=119
    OR=120
    ORDER=121
    OUTER=122
    OUTFILE=123
    OVER=124
    PARTITION=125
    POPULATE=126
    PRECEDING=127
    PREWHERE=128
    PRIMARY=129
    PROJECTION=130
    QUARTER=131
    RANGE=132
    RELOAD=133
    REMOVE=134
    RENAME=135
    REPLACE=136
    REPLICA=137
    REPLICATED=138
    RIGHT=139
    ROLLUP=140
    ROW=141
    ROWS=142
    SAMPLE=143
    SECOND=144
    SELECT=145
    SEMI=146
    SENDS=147
    SET=148
    SETTINGS=149
    SHOW=150
    SOURCE=151
    START=152
    STOP=153
    SUBSTRING=154
    SYNC=155
    SYNTAX=156
    SYSTEM=157
    TABLE=158
    TABLES=159
    TEMPORARY=160
    TEST=161
    THEN=162
    TIES=163
    TIMEOUT=164
    TIMESTAMP=165
    TO=166
    TOP=167
    TOTALS=168
    TRAILING=169
    TRIM=170
    TRUNCATE=171
    TTL=172
    TYPE=173
    UNBOUNDED=174
    UNION=175
    UPDATE=176
    USE=177
    USING=178
    UUID=179
    VALUES=180
    VIEW=181
    VOLUME=182
    WATCH=183
    WEEK=184
    WHEN=185
    WHERE=186
    WINDOW=187
    WITH=188
    YEAR=189
    JSON_FALSE=190
    JSON_TRUE=191
    IDENTIFIER=192
    FLOATING_LITERAL=193
    OCTAL_LITERAL=194
    DECIMAL_LITERAL=195
    HEXADECIMAL_LITERAL=196
    STRING_LITERAL=197
    ARROW=198
    ASTERISK=199
    BACKQUOTE=200
    BACKSLASH=201
    COLON=202
    COMMA=203
    CONCAT=204
    DASH=205
    DOT=206
    EQ_DOUBLE=207
    EQ_SINGLE=208
    GE=209
    GT=210
    LBRACE=211
    LBRACKET=212
    LE=213
    LPAREN=214
    LT=215
    NOT_EQ=216
    PERCENT=217
    PLUS=218
    QUERY=219
    QUOTE_DOUBLE=220
    QUOTE_SINGLE=221
    RBRACE=222
    RBRACKET=223
    RPAREN=224
    SEMICOLON=225
    SLASH=226
    UNDERSCORE=227
    MULTI_LINE_COMMENT=228
    SINGLE_LINE_COMMENT=229
    WHITESPACE=230

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MultiQueryStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.QueryStmtContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.QueryStmtContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.SEMICOLON)
            else:
                return self.getToken(ClickHouseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_multiQueryStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiQueryStmt" ):
                return visitor.visitMultiQueryStmt(self)
            else:
                return visitor.visitChildren(self)




    def multiQueryStmt(self):

        localctx = ClickHouseParser.MultiQueryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_multiQueryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.queryStmt()
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 245
                    self.match(ClickHouseParser.SEMICOLON)
                    self.state = 246
                    self.queryStmt() 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.SEMICOLON:
                self.state = 252
                self.match(ClickHouseParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def INTO(self):
            return self.getToken(ClickHouseParser.INTO, 0)

        def OUTFILE(self):
            return self.getToken(ClickHouseParser.OUTFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def FORMAT(self):
            return self.getToken(ClickHouseParser.FORMAT, 0)

        def identifierOrNull(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierOrNullContext,0)


        def insertStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.InsertStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_queryStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryStmt" ):
                return visitor.visitQueryStmt(self)
            else:
                return visitor.visitChildren(self)




    def queryStmt(self):

        localctx = ClickHouseParser.QueryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_queryStmt)
        self._la = 0 # Token type
        try:
            self.state = 266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.ALTER, ClickHouseParser.ATTACH, ClickHouseParser.CHECK, ClickHouseParser.CREATE, ClickHouseParser.DESC, ClickHouseParser.DESCRIBE, ClickHouseParser.DETACH, ClickHouseParser.DROP, ClickHouseParser.EXISTS, ClickHouseParser.EXPLAIN, ClickHouseParser.KILL, ClickHouseParser.OPTIMIZE, ClickHouseParser.RENAME, ClickHouseParser.REPLACE, ClickHouseParser.SELECT, ClickHouseParser.SET, ClickHouseParser.SHOW, ClickHouseParser.SYSTEM, ClickHouseParser.TRUNCATE, ClickHouseParser.USE, ClickHouseParser.WATCH, ClickHouseParser.WITH, ClickHouseParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.query()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.INTO:
                    self.state = 256
                    self.match(ClickHouseParser.INTO)
                    self.state = 257
                    self.match(ClickHouseParser.OUTFILE)
                    self.state = 258
                    self.match(ClickHouseParser.STRING_LITERAL)


                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.FORMAT:
                    self.state = 261
                    self.match(ClickHouseParser.FORMAT)
                    self.state = 262
                    self.identifierOrNull()


                pass
            elif token in [ClickHouseParser.INSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.insertStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.AlterStmtContext,0)


        def attachStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.AttachStmtContext,0)


        def checkStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.CheckStmtContext,0)


        def createStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.CreateStmtContext,0)


        def describeStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.DescribeStmtContext,0)


        def dropStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.DropStmtContext,0)


        def existsStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ExistsStmtContext,0)


        def explainStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ExplainStmtContext,0)


        def killStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.KillStmtContext,0)


        def optimizeStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.OptimizeStmtContext,0)


        def renameStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.RenameStmtContext,0)


        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SetStmtContext,0)


        def showStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ShowStmtContext,0)


        def systemStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SystemStmtContext,0)


        def truncateStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.TruncateStmtContext,0)


        def useStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.UseStmtContext,0)


        def watchStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.WatchStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_query

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = ClickHouseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_query)
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.alterStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self.attachStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 270
                self.checkStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 271
                self.createStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 272
                self.describeStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 273
                self.dropStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 274
                self.existsStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 275
                self.explainStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 276
                self.killStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 277
                self.optimizeStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 278
                self.renameStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 279
                self.selectUnionStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 280
                self.setStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 281
                self.showStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 282
                self.systemStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 283
                self.truncateStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 284
                self.useStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 285
                self.watchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_alterStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterTableStmtContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(ClickHouseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def alterTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.AlterTableClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.AlterTableClauseContext,i)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableStmt" ):
                return visitor.visitAlterTableStmt(self)
            else:
                return visitor.visitChildren(self)



    def alterStmt(self):

        localctx = ClickHouseParser.AlterStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alterStmt)
        self._la = 0 # Token type
        try:
            localctx = ClickHouseParser.AlterTableStmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(ClickHouseParser.ALTER)
            self.state = 289
            self.match(ClickHouseParser.TABLE)
            self.state = 290
            self.tableIdentifier()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ON:
                self.state = 291
                self.clusterClause()


            self.state = 294
            self.alterTableClause()
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 295
                self.match(ClickHouseParser.COMMA)
                self.state = 296
                self.alterTableClause()
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_alterTableClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterTableClauseReplaceContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseReplace" ):
                return visitor.visitAlterTableClauseReplace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseModifyOrderByContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)
        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseModifyOrderBy" ):
                return visitor.visitAlterTableClauseModifyOrderBy(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseUpdateContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(ClickHouseParser.UPDATE, 0)
        def assignmentExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.AssignmentExprListContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseUpdate" ):
                return visitor.visitAlterTableClauseUpdate(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseClearProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseClearProjection" ):
                return visitor.visitAlterTableClauseClearProjection(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseModifyRemoveContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def REMOVE(self):
            return self.getToken(ClickHouseParser.REMOVE, 0)
        def tableColumnPropertyType(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnPropertyTypeContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseModifyRemove" ):
                return visitor.visitAlterTableClauseModifyRemove(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseDeleteContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(ClickHouseParser.DELETE, 0)
        def WHERE(self):
            return self.getToken(ClickHouseParser.WHERE, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseDelete" ):
                return visitor.visitAlterTableClauseDelete(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseCommentContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseComment" ):
                return visitor.visitAlterTableClauseComment(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseDropColumnContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseDropColumn" ):
                return visitor.visitAlterTableClauseDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseDetachContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseDetach" ):
                return visitor.visitAlterTableClauseDetach(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseAddIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(ClickHouseParser.ADD, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def tableIndexDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIndexDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseAddIndex" ):
                return visitor.visitAlterTableClauseAddIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseDropPartitionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseDropPartition" ):
                return visitor.visitAlterTableClauseDropPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseMaterializeIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATERIALIZE(self):
            return self.getToken(ClickHouseParser.MATERIALIZE, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseMaterializeIndex" ):
                return visitor.visitAlterTableClauseMaterializeIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseMaterializeProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATERIALIZE(self):
            return self.getToken(ClickHouseParser.MATERIALIZE, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseMaterializeProjection" ):
                return visitor.visitAlterTableClauseMaterializeProjection(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseMovePartitionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MOVE(self):
            return self.getToken(ClickHouseParser.MOVE, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)
        def DISK(self):
            return self.getToken(ClickHouseParser.DISK, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def VOLUME(self):
            return self.getToken(ClickHouseParser.VOLUME, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseMovePartition" ):
                return visitor.visitAlterTableClauseMovePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseRenameContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(ClickHouseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NestedIdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,i)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseRename" ):
                return visitor.visitAlterTableClauseRename(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseFreezePartitionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FREEZE(self):
            return self.getToken(ClickHouseParser.FREEZE, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseFreezePartition" ):
                return visitor.visitAlterTableClauseFreezePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseClearColumnContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseClearColumn" ):
                return visitor.visitAlterTableClauseClearColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseModifyContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def tableColumnDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseModify" ):
                return visitor.visitAlterTableClauseModify(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseClearIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseClearIndex" ):
                return visitor.visitAlterTableClauseClearIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseRemoveTTLContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(ClickHouseParser.REMOVE, 0)
        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseRemoveTTL" ):
                return visitor.visitAlterTableClauseRemoveTTL(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseModifyCodecContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def codecExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.CodecExprContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseModifyCodec" ):
                return visitor.visitAlterTableClauseModifyCodec(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseAttachContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseAttach" ):
                return visitor.visitAlterTableClauseAttach(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseDropProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseDropProjection" ):
                return visitor.visitAlterTableClauseDropProjection(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseDropIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseDropIndex" ):
                return visitor.visitAlterTableClauseDropIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseModifyCommentContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseModifyComment" ):
                return visitor.visitAlterTableClauseModifyComment(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseModifyTTLContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def ttlClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TtlClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseModifyTTL" ):
                return visitor.visitAlterTableClauseModifyTTL(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseAddProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(ClickHouseParser.ADD, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def tableProjectionDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableProjectionDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseAddProjection" ):
                return visitor.visitAlterTableClauseAddProjection(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableClauseAddColumnContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(ClickHouseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def tableColumnDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableClauseAddColumn" ):
                return visitor.visitAlterTableClauseAddColumn(self)
            else:
                return visitor.visitChildren(self)



    def alterTableClause(self):

        localctx = ClickHouseParser.AlterTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alterTableClause)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.AlterTableClauseAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.match(ClickHouseParser.ADD)
                self.state = 303
                self.match(ClickHouseParser.COLUMN)
                self.state = 307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 304
                    self.match(ClickHouseParser.IF)
                    self.state = 305
                    self.match(ClickHouseParser.NOT)
                    self.state = 306
                    self.match(ClickHouseParser.EXISTS)


                self.state = 309
                self.tableColumnDfnt()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.AFTER:
                    self.state = 310
                    self.match(ClickHouseParser.AFTER)
                    self.state = 311
                    self.nestedIdentifier()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.AlterTableClauseAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self.match(ClickHouseParser.ADD)
                self.state = 315
                self.match(ClickHouseParser.INDEX)
                self.state = 319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 316
                    self.match(ClickHouseParser.IF)
                    self.state = 317
                    self.match(ClickHouseParser.NOT)
                    self.state = 318
                    self.match(ClickHouseParser.EXISTS)


                self.state = 321
                self.tableIndexDfnt()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.AFTER:
                    self.state = 322
                    self.match(ClickHouseParser.AFTER)
                    self.state = 323
                    self.nestedIdentifier()


                pass

            elif la_ == 3:
                localctx = ClickHouseParser.AlterTableClauseAddProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 326
                self.match(ClickHouseParser.ADD)
                self.state = 327
                self.match(ClickHouseParser.PROJECTION)
                self.state = 331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 328
                    self.match(ClickHouseParser.IF)
                    self.state = 329
                    self.match(ClickHouseParser.NOT)
                    self.state = 330
                    self.match(ClickHouseParser.EXISTS)


                self.state = 333
                self.tableProjectionDfnt()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.AFTER:
                    self.state = 334
                    self.match(ClickHouseParser.AFTER)
                    self.state = 335
                    self.nestedIdentifier()


                pass

            elif la_ == 4:
                localctx = ClickHouseParser.AlterTableClauseAttachContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 338
                self.match(ClickHouseParser.ATTACH)
                self.state = 339
                self.partitionClause()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.FROM:
                    self.state = 340
                    self.match(ClickHouseParser.FROM)
                    self.state = 341
                    self.tableIdentifier()


                pass

            elif la_ == 5:
                localctx = ClickHouseParser.AlterTableClauseClearColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 344
                self.match(ClickHouseParser.CLEAR)
                self.state = 345
                self.match(ClickHouseParser.COLUMN)
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 346
                    self.match(ClickHouseParser.IF)
                    self.state = 347
                    self.match(ClickHouseParser.EXISTS)


                self.state = 350
                self.nestedIdentifier()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.IN:
                    self.state = 351
                    self.match(ClickHouseParser.IN)
                    self.state = 352
                    self.partitionClause()


                pass

            elif la_ == 6:
                localctx = ClickHouseParser.AlterTableClauseClearIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 355
                self.match(ClickHouseParser.CLEAR)
                self.state = 356
                self.match(ClickHouseParser.INDEX)
                self.state = 359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 357
                    self.match(ClickHouseParser.IF)
                    self.state = 358
                    self.match(ClickHouseParser.EXISTS)


                self.state = 361
                self.nestedIdentifier()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.IN:
                    self.state = 362
                    self.match(ClickHouseParser.IN)
                    self.state = 363
                    self.partitionClause()


                pass

            elif la_ == 7:
                localctx = ClickHouseParser.AlterTableClauseClearProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 366
                self.match(ClickHouseParser.CLEAR)
                self.state = 367
                self.match(ClickHouseParser.PROJECTION)
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 368
                    self.match(ClickHouseParser.IF)
                    self.state = 369
                    self.match(ClickHouseParser.EXISTS)


                self.state = 372
                self.nestedIdentifier()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.IN:
                    self.state = 373
                    self.match(ClickHouseParser.IN)
                    self.state = 374
                    self.partitionClause()


                pass

            elif la_ == 8:
                localctx = ClickHouseParser.AlterTableClauseCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 377
                self.match(ClickHouseParser.COMMENT)
                self.state = 378
                self.match(ClickHouseParser.COLUMN)
                self.state = 381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 379
                    self.match(ClickHouseParser.IF)
                    self.state = 380
                    self.match(ClickHouseParser.EXISTS)


                self.state = 383
                self.nestedIdentifier()
                self.state = 384
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 9:
                localctx = ClickHouseParser.AlterTableClauseDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 386
                self.match(ClickHouseParser.DELETE)
                self.state = 387
                self.match(ClickHouseParser.WHERE)
                self.state = 388
                self.columnExpr(0)
                pass

            elif la_ == 10:
                localctx = ClickHouseParser.AlterTableClauseDetachContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 389
                self.match(ClickHouseParser.DETACH)
                self.state = 390
                self.partitionClause()
                pass

            elif la_ == 11:
                localctx = ClickHouseParser.AlterTableClauseDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 391
                self.match(ClickHouseParser.DROP)
                self.state = 392
                self.match(ClickHouseParser.COLUMN)
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 393
                    self.match(ClickHouseParser.IF)
                    self.state = 394
                    self.match(ClickHouseParser.EXISTS)


                self.state = 397
                self.nestedIdentifier()
                pass

            elif la_ == 12:
                localctx = ClickHouseParser.AlterTableClauseDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 398
                self.match(ClickHouseParser.DROP)
                self.state = 399
                self.match(ClickHouseParser.INDEX)
                self.state = 402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 400
                    self.match(ClickHouseParser.IF)
                    self.state = 401
                    self.match(ClickHouseParser.EXISTS)


                self.state = 404
                self.nestedIdentifier()
                pass

            elif la_ == 13:
                localctx = ClickHouseParser.AlterTableClauseDropProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 405
                self.match(ClickHouseParser.DROP)
                self.state = 406
                self.match(ClickHouseParser.PROJECTION)
                self.state = 409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 407
                    self.match(ClickHouseParser.IF)
                    self.state = 408
                    self.match(ClickHouseParser.EXISTS)


                self.state = 411
                self.nestedIdentifier()
                pass

            elif la_ == 14:
                localctx = ClickHouseParser.AlterTableClauseDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 412
                self.match(ClickHouseParser.DROP)
                self.state = 413
                self.partitionClause()
                pass

            elif la_ == 15:
                localctx = ClickHouseParser.AlterTableClauseFreezePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 414
                self.match(ClickHouseParser.FREEZE)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.PARTITION:
                    self.state = 415
                    self.partitionClause()


                pass

            elif la_ == 16:
                localctx = ClickHouseParser.AlterTableClauseMaterializeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 418
                self.match(ClickHouseParser.MATERIALIZE)
                self.state = 419
                self.match(ClickHouseParser.INDEX)
                self.state = 422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 420
                    self.match(ClickHouseParser.IF)
                    self.state = 421
                    self.match(ClickHouseParser.EXISTS)


                self.state = 424
                self.nestedIdentifier()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.IN:
                    self.state = 425
                    self.match(ClickHouseParser.IN)
                    self.state = 426
                    self.partitionClause()


                pass

            elif la_ == 17:
                localctx = ClickHouseParser.AlterTableClauseMaterializeProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 429
                self.match(ClickHouseParser.MATERIALIZE)
                self.state = 430
                self.match(ClickHouseParser.PROJECTION)
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 431
                    self.match(ClickHouseParser.IF)
                    self.state = 432
                    self.match(ClickHouseParser.EXISTS)


                self.state = 435
                self.nestedIdentifier()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.IN:
                    self.state = 436
                    self.match(ClickHouseParser.IN)
                    self.state = 437
                    self.partitionClause()


                pass

            elif la_ == 18:
                localctx = ClickHouseParser.AlterTableClauseModifyCodecContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 440
                self.match(ClickHouseParser.MODIFY)
                self.state = 441
                self.match(ClickHouseParser.COLUMN)
                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(ClickHouseParser.IF)
                    self.state = 443
                    self.match(ClickHouseParser.EXISTS)


                self.state = 446
                self.nestedIdentifier()
                self.state = 447
                self.codecExpr()
                pass

            elif la_ == 19:
                localctx = ClickHouseParser.AlterTableClauseModifyCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 449
                self.match(ClickHouseParser.MODIFY)
                self.state = 450
                self.match(ClickHouseParser.COLUMN)
                self.state = 453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 451
                    self.match(ClickHouseParser.IF)
                    self.state = 452
                    self.match(ClickHouseParser.EXISTS)


                self.state = 455
                self.nestedIdentifier()
                self.state = 456
                self.match(ClickHouseParser.COMMENT)
                self.state = 457
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = ClickHouseParser.AlterTableClauseModifyRemoveContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 459
                self.match(ClickHouseParser.MODIFY)
                self.state = 460
                self.match(ClickHouseParser.COLUMN)
                self.state = 463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.match(ClickHouseParser.IF)
                    self.state = 462
                    self.match(ClickHouseParser.EXISTS)


                self.state = 465
                self.nestedIdentifier()
                self.state = 466
                self.match(ClickHouseParser.REMOVE)
                self.state = 467
                self.tableColumnPropertyType()
                pass

            elif la_ == 21:
                localctx = ClickHouseParser.AlterTableClauseModifyContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 469
                self.match(ClickHouseParser.MODIFY)
                self.state = 470
                self.match(ClickHouseParser.COLUMN)
                self.state = 473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 471
                    self.match(ClickHouseParser.IF)
                    self.state = 472
                    self.match(ClickHouseParser.EXISTS)


                self.state = 475
                self.tableColumnDfnt()
                pass

            elif la_ == 22:
                localctx = ClickHouseParser.AlterTableClauseModifyOrderByContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 476
                self.match(ClickHouseParser.MODIFY)
                self.state = 477
                self.match(ClickHouseParser.ORDER)
                self.state = 478
                self.match(ClickHouseParser.BY)
                self.state = 479
                self.columnExpr(0)
                pass

            elif la_ == 23:
                localctx = ClickHouseParser.AlterTableClauseModifyTTLContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 480
                self.match(ClickHouseParser.MODIFY)
                self.state = 481
                self.ttlClause()
                pass

            elif la_ == 24:
                localctx = ClickHouseParser.AlterTableClauseMovePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 482
                self.match(ClickHouseParser.MOVE)
                self.state = 483
                self.partitionClause()
                self.state = 493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 484
                    self.match(ClickHouseParser.TO)
                    self.state = 485
                    self.match(ClickHouseParser.DISK)
                    self.state = 486
                    self.match(ClickHouseParser.STRING_LITERAL)
                    pass

                elif la_ == 2:
                    self.state = 487
                    self.match(ClickHouseParser.TO)
                    self.state = 488
                    self.match(ClickHouseParser.VOLUME)
                    self.state = 489
                    self.match(ClickHouseParser.STRING_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 490
                    self.match(ClickHouseParser.TO)
                    self.state = 491
                    self.match(ClickHouseParser.TABLE)
                    self.state = 492
                    self.tableIdentifier()
                    pass


                pass

            elif la_ == 25:
                localctx = ClickHouseParser.AlterTableClauseRemoveTTLContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 495
                self.match(ClickHouseParser.REMOVE)
                self.state = 496
                self.match(ClickHouseParser.TTL)
                pass

            elif la_ == 26:
                localctx = ClickHouseParser.AlterTableClauseRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 497
                self.match(ClickHouseParser.RENAME)
                self.state = 498
                self.match(ClickHouseParser.COLUMN)
                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self.match(ClickHouseParser.IF)
                    self.state = 500
                    self.match(ClickHouseParser.EXISTS)


                self.state = 503
                self.nestedIdentifier()
                self.state = 504
                self.match(ClickHouseParser.TO)
                self.state = 505
                self.nestedIdentifier()
                pass

            elif la_ == 27:
                localctx = ClickHouseParser.AlterTableClauseReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 507
                self.match(ClickHouseParser.REPLACE)
                self.state = 508
                self.partitionClause()
                self.state = 509
                self.match(ClickHouseParser.FROM)
                self.state = 510
                self.tableIdentifier()
                pass

            elif la_ == 28:
                localctx = ClickHouseParser.AlterTableClauseUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 512
                self.match(ClickHouseParser.UPDATE)
                self.state = 513
                self.assignmentExprList()
                self.state = 514
                self.whereClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.AssignmentExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.AssignmentExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_assignmentExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExprList" ):
                return visitor.visitAssignmentExprList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExprList(self):

        localctx = ClickHouseParser.AssignmentExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignmentExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.assignmentExpr()
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 519
                self.match(ClickHouseParser.COMMA)
                self.state = 520
                self.assignmentExpr()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_assignmentExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpr" ):
                return visitor.visitAssignmentExpr(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpr(self):

        localctx = ClickHouseParser.AssignmentExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_assignmentExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.nestedIdentifier()
            self.state = 527
            self.match(ClickHouseParser.EQ_SINGLE)
            self.state = 528
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableColumnPropertyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(ClickHouseParser.ALIAS, 0)

        def CODEC(self):
            return self.getToken(ClickHouseParser.CODEC, 0)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)

        def DEFAULT(self):
            return self.getToken(ClickHouseParser.DEFAULT, 0)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableColumnPropertyType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableColumnPropertyType" ):
                return visitor.visitTableColumnPropertyType(self)
            else:
                return visitor.visitChildren(self)




    def tableColumnPropertyType(self):

        localctx = ClickHouseParser.TableColumnPropertyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_tableColumnPropertyType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.DEFAULT))) != 0) or _la==ClickHouseParser.MATERIALIZED or _la==ClickHouseParser.TTL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def ID(self):
            return self.getToken(ClickHouseParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_partitionClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionClause" ):
                return visitor.visitPartitionClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionClause(self):

        localctx = ClickHouseParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_partitionClause)
        try:
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.match(ClickHouseParser.PARTITION)
                self.state = 533
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                self.match(ClickHouseParser.PARTITION)
                self.state = 535
                self.match(ClickHouseParser.ID)
                self.state = 536
                self.match(ClickHouseParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttachStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_attachStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AttachDictionaryStmtContext(AttachStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AttachStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttachDictionaryStmt" ):
                return visitor.visitAttachDictionaryStmt(self)
            else:
                return visitor.visitChildren(self)



    def attachStmt(self):

        localctx = ClickHouseParser.AttachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_attachStmt)
        self._la = 0 # Token type
        try:
            localctx = ClickHouseParser.AttachDictionaryStmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(ClickHouseParser.ATTACH)
            self.state = 540
            self.match(ClickHouseParser.DICTIONARY)
            self.state = 541
            self.tableIdentifier()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ON:
                self.state = 542
                self.clusterClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(ClickHouseParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_checkStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckStmt" ):
                return visitor.visitCheckStmt(self)
            else:
                return visitor.visitChildren(self)




    def checkStmt(self):

        localctx = ClickHouseParser.CheckStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_checkStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(ClickHouseParser.CHECK)
            self.state = 546
            self.match(ClickHouseParser.TABLE)
            self.state = 547
            self.tableIdentifier()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.PARTITION:
                self.state = 548
                self.partitionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_createStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateViewStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateViewStmt" ):
                return visitor.visitCreateViewStmt(self)
            else:
                return visitor.visitChildren(self)


    class CreateDictionaryStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def dictionarySchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DictionarySchemaClauseContext,0)

        def dictionaryEngineClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DictionaryEngineClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDictionaryStmt" ):
                return visitor.visitCreateDictionaryStmt(self)
            else:
                return visitor.visitChildren(self)


    class CreateDatabaseStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def engineExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabaseStmt" ):
                return visitor.visitCreateDatabaseStmt(self)
            else:
                return visitor.visitChildren(self)


    class CreateLiveViewStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIVE(self):
            return self.getToken(ClickHouseParser.LIVE, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)
        def TIMEOUT(self):
            return self.getToken(ClickHouseParser.TIMEOUT, 0)
        def destinationClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DestinationClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateLiveViewStmt" ):
                return visitor.visitCreateLiveViewStmt(self)
            else:
                return visitor.visitChildren(self)


    class CreateMaterializedViewStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def destinationClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DestinationClauseContext,0)

        def engineClause(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineClauseContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)

        def POPULATE(self):
            return self.getToken(ClickHouseParser.POPULATE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedViewStmt" ):
                return visitor.visitCreateMaterializedViewStmt(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)

        def engineClause(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineClauseContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableStmt" ):
                return visitor.visitCreateTableStmt(self)
            else:
                return visitor.visitChildren(self)



    def createStmt(self):

        localctx = ClickHouseParser.CreateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_createStmt)
        self._la = 0 # Token type
        try:
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.CreateDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.ATTACH or _la==ClickHouseParser.CREATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 552
                self.match(ClickHouseParser.DATABASE)
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 553
                    self.match(ClickHouseParser.IF)
                    self.state = 554
                    self.match(ClickHouseParser.NOT)
                    self.state = 555
                    self.match(ClickHouseParser.EXISTS)


                self.state = 558
                self.databaseIdentifier()
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 559
                    self.clusterClause()


                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ENGINE:
                    self.state = 562
                    self.engineExpr()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.CreateDictionaryStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.ATTACH]:
                    self.state = 565
                    self.match(ClickHouseParser.ATTACH)
                    pass
                elif token in [ClickHouseParser.CREATE]:
                    self.state = 566
                    self.match(ClickHouseParser.CREATE)
                    self.state = 569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.OR:
                        self.state = 567
                        self.match(ClickHouseParser.OR)
                        self.state = 568
                        self.match(ClickHouseParser.REPLACE)


                    pass
                elif token in [ClickHouseParser.REPLACE]:
                    self.state = 571
                    self.match(ClickHouseParser.REPLACE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 574
                self.match(ClickHouseParser.DICTIONARY)
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 575
                    self.match(ClickHouseParser.IF)
                    self.state = 576
                    self.match(ClickHouseParser.NOT)
                    self.state = 577
                    self.match(ClickHouseParser.EXISTS)


                self.state = 580
                self.tableIdentifier()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.UUID:
                    self.state = 581
                    self.uuidClause()


                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 584
                    self.clusterClause()


                self.state = 587
                self.dictionarySchemaClause()
                self.state = 588
                self.dictionaryEngineClause()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.CreateLiveViewStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.ATTACH or _la==ClickHouseParser.CREATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 591
                self.match(ClickHouseParser.LIVE)
                self.state = 592
                self.match(ClickHouseParser.VIEW)
                self.state = 596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 593
                    self.match(ClickHouseParser.IF)
                    self.state = 594
                    self.match(ClickHouseParser.NOT)
                    self.state = 595
                    self.match(ClickHouseParser.EXISTS)


                self.state = 598
                self.tableIdentifier()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.UUID:
                    self.state = 599
                    self.uuidClause()


                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 602
                    self.clusterClause()


                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.WITH:
                    self.state = 605
                    self.match(ClickHouseParser.WITH)
                    self.state = 606
                    self.match(ClickHouseParser.TIMEOUT)
                    self.state = 608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.DECIMAL_LITERAL:
                        self.state = 607
                        self.match(ClickHouseParser.DECIMAL_LITERAL)




                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.TO:
                    self.state = 612
                    self.destinationClause()


                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 615
                    self.tableSchemaClause()


                self.state = 618
                self.subqueryClause()
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.CreateMaterializedViewStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 620
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.ATTACH or _la==ClickHouseParser.CREATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 621
                self.match(ClickHouseParser.MATERIALIZED)
                self.state = 622
                self.match(ClickHouseParser.VIEW)
                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.match(ClickHouseParser.IF)
                    self.state = 624
                    self.match(ClickHouseParser.NOT)
                    self.state = 625
                    self.match(ClickHouseParser.EXISTS)


                self.state = 628
                self.tableIdentifier()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.UUID:
                    self.state = 629
                    self.uuidClause()


                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 632
                    self.clusterClause()


                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.AS or _la==ClickHouseParser.LPAREN:
                    self.state = 635
                    self.tableSchemaClause()


                self.state = 643
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.TO]:
                    self.state = 638
                    self.destinationClause()
                    pass
                elif token in [ClickHouseParser.ENGINE]:
                    self.state = 639
                    self.engineClause()
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.POPULATE:
                        self.state = 640
                        self.match(ClickHouseParser.POPULATE)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 645
                self.subqueryClause()
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.CreateTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 654
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.ATTACH]:
                    self.state = 647
                    self.match(ClickHouseParser.ATTACH)
                    pass
                elif token in [ClickHouseParser.CREATE]:
                    self.state = 648
                    self.match(ClickHouseParser.CREATE)
                    self.state = 651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.OR:
                        self.state = 649
                        self.match(ClickHouseParser.OR)
                        self.state = 650
                        self.match(ClickHouseParser.REPLACE)


                    pass
                elif token in [ClickHouseParser.REPLACE]:
                    self.state = 653
                    self.match(ClickHouseParser.REPLACE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.TEMPORARY:
                    self.state = 656
                    self.match(ClickHouseParser.TEMPORARY)


                self.state = 659
                self.match(ClickHouseParser.TABLE)
                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 660
                    self.match(ClickHouseParser.IF)
                    self.state = 661
                    self.match(ClickHouseParser.NOT)
                    self.state = 662
                    self.match(ClickHouseParser.EXISTS)


                self.state = 665
                self.tableIdentifier()
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.UUID:
                    self.state = 666
                    self.uuidClause()


                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 669
                    self.clusterClause()


                self.state = 673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.tableSchemaClause()


                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ENGINE:
                    self.state = 675
                    self.engineClause()


                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.AS:
                    self.state = 678
                    self.subqueryClause()


                pass

            elif la_ == 6:
                localctx = ClickHouseParser.CreateViewStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 681
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.ATTACH or _la==ClickHouseParser.CREATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.OR:
                    self.state = 682
                    self.match(ClickHouseParser.OR)
                    self.state = 683
                    self.match(ClickHouseParser.REPLACE)


                self.state = 686
                self.match(ClickHouseParser.VIEW)
                self.state = 690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 687
                    self.match(ClickHouseParser.IF)
                    self.state = 688
                    self.match(ClickHouseParser.NOT)
                    self.state = 689
                    self.match(ClickHouseParser.EXISTS)


                self.state = 692
                self.tableIdentifier()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.UUID:
                    self.state = 693
                    self.uuidClause()


                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 696
                    self.clusterClause()


                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.tableSchemaClause()


                self.state = 702
                self.subqueryClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionarySchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def dictionaryAttrDfnt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionaryAttrDfntContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionaryAttrDfntContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionarySchemaClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionarySchemaClause" ):
                return visitor.visitDictionarySchemaClause(self)
            else:
                return visitor.visitChildren(self)




    def dictionarySchemaClause(self):

        localctx = ClickHouseParser.DictionarySchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_dictionarySchemaClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(ClickHouseParser.LPAREN)
            self.state = 707
            self.dictionaryAttrDfnt()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 708
                self.match(ClickHouseParser.COMMA)
                self.state = 709
                self.dictionaryAttrDfnt()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 715
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryAttrDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.DEFAULT)
            else:
                return self.getToken(ClickHouseParser.DEFAULT, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.LiteralContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.LiteralContext,i)


        def EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.EXPRESSION)
            else:
                return self.getToken(ClickHouseParser.EXPRESSION, i)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)


        def HIERARCHICAL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.HIERARCHICAL)
            else:
                return self.getToken(ClickHouseParser.HIERARCHICAL, i)

        def INJECTIVE(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.INJECTIVE)
            else:
                return self.getToken(ClickHouseParser.INJECTIVE, i)

        def IS_OBJECT_ID(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.IS_OBJECT_ID)
            else:
                return self.getToken(ClickHouseParser.IS_OBJECT_ID, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryAttrDfnt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryAttrDfnt" ):
                return visitor.visitDictionaryAttrDfnt(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryAttrDfnt(self):

        localctx = ClickHouseParser.DictionaryAttrDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_dictionaryAttrDfnt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.identifier()
            self.state = 718
            self.columnTypeExpr()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & ((1 << (ClickHouseParser.DEFAULT - 38)) | (1 << (ClickHouseParser.EXPRESSION - 38)) | (1 << (ClickHouseParser.HIERARCHICAL - 38)) | (1 << (ClickHouseParser.INJECTIVE - 38)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 38)))) != 0):
                self.state = 726
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.DEFAULT]:
                    self.state = 719
                    self.match(ClickHouseParser.DEFAULT)
                    self.state = 720
                    self.literal()
                    pass
                elif token in [ClickHouseParser.EXPRESSION]:
                    self.state = 721
                    self.match(ClickHouseParser.EXPRESSION)
                    self.state = 722
                    self.columnExpr(0)
                    pass
                elif token in [ClickHouseParser.HIERARCHICAL]:
                    self.state = 723
                    self.match(ClickHouseParser.HIERARCHICAL)
                    pass
                elif token in [ClickHouseParser.INJECTIVE]:
                    self.state = 724
                    self.match(ClickHouseParser.INJECTIVE)
                    pass
                elif token in [ClickHouseParser.IS_OBJECT_ID]:
                    self.state = 725
                    self.match(ClickHouseParser.IS_OBJECT_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryEngineClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryPrimaryKeyClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DictionaryPrimaryKeyClauseContext,0)


        def sourceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SourceClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SourceClauseContext,i)


        def lifetimeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.LifetimeClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.LifetimeClauseContext,i)


        def layoutClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.LayoutClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.LayoutClauseContext,i)


        def rangeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.RangeClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.RangeClauseContext,i)


        def dictionarySettingsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionarySettingsClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionarySettingsClauseContext,i)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryEngineClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryEngineClause" ):
                return visitor.visitDictionaryEngineClause(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryEngineClause(self):

        localctx = ClickHouseParser.DictionaryEngineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_dictionaryEngineClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.PRIMARY:
                self.state = 731
                self.dictionaryPrimaryKeyClause()


            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (ClickHouseParser.LAYOUT - 93)) | (1 << (ClickHouseParser.LIFETIME - 93)) | (1 << (ClickHouseParser.RANGE - 93)) | (1 << (ClickHouseParser.SETTINGS - 93)) | (1 << (ClickHouseParser.SOURCE - 93)))) != 0):
                self.state = 739
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.SOURCE]:
                    self.state = 734
                    self.sourceClause()
                    pass
                elif token in [ClickHouseParser.LIFETIME]:
                    self.state = 735
                    self.lifetimeClause()
                    pass
                elif token in [ClickHouseParser.LAYOUT]:
                    self.state = 736
                    self.layoutClause()
                    pass
                elif token in [ClickHouseParser.RANGE]:
                    self.state = 737
                    self.rangeClause()
                    pass
                elif token in [ClickHouseParser.SETTINGS]:
                    self.state = 738
                    self.dictionarySettingsClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryPrimaryKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(ClickHouseParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryPrimaryKeyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryPrimaryKeyClause" ):
                return visitor.visitDictionaryPrimaryKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryPrimaryKeyClause(self):

        localctx = ClickHouseParser.DictionaryPrimaryKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_dictionaryPrimaryKeyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(ClickHouseParser.PRIMARY)
            self.state = 745
            self.match(ClickHouseParser.KEY)
            self.state = 746
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryArgExpr" ):
                return visitor.visitDictionaryArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryArgExpr(self):

        localctx = ClickHouseParser.DictionaryArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dictionaryArgExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.identifier()
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.AFTER, ClickHouseParser.ALIAS, ClickHouseParser.ALL, ClickHouseParser.ALTER, ClickHouseParser.AND, ClickHouseParser.ANTI, ClickHouseParser.ANY, ClickHouseParser.ARRAY, ClickHouseParser.AS, ClickHouseParser.ASCENDING, ClickHouseParser.ASOF, ClickHouseParser.AST, ClickHouseParser.ASYNC, ClickHouseParser.ATTACH, ClickHouseParser.BETWEEN, ClickHouseParser.BOTH, ClickHouseParser.BY, ClickHouseParser.CASE, ClickHouseParser.CAST, ClickHouseParser.CHECK, ClickHouseParser.CLEAR, ClickHouseParser.CLUSTER, ClickHouseParser.CODEC, ClickHouseParser.COLLATE, ClickHouseParser.COLUMN, ClickHouseParser.COMMENT, ClickHouseParser.CONSTRAINT, ClickHouseParser.CREATE, ClickHouseParser.CROSS, ClickHouseParser.CUBE, ClickHouseParser.CURRENT, ClickHouseParser.DATABASE, ClickHouseParser.DATABASES, ClickHouseParser.DATE, ClickHouseParser.DAY, ClickHouseParser.DEDUPLICATE, ClickHouseParser.DEFAULT, ClickHouseParser.DELAY, ClickHouseParser.DELETE, ClickHouseParser.DESC, ClickHouseParser.DESCENDING, ClickHouseParser.DESCRIBE, ClickHouseParser.DETACH, ClickHouseParser.DICTIONARIES, ClickHouseParser.DICTIONARY, ClickHouseParser.DISK, ClickHouseParser.DISTINCT, ClickHouseParser.DISTRIBUTED, ClickHouseParser.DROP, ClickHouseParser.ELSE, ClickHouseParser.END, ClickHouseParser.ENGINE, ClickHouseParser.EVENTS, ClickHouseParser.EXISTS, ClickHouseParser.EXPLAIN, ClickHouseParser.EXPRESSION, ClickHouseParser.EXTRACT, ClickHouseParser.FETCHES, ClickHouseParser.FINAL, ClickHouseParser.FIRST, ClickHouseParser.FLUSH, ClickHouseParser.FOLLOWING, ClickHouseParser.FOR, ClickHouseParser.FORMAT, ClickHouseParser.FREEZE, ClickHouseParser.FROM, ClickHouseParser.FULL, ClickHouseParser.FUNCTION, ClickHouseParser.GLOBAL, ClickHouseParser.GRANULARITY, ClickHouseParser.GROUP, ClickHouseParser.HAVING, ClickHouseParser.HIERARCHICAL, ClickHouseParser.HOUR, ClickHouseParser.ID, ClickHouseParser.IF, ClickHouseParser.ILIKE, ClickHouseParser.IN, ClickHouseParser.INDEX, ClickHouseParser.INJECTIVE, ClickHouseParser.INNER, ClickHouseParser.INSERT, ClickHouseParser.INTERVAL, ClickHouseParser.INTO, ClickHouseParser.IS, ClickHouseParser.IS_OBJECT_ID, ClickHouseParser.JOIN, ClickHouseParser.KEY, ClickHouseParser.KILL, ClickHouseParser.LAST, ClickHouseParser.LAYOUT, ClickHouseParser.LEADING, ClickHouseParser.LEFT, ClickHouseParser.LIFETIME, ClickHouseParser.LIKE, ClickHouseParser.LIMIT, ClickHouseParser.LIVE, ClickHouseParser.LOCAL, ClickHouseParser.LOGS, ClickHouseParser.MATERIALIZE, ClickHouseParser.MATERIALIZED, ClickHouseParser.MAX, ClickHouseParser.MERGES, ClickHouseParser.MIN, ClickHouseParser.MINUTE, ClickHouseParser.MODIFY, ClickHouseParser.MONTH, ClickHouseParser.MOVE, ClickHouseParser.MUTATION, ClickHouseParser.NO, ClickHouseParser.NOT, ClickHouseParser.NULLS, ClickHouseParser.OFFSET, ClickHouseParser.ON, ClickHouseParser.OPTIMIZE, ClickHouseParser.OR, ClickHouseParser.ORDER, ClickHouseParser.OUTER, ClickHouseParser.OUTFILE, ClickHouseParser.OVER, ClickHouseParser.PARTITION, ClickHouseParser.POPULATE, ClickHouseParser.PRECEDING, ClickHouseParser.PREWHERE, ClickHouseParser.PRIMARY, ClickHouseParser.QUARTER, ClickHouseParser.RANGE, ClickHouseParser.RELOAD, ClickHouseParser.REMOVE, ClickHouseParser.RENAME, ClickHouseParser.REPLACE, ClickHouseParser.REPLICA, ClickHouseParser.REPLICATED, ClickHouseParser.RIGHT, ClickHouseParser.ROLLUP, ClickHouseParser.ROW, ClickHouseParser.ROWS, ClickHouseParser.SAMPLE, ClickHouseParser.SECOND, ClickHouseParser.SELECT, ClickHouseParser.SEMI, ClickHouseParser.SENDS, ClickHouseParser.SET, ClickHouseParser.SETTINGS, ClickHouseParser.SHOW, ClickHouseParser.SOURCE, ClickHouseParser.START, ClickHouseParser.STOP, ClickHouseParser.SUBSTRING, ClickHouseParser.SYNC, ClickHouseParser.SYNTAX, ClickHouseParser.SYSTEM, ClickHouseParser.TABLE, ClickHouseParser.TABLES, ClickHouseParser.TEMPORARY, ClickHouseParser.TEST, ClickHouseParser.THEN, ClickHouseParser.TIES, ClickHouseParser.TIMEOUT, ClickHouseParser.TIMESTAMP, ClickHouseParser.TO, ClickHouseParser.TOP, ClickHouseParser.TOTALS, ClickHouseParser.TRAILING, ClickHouseParser.TRIM, ClickHouseParser.TRUNCATE, ClickHouseParser.TTL, ClickHouseParser.TYPE, ClickHouseParser.UNBOUNDED, ClickHouseParser.UNION, ClickHouseParser.UPDATE, ClickHouseParser.USE, ClickHouseParser.USING, ClickHouseParser.UUID, ClickHouseParser.VALUES, ClickHouseParser.VIEW, ClickHouseParser.VOLUME, ClickHouseParser.WATCH, ClickHouseParser.WEEK, ClickHouseParser.WHEN, ClickHouseParser.WHERE, ClickHouseParser.WINDOW, ClickHouseParser.WITH, ClickHouseParser.YEAR, ClickHouseParser.JSON_FALSE, ClickHouseParser.JSON_TRUE, ClickHouseParser.IDENTIFIER]:
                self.state = 749
                self.identifier()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.LPAREN:
                    self.state = 750
                    self.match(ClickHouseParser.LPAREN)
                    self.state = 751
                    self.match(ClickHouseParser.RPAREN)


                pass
            elif token in [ClickHouseParser.INF, ClickHouseParser.NAN_SQL, ClickHouseParser.NULL_SQL, ClickHouseParser.FLOATING_LITERAL, ClickHouseParser.OCTAL_LITERAL, ClickHouseParser.DECIMAL_LITERAL, ClickHouseParser.HEXADECIMAL_LITERAL, ClickHouseParser.STRING_LITERAL, ClickHouseParser.DASH, ClickHouseParser.DOT, ClickHouseParser.PLUS]:
                self.state = 754
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE(self):
            return self.getToken(ClickHouseParser.SOURCE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)

        def dictionaryArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionaryArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionaryArgExprContext,i)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_sourceClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceClause" ):
                return visitor.visitSourceClause(self)
            else:
                return visitor.visitChildren(self)




    def sourceClause(self):

        localctx = ClickHouseParser.SourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_sourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(ClickHouseParser.SOURCE)
            self.state = 758
            self.match(ClickHouseParser.LPAREN)
            self.state = 759
            self.identifier()
            self.state = 760
            self.match(ClickHouseParser.LPAREN)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)) | (1 << (ClickHouseParser.DATABASES - 2)) | (1 << (ClickHouseParser.DATE - 2)) | (1 << (ClickHouseParser.DAY - 2)) | (1 << (ClickHouseParser.DEDUPLICATE - 2)) | (1 << (ClickHouseParser.DEFAULT - 2)) | (1 << (ClickHouseParser.DELAY - 2)) | (1 << (ClickHouseParser.DELETE - 2)) | (1 << (ClickHouseParser.DESC - 2)) | (1 << (ClickHouseParser.DESCENDING - 2)) | (1 << (ClickHouseParser.DESCRIBE - 2)) | (1 << (ClickHouseParser.DETACH - 2)) | (1 << (ClickHouseParser.DICTIONARIES - 2)) | (1 << (ClickHouseParser.DICTIONARY - 2)) | (1 << (ClickHouseParser.DISK - 2)) | (1 << (ClickHouseParser.DISTINCT - 2)) | (1 << (ClickHouseParser.DISTRIBUTED - 2)) | (1 << (ClickHouseParser.DROP - 2)) | (1 << (ClickHouseParser.ELSE - 2)) | (1 << (ClickHouseParser.END - 2)) | (1 << (ClickHouseParser.ENGINE - 2)) | (1 << (ClickHouseParser.EVENTS - 2)) | (1 << (ClickHouseParser.EXISTS - 2)) | (1 << (ClickHouseParser.EXPLAIN - 2)) | (1 << (ClickHouseParser.EXPRESSION - 2)) | (1 << (ClickHouseParser.EXTRACT - 2)) | (1 << (ClickHouseParser.FETCHES - 2)) | (1 << (ClickHouseParser.FINAL - 2)) | (1 << (ClickHouseParser.FIRST - 2)) | (1 << (ClickHouseParser.FLUSH - 2)) | (1 << (ClickHouseParser.FOLLOWING - 2)) | (1 << (ClickHouseParser.FOR - 2)) | (1 << (ClickHouseParser.FORMAT - 2)))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)) | (1 << (ClickHouseParser.LIMIT - 66)) | (1 << (ClickHouseParser.LIVE - 66)) | (1 << (ClickHouseParser.LOCAL - 66)) | (1 << (ClickHouseParser.LOGS - 66)) | (1 << (ClickHouseParser.MATERIALIZE - 66)) | (1 << (ClickHouseParser.MATERIALIZED - 66)) | (1 << (ClickHouseParser.MAX - 66)) | (1 << (ClickHouseParser.MERGES - 66)) | (1 << (ClickHouseParser.MIN - 66)) | (1 << (ClickHouseParser.MINUTE - 66)) | (1 << (ClickHouseParser.MODIFY - 66)) | (1 << (ClickHouseParser.MONTH - 66)) | (1 << (ClickHouseParser.MOVE - 66)) | (1 << (ClickHouseParser.MUTATION - 66)) | (1 << (ClickHouseParser.NO - 66)) | (1 << (ClickHouseParser.NOT - 66)) | (1 << (ClickHouseParser.NULLS - 66)) | (1 << (ClickHouseParser.OFFSET - 66)) | (1 << (ClickHouseParser.ON - 66)) | (1 << (ClickHouseParser.OPTIMIZE - 66)) | (1 << (ClickHouseParser.OR - 66)) | (1 << (ClickHouseParser.ORDER - 66)) | (1 << (ClickHouseParser.OUTER - 66)) | (1 << (ClickHouseParser.OUTFILE - 66)) | (1 << (ClickHouseParser.OVER - 66)) | (1 << (ClickHouseParser.PARTITION - 66)) | (1 << (ClickHouseParser.POPULATE - 66)) | (1 << (ClickHouseParser.PRECEDING - 66)) | (1 << (ClickHouseParser.PREWHERE - 66)) | (1 << (ClickHouseParser.PRIMARY - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)) | (1 << (ClickHouseParser.TIES - 131)) | (1 << (ClickHouseParser.TIMEOUT - 131)) | (1 << (ClickHouseParser.TIMESTAMP - 131)) | (1 << (ClickHouseParser.TO - 131)) | (1 << (ClickHouseParser.TOP - 131)) | (1 << (ClickHouseParser.TOTALS - 131)) | (1 << (ClickHouseParser.TRAILING - 131)) | (1 << (ClickHouseParser.TRIM - 131)) | (1 << (ClickHouseParser.TRUNCATE - 131)) | (1 << (ClickHouseParser.TTL - 131)) | (1 << (ClickHouseParser.TYPE - 131)) | (1 << (ClickHouseParser.UNBOUNDED - 131)) | (1 << (ClickHouseParser.UNION - 131)) | (1 << (ClickHouseParser.UPDATE - 131)) | (1 << (ClickHouseParser.USE - 131)) | (1 << (ClickHouseParser.USING - 131)) | (1 << (ClickHouseParser.UUID - 131)) | (1 << (ClickHouseParser.VALUES - 131)) | (1 << (ClickHouseParser.VIEW - 131)) | (1 << (ClickHouseParser.VOLUME - 131)) | (1 << (ClickHouseParser.WATCH - 131)) | (1 << (ClickHouseParser.WEEK - 131)) | (1 << (ClickHouseParser.WHEN - 131)) | (1 << (ClickHouseParser.WHERE - 131)) | (1 << (ClickHouseParser.WINDOW - 131)) | (1 << (ClickHouseParser.WITH - 131)) | (1 << (ClickHouseParser.YEAR - 131)) | (1 << (ClickHouseParser.JSON_FALSE - 131)) | (1 << (ClickHouseParser.JSON_TRUE - 131)) | (1 << (ClickHouseParser.IDENTIFIER - 131)))) != 0):
                self.state = 761
                self.dictionaryArgExpr()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 767
            self.match(ClickHouseParser.RPAREN)
            self.state = 768
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifetimeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIFETIME(self):
            return self.getToken(ClickHouseParser.LIFETIME, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.DECIMAL_LITERAL)
            else:
                return self.getToken(ClickHouseParser.DECIMAL_LITERAL, i)

        def MIN(self):
            return self.getToken(ClickHouseParser.MIN, 0)

        def MAX(self):
            return self.getToken(ClickHouseParser.MAX, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_lifetimeClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLifetimeClause" ):
                return visitor.visitLifetimeClause(self)
            else:
                return visitor.visitChildren(self)




    def lifetimeClause(self):

        localctx = ClickHouseParser.LifetimeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_lifetimeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(ClickHouseParser.LIFETIME)
            self.state = 771
            self.match(ClickHouseParser.LPAREN)
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.DECIMAL_LITERAL]:
                self.state = 772
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass
            elif token in [ClickHouseParser.MIN]:
                self.state = 773
                self.match(ClickHouseParser.MIN)
                self.state = 774
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                self.state = 775
                self.match(ClickHouseParser.MAX)
                self.state = 776
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass
            elif token in [ClickHouseParser.MAX]:
                self.state = 777
                self.match(ClickHouseParser.MAX)
                self.state = 778
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                self.state = 779
                self.match(ClickHouseParser.MIN)
                self.state = 780
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 783
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LayoutClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAYOUT(self):
            return self.getToken(ClickHouseParser.LAYOUT, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)

        def dictionaryArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionaryArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionaryArgExprContext,i)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_layoutClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayoutClause" ):
                return visitor.visitLayoutClause(self)
            else:
                return visitor.visitChildren(self)




    def layoutClause(self):

        localctx = ClickHouseParser.LayoutClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_layoutClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(ClickHouseParser.LAYOUT)
            self.state = 786
            self.match(ClickHouseParser.LPAREN)
            self.state = 787
            self.identifier()
            self.state = 788
            self.match(ClickHouseParser.LPAREN)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)) | (1 << (ClickHouseParser.DATABASES - 2)) | (1 << (ClickHouseParser.DATE - 2)) | (1 << (ClickHouseParser.DAY - 2)) | (1 << (ClickHouseParser.DEDUPLICATE - 2)) | (1 << (ClickHouseParser.DEFAULT - 2)) | (1 << (ClickHouseParser.DELAY - 2)) | (1 << (ClickHouseParser.DELETE - 2)) | (1 << (ClickHouseParser.DESC - 2)) | (1 << (ClickHouseParser.DESCENDING - 2)) | (1 << (ClickHouseParser.DESCRIBE - 2)) | (1 << (ClickHouseParser.DETACH - 2)) | (1 << (ClickHouseParser.DICTIONARIES - 2)) | (1 << (ClickHouseParser.DICTIONARY - 2)) | (1 << (ClickHouseParser.DISK - 2)) | (1 << (ClickHouseParser.DISTINCT - 2)) | (1 << (ClickHouseParser.DISTRIBUTED - 2)) | (1 << (ClickHouseParser.DROP - 2)) | (1 << (ClickHouseParser.ELSE - 2)) | (1 << (ClickHouseParser.END - 2)) | (1 << (ClickHouseParser.ENGINE - 2)) | (1 << (ClickHouseParser.EVENTS - 2)) | (1 << (ClickHouseParser.EXISTS - 2)) | (1 << (ClickHouseParser.EXPLAIN - 2)) | (1 << (ClickHouseParser.EXPRESSION - 2)) | (1 << (ClickHouseParser.EXTRACT - 2)) | (1 << (ClickHouseParser.FETCHES - 2)) | (1 << (ClickHouseParser.FINAL - 2)) | (1 << (ClickHouseParser.FIRST - 2)) | (1 << (ClickHouseParser.FLUSH - 2)) | (1 << (ClickHouseParser.FOLLOWING - 2)) | (1 << (ClickHouseParser.FOR - 2)) | (1 << (ClickHouseParser.FORMAT - 2)))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)) | (1 << (ClickHouseParser.LIMIT - 66)) | (1 << (ClickHouseParser.LIVE - 66)) | (1 << (ClickHouseParser.LOCAL - 66)) | (1 << (ClickHouseParser.LOGS - 66)) | (1 << (ClickHouseParser.MATERIALIZE - 66)) | (1 << (ClickHouseParser.MATERIALIZED - 66)) | (1 << (ClickHouseParser.MAX - 66)) | (1 << (ClickHouseParser.MERGES - 66)) | (1 << (ClickHouseParser.MIN - 66)) | (1 << (ClickHouseParser.MINUTE - 66)) | (1 << (ClickHouseParser.MODIFY - 66)) | (1 << (ClickHouseParser.MONTH - 66)) | (1 << (ClickHouseParser.MOVE - 66)) | (1 << (ClickHouseParser.MUTATION - 66)) | (1 << (ClickHouseParser.NO - 66)) | (1 << (ClickHouseParser.NOT - 66)) | (1 << (ClickHouseParser.NULLS - 66)) | (1 << (ClickHouseParser.OFFSET - 66)) | (1 << (ClickHouseParser.ON - 66)) | (1 << (ClickHouseParser.OPTIMIZE - 66)) | (1 << (ClickHouseParser.OR - 66)) | (1 << (ClickHouseParser.ORDER - 66)) | (1 << (ClickHouseParser.OUTER - 66)) | (1 << (ClickHouseParser.OUTFILE - 66)) | (1 << (ClickHouseParser.OVER - 66)) | (1 << (ClickHouseParser.PARTITION - 66)) | (1 << (ClickHouseParser.POPULATE - 66)) | (1 << (ClickHouseParser.PRECEDING - 66)) | (1 << (ClickHouseParser.PREWHERE - 66)) | (1 << (ClickHouseParser.PRIMARY - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)) | (1 << (ClickHouseParser.TIES - 131)) | (1 << (ClickHouseParser.TIMEOUT - 131)) | (1 << (ClickHouseParser.TIMESTAMP - 131)) | (1 << (ClickHouseParser.TO - 131)) | (1 << (ClickHouseParser.TOP - 131)) | (1 << (ClickHouseParser.TOTALS - 131)) | (1 << (ClickHouseParser.TRAILING - 131)) | (1 << (ClickHouseParser.TRIM - 131)) | (1 << (ClickHouseParser.TRUNCATE - 131)) | (1 << (ClickHouseParser.TTL - 131)) | (1 << (ClickHouseParser.TYPE - 131)) | (1 << (ClickHouseParser.UNBOUNDED - 131)) | (1 << (ClickHouseParser.UNION - 131)) | (1 << (ClickHouseParser.UPDATE - 131)) | (1 << (ClickHouseParser.USE - 131)) | (1 << (ClickHouseParser.USING - 131)) | (1 << (ClickHouseParser.UUID - 131)) | (1 << (ClickHouseParser.VALUES - 131)) | (1 << (ClickHouseParser.VIEW - 131)) | (1 << (ClickHouseParser.VOLUME - 131)) | (1 << (ClickHouseParser.WATCH - 131)) | (1 << (ClickHouseParser.WEEK - 131)) | (1 << (ClickHouseParser.WHEN - 131)) | (1 << (ClickHouseParser.WHERE - 131)) | (1 << (ClickHouseParser.WINDOW - 131)) | (1 << (ClickHouseParser.WITH - 131)) | (1 << (ClickHouseParser.YEAR - 131)) | (1 << (ClickHouseParser.JSON_FALSE - 131)) | (1 << (ClickHouseParser.JSON_TRUE - 131)) | (1 << (ClickHouseParser.IDENTIFIER - 131)))) != 0):
                self.state = 789
                self.dictionaryArgExpr()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 795
            self.match(ClickHouseParser.RPAREN)
            self.state = 796
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(ClickHouseParser.RANGE, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def MIN(self):
            return self.getToken(ClickHouseParser.MIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def MAX(self):
            return self.getToken(ClickHouseParser.MAX, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_rangeClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeClause" ):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = ClickHouseParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_rangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(ClickHouseParser.RANGE)
            self.state = 799
            self.match(ClickHouseParser.LPAREN)
            self.state = 810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.MIN]:
                self.state = 800
                self.match(ClickHouseParser.MIN)
                self.state = 801
                self.identifier()
                self.state = 802
                self.match(ClickHouseParser.MAX)
                self.state = 803
                self.identifier()
                pass
            elif token in [ClickHouseParser.MAX]:
                self.state = 805
                self.match(ClickHouseParser.MAX)
                self.state = 806
                self.identifier()
                self.state = 807
                self.match(ClickHouseParser.MIN)
                self.state = 808
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 812
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionarySettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(ClickHouseParser.SETTINGS, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingExprListContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionarySettingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionarySettingsClause" ):
                return visitor.visitDictionarySettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def dictionarySettingsClause(self):

        localctx = ClickHouseParser.DictionarySettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_dictionarySettingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(ClickHouseParser.SETTINGS)
            self.state = 815
            self.match(ClickHouseParser.LPAREN)
            self.state = 816
            self.settingExprList()
            self.state = 817
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ClickHouseParser.ON, 0)

        def CLUSTER(self):
            return self.getToken(ClickHouseParser.CLUSTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_clusterClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClusterClause" ):
                return visitor.visitClusterClause(self)
            else:
                return visitor.visitChildren(self)




    def clusterClause(self):

        localctx = ClickHouseParser.ClusterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_clusterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(ClickHouseParser.ON)
            self.state = 820
            self.match(ClickHouseParser.CLUSTER)
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.AFTER, ClickHouseParser.ALIAS, ClickHouseParser.ALL, ClickHouseParser.ALTER, ClickHouseParser.AND, ClickHouseParser.ANTI, ClickHouseParser.ANY, ClickHouseParser.ARRAY, ClickHouseParser.AS, ClickHouseParser.ASCENDING, ClickHouseParser.ASOF, ClickHouseParser.AST, ClickHouseParser.ASYNC, ClickHouseParser.ATTACH, ClickHouseParser.BETWEEN, ClickHouseParser.BOTH, ClickHouseParser.BY, ClickHouseParser.CASE, ClickHouseParser.CAST, ClickHouseParser.CHECK, ClickHouseParser.CLEAR, ClickHouseParser.CLUSTER, ClickHouseParser.CODEC, ClickHouseParser.COLLATE, ClickHouseParser.COLUMN, ClickHouseParser.COMMENT, ClickHouseParser.CONSTRAINT, ClickHouseParser.CREATE, ClickHouseParser.CROSS, ClickHouseParser.CUBE, ClickHouseParser.CURRENT, ClickHouseParser.DATABASE, ClickHouseParser.DATABASES, ClickHouseParser.DATE, ClickHouseParser.DAY, ClickHouseParser.DEDUPLICATE, ClickHouseParser.DEFAULT, ClickHouseParser.DELAY, ClickHouseParser.DELETE, ClickHouseParser.DESC, ClickHouseParser.DESCENDING, ClickHouseParser.DESCRIBE, ClickHouseParser.DETACH, ClickHouseParser.DICTIONARIES, ClickHouseParser.DICTIONARY, ClickHouseParser.DISK, ClickHouseParser.DISTINCT, ClickHouseParser.DISTRIBUTED, ClickHouseParser.DROP, ClickHouseParser.ELSE, ClickHouseParser.END, ClickHouseParser.ENGINE, ClickHouseParser.EVENTS, ClickHouseParser.EXISTS, ClickHouseParser.EXPLAIN, ClickHouseParser.EXPRESSION, ClickHouseParser.EXTRACT, ClickHouseParser.FETCHES, ClickHouseParser.FINAL, ClickHouseParser.FIRST, ClickHouseParser.FLUSH, ClickHouseParser.FOLLOWING, ClickHouseParser.FOR, ClickHouseParser.FORMAT, ClickHouseParser.FREEZE, ClickHouseParser.FROM, ClickHouseParser.FULL, ClickHouseParser.FUNCTION, ClickHouseParser.GLOBAL, ClickHouseParser.GRANULARITY, ClickHouseParser.GROUP, ClickHouseParser.HAVING, ClickHouseParser.HIERARCHICAL, ClickHouseParser.HOUR, ClickHouseParser.ID, ClickHouseParser.IF, ClickHouseParser.ILIKE, ClickHouseParser.IN, ClickHouseParser.INDEX, ClickHouseParser.INJECTIVE, ClickHouseParser.INNER, ClickHouseParser.INSERT, ClickHouseParser.INTERVAL, ClickHouseParser.INTO, ClickHouseParser.IS, ClickHouseParser.IS_OBJECT_ID, ClickHouseParser.JOIN, ClickHouseParser.KEY, ClickHouseParser.KILL, ClickHouseParser.LAST, ClickHouseParser.LAYOUT, ClickHouseParser.LEADING, ClickHouseParser.LEFT, ClickHouseParser.LIFETIME, ClickHouseParser.LIKE, ClickHouseParser.LIMIT, ClickHouseParser.LIVE, ClickHouseParser.LOCAL, ClickHouseParser.LOGS, ClickHouseParser.MATERIALIZE, ClickHouseParser.MATERIALIZED, ClickHouseParser.MAX, ClickHouseParser.MERGES, ClickHouseParser.MIN, ClickHouseParser.MINUTE, ClickHouseParser.MODIFY, ClickHouseParser.MONTH, ClickHouseParser.MOVE, ClickHouseParser.MUTATION, ClickHouseParser.NO, ClickHouseParser.NOT, ClickHouseParser.NULLS, ClickHouseParser.OFFSET, ClickHouseParser.ON, ClickHouseParser.OPTIMIZE, ClickHouseParser.OR, ClickHouseParser.ORDER, ClickHouseParser.OUTER, ClickHouseParser.OUTFILE, ClickHouseParser.OVER, ClickHouseParser.PARTITION, ClickHouseParser.POPULATE, ClickHouseParser.PRECEDING, ClickHouseParser.PREWHERE, ClickHouseParser.PRIMARY, ClickHouseParser.QUARTER, ClickHouseParser.RANGE, ClickHouseParser.RELOAD, ClickHouseParser.REMOVE, ClickHouseParser.RENAME, ClickHouseParser.REPLACE, ClickHouseParser.REPLICA, ClickHouseParser.REPLICATED, ClickHouseParser.RIGHT, ClickHouseParser.ROLLUP, ClickHouseParser.ROW, ClickHouseParser.ROWS, ClickHouseParser.SAMPLE, ClickHouseParser.SECOND, ClickHouseParser.SELECT, ClickHouseParser.SEMI, ClickHouseParser.SENDS, ClickHouseParser.SET, ClickHouseParser.SETTINGS, ClickHouseParser.SHOW, ClickHouseParser.SOURCE, ClickHouseParser.START, ClickHouseParser.STOP, ClickHouseParser.SUBSTRING, ClickHouseParser.SYNC, ClickHouseParser.SYNTAX, ClickHouseParser.SYSTEM, ClickHouseParser.TABLE, ClickHouseParser.TABLES, ClickHouseParser.TEMPORARY, ClickHouseParser.TEST, ClickHouseParser.THEN, ClickHouseParser.TIES, ClickHouseParser.TIMEOUT, ClickHouseParser.TIMESTAMP, ClickHouseParser.TO, ClickHouseParser.TOP, ClickHouseParser.TOTALS, ClickHouseParser.TRAILING, ClickHouseParser.TRIM, ClickHouseParser.TRUNCATE, ClickHouseParser.TTL, ClickHouseParser.TYPE, ClickHouseParser.UNBOUNDED, ClickHouseParser.UNION, ClickHouseParser.UPDATE, ClickHouseParser.USE, ClickHouseParser.USING, ClickHouseParser.UUID, ClickHouseParser.VALUES, ClickHouseParser.VIEW, ClickHouseParser.VOLUME, ClickHouseParser.WATCH, ClickHouseParser.WEEK, ClickHouseParser.WHEN, ClickHouseParser.WHERE, ClickHouseParser.WINDOW, ClickHouseParser.WITH, ClickHouseParser.YEAR, ClickHouseParser.JSON_FALSE, ClickHouseParser.JSON_TRUE, ClickHouseParser.IDENTIFIER]:
                self.state = 821
                self.identifier()
                pass
            elif token in [ClickHouseParser.STRING_LITERAL]:
                self.state = 822
                self.match(ClickHouseParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UUID(self):
            return self.getToken(ClickHouseParser.UUID, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_uuidClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidClause" ):
                return visitor.visitUuidClause(self)
            else:
                return visitor.visitChildren(self)




    def uuidClause(self):

        localctx = ClickHouseParser.UuidClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_uuidClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(ClickHouseParser.UUID)
            self.state = 826
            self.match(ClickHouseParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_destinationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDestinationClause" ):
                return visitor.visitDestinationClause(self)
            else:
                return visitor.visitChildren(self)




    def destinationClause(self):

        localctx = ClickHouseParser.DestinationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_destinationClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(ClickHouseParser.TO)
            self.state = 829
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_subqueryClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryClause" ):
                return visitor.visitSubqueryClause(self)
            else:
                return visitor.visitChildren(self)




    def subqueryClause(self):

        localctx = ClickHouseParser.SubqueryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_subqueryClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(ClickHouseParser.AS)
            self.state = 832
            self.selectUnionStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableSchemaClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SchemaAsTableClauseContext(TableSchemaClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableSchemaClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchemaAsTableClause" ):
                return visitor.visitSchemaAsTableClause(self)
            else:
                return visitor.visitChildren(self)


    class SchemaAsFunctionClauseContext(TableSchemaClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableSchemaClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchemaAsFunctionClause" ):
                return visitor.visitSchemaAsFunctionClause(self)
            else:
                return visitor.visitChildren(self)


    class SchemaDescriptionClauseContext(TableSchemaClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableSchemaClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def tableElementExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TableElementExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TableElementExprContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchemaDescriptionClause" ):
                return visitor.visitSchemaDescriptionClause(self)
            else:
                return visitor.visitChildren(self)



    def tableSchemaClause(self):

        localctx = ClickHouseParser.TableSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_tableSchemaClause)
        self._la = 0 # Token type
        try:
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.SchemaDescriptionClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.match(ClickHouseParser.LPAREN)
                self.state = 835
                self.tableElementExpr()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ClickHouseParser.COMMA:
                    self.state = 836
                    self.match(ClickHouseParser.COMMA)
                    self.state = 837
                    self.tableElementExpr()
                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 843
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.SchemaAsTableClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.match(ClickHouseParser.AS)
                self.state = 846
                self.tableIdentifier()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.SchemaAsFunctionClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                self.match(ClickHouseParser.AS)
                self.state = 848
                self.tableFunctionExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def engineExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineExprContext,0)


        def orderByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.OrderByClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.OrderByClauseContext,i)


        def partitionByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.PartitionByClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.PartitionByClauseContext,i)


        def primaryKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.PrimaryKeyClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.PrimaryKeyClauseContext,i)


        def sampleByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SampleByClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SampleByClauseContext,i)


        def ttlClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TtlClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TtlClauseContext,i)


        def settingsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SettingsClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SettingsClauseContext,i)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_engineClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEngineClause" ):
                return visitor.visitEngineClause(self)
            else:
                return visitor.visitChildren(self)




    def engineClause(self):

        localctx = ClickHouseParser.EngineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_engineClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.engineExpr()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (ClickHouseParser.ORDER - 121)) | (1 << (ClickHouseParser.PARTITION - 121)) | (1 << (ClickHouseParser.PRIMARY - 121)) | (1 << (ClickHouseParser.SAMPLE - 121)) | (1 << (ClickHouseParser.SETTINGS - 121)) | (1 << (ClickHouseParser.TTL - 121)))) != 0):
                self.state = 858
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.ORDER]:
                    self.state = 852
                    self.orderByClause()
                    pass
                elif token in [ClickHouseParser.PARTITION]:
                    self.state = 853
                    self.partitionByClause()
                    pass
                elif token in [ClickHouseParser.PRIMARY]:
                    self.state = 854
                    self.primaryKeyClause()
                    pass
                elif token in [ClickHouseParser.SAMPLE]:
                    self.state = 855
                    self.sampleByClause()
                    pass
                elif token in [ClickHouseParser.TTL]:
                    self.state = 856
                    self.ttlClause()
                    pass
                elif token in [ClickHouseParser.SETTINGS]:
                    self.state = 857
                    self.settingsClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_partitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionByClause" ):
                return visitor.visitPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionByClause(self):

        localctx = ClickHouseParser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_partitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(ClickHouseParser.PARTITION)
            self.state = 864
            self.match(ClickHouseParser.BY)
            self.state = 865
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(ClickHouseParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_primaryKeyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyClause" ):
                return visitor.visitPrimaryKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def primaryKeyClause(self):

        localctx = ClickHouseParser.PrimaryKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_primaryKeyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(ClickHouseParser.PRIMARY)
            self.state = 868
            self.match(ClickHouseParser.KEY)
            self.state = 869
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(ClickHouseParser.SAMPLE, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_sampleByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByClause" ):
                return visitor.visitSampleByClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleByClause(self):

        localctx = ClickHouseParser.SampleByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sampleByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(ClickHouseParser.SAMPLE)
            self.state = 872
            self.match(ClickHouseParser.BY)
            self.state = 873
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TtlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def ttlExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TtlExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TtlExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ttlClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTtlClause" ):
                return visitor.visitTtlClause(self)
            else:
                return visitor.visitChildren(self)




    def ttlClause(self):

        localctx = ClickHouseParser.TtlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ttlClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ClickHouseParser.TTL)
            self.state = 876
            self.ttlExpr()
            self.state = 881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 877
                    self.match(ClickHouseParser.COMMA)
                    self.state = 878
                    self.ttlExpr() 
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINE(self):
            return self.getToken(ClickHouseParser.ENGINE, 0)

        def identifierOrNull(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierOrNullContext,0)


        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_engineExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEngineExpr" ):
                return visitor.visitEngineExpr(self)
            else:
                return visitor.visitChildren(self)




    def engineExpr(self):

        localctx = ClickHouseParser.EngineExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_engineExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(ClickHouseParser.ENGINE)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.EQ_SINGLE:
                self.state = 885
                self.match(ClickHouseParser.EQ_SINGLE)


            self.state = 888
            self.identifierOrNull()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.LPAREN:
                self.state = 889
                self.match(ClickHouseParser.LPAREN)
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 890
                    self.columnExprList()


                self.state = 893
                self.match(ClickHouseParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableElementExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableElementExprProjectionContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def tableProjectionDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableProjectionDfntContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElementExprProjection" ):
                return visitor.visitTableElementExprProjection(self)
            else:
                return visitor.visitChildren(self)


    class TableElementExprConstraintContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONSTRAINT(self):
            return self.getToken(ClickHouseParser.CONSTRAINT, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def CHECK(self):
            return self.getToken(ClickHouseParser.CHECK, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElementExprConstraint" ):
                return visitor.visitTableElementExprConstraint(self)
            else:
                return visitor.visitChildren(self)


    class TableElementExprColumnContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableColumnDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnDfntContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElementExprColumn" ):
                return visitor.visitTableElementExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class TableElementExprIndexContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def tableIndexDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIndexDfntContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElementExprIndex" ):
                return visitor.visitTableElementExprIndex(self)
            else:
                return visitor.visitChildren(self)



    def tableElementExpr(self):

        localctx = ClickHouseParser.TableElementExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_tableElementExpr)
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.TableElementExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.tableColumnDfnt()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.TableElementExprConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(ClickHouseParser.CONSTRAINT)
                self.state = 898
                self.identifier()
                self.state = 899
                self.match(ClickHouseParser.CHECK)
                self.state = 900
                self.columnExpr(0)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.TableElementExprIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.match(ClickHouseParser.INDEX)
                self.state = 903
                self.tableIndexDfnt()
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.TableElementExprProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 904
                self.match(ClickHouseParser.PROJECTION)
                self.state = 905
                self.tableProjectionDfnt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableColumnDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)


        def tableColumnPropertyExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnPropertyExprContext,0)


        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def codecExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.CodecExprContext,0)


        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableColumnDfnt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableColumnDfnt" ):
                return visitor.visitTableColumnDfnt(self)
            else:
                return visitor.visitChildren(self)




    def tableColumnDfnt(self):

        localctx = ClickHouseParser.TableColumnDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tableColumnDfnt)
        self._la = 0 # Token type
        try:
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.nestedIdentifier()
                self.state = 909
                self.columnTypeExpr()
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ALIAS or _la==ClickHouseParser.DEFAULT or _la==ClickHouseParser.MATERIALIZED:
                    self.state = 910
                    self.tableColumnPropertyExpr()


                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.COMMENT:
                    self.state = 913
                    self.match(ClickHouseParser.COMMENT)
                    self.state = 914
                    self.match(ClickHouseParser.STRING_LITERAL)


                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.CODEC:
                    self.state = 917
                    self.codecExpr()


                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.TTL:
                    self.state = 920
                    self.match(ClickHouseParser.TTL)
                    self.state = 921
                    self.columnExpr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.nestedIdentifier()
                self.state = 926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 925
                    self.columnTypeExpr()


                self.state = 928
                self.tableColumnPropertyExpr()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.COMMENT:
                    self.state = 929
                    self.match(ClickHouseParser.COMMENT)
                    self.state = 930
                    self.match(ClickHouseParser.STRING_LITERAL)


                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.CODEC:
                    self.state = 933
                    self.codecExpr()


                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.TTL:
                    self.state = 936
                    self.match(ClickHouseParser.TTL)
                    self.state = 937
                    self.columnExpr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableColumnPropertyExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def DEFAULT(self):
            return self.getToken(ClickHouseParser.DEFAULT, 0)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)

        def ALIAS(self):
            return self.getToken(ClickHouseParser.ALIAS, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableColumnPropertyExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableColumnPropertyExpr" ):
                return visitor.visitTableColumnPropertyExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableColumnPropertyExpr(self):

        localctx = ClickHouseParser.TableColumnPropertyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableColumnPropertyExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            _la = self._input.LA(1)
            if not(_la==ClickHouseParser.ALIAS or _la==ClickHouseParser.DEFAULT or _la==ClickHouseParser.MATERIALIZED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 943
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def TYPE(self):
            return self.getToken(ClickHouseParser.TYPE, 0)

        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)


        def GRANULARITY(self):
            return self.getToken(ClickHouseParser.GRANULARITY, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableIndexDfnt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIndexDfnt" ):
                return visitor.visitTableIndexDfnt(self)
            else:
                return visitor.visitChildren(self)




    def tableIndexDfnt(self):

        localctx = ClickHouseParser.TableIndexDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_tableIndexDfnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.nestedIdentifier()
            self.state = 946
            self.columnExpr(0)
            self.state = 947
            self.match(ClickHouseParser.TYPE)
            self.state = 948
            self.columnTypeExpr()
            self.state = 949
            self.match(ClickHouseParser.GRANULARITY)
            self.state = 950
            self.match(ClickHouseParser.DECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProjectionDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def projectionSelectStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ProjectionSelectStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableProjectionDfnt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProjectionDfnt" ):
                return visitor.visitTableProjectionDfnt(self)
            else:
                return visitor.visitChildren(self)




    def tableProjectionDfnt(self):

        localctx = ClickHouseParser.TableProjectionDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tableProjectionDfnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.nestedIdentifier()
            self.state = 953
            self.projectionSelectStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodecExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CODEC(self):
            return self.getToken(ClickHouseParser.CODEC, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def codecArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.CodecArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.CodecArgExprContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_codecExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodecExpr" ):
                return visitor.visitCodecExpr(self)
            else:
                return visitor.visitChildren(self)




    def codecExpr(self):

        localctx = ClickHouseParser.CodecExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_codecExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(ClickHouseParser.CODEC)
            self.state = 956
            self.match(ClickHouseParser.LPAREN)
            self.state = 957
            self.codecArgExpr()
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 958
                self.match(ClickHouseParser.COMMA)
                self.state = 959
                self.codecArgExpr()
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 965
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodecArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_codecArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodecArgExpr" ):
                return visitor.visitCodecArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def codecArgExpr(self):

        localctx = ClickHouseParser.CodecArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_codecArgExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.identifier()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.LPAREN:
                self.state = 968
                self.match(ClickHouseParser.LPAREN)
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 969
                    self.columnExprList()


                self.state = 972
                self.match(ClickHouseParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TtlExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def DELETE(self):
            return self.getToken(ClickHouseParser.DELETE, 0)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)

        def DISK(self):
            return self.getToken(ClickHouseParser.DISK, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def VOLUME(self):
            return self.getToken(ClickHouseParser.VOLUME, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ttlExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTtlExpr" ):
                return visitor.visitTtlExpr(self)
            else:
                return visitor.visitChildren(self)




    def ttlExpr(self):

        localctx = ClickHouseParser.TtlExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ttlExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.columnExpr(0)
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 976
                self.match(ClickHouseParser.DELETE)

            elif la_ == 2:
                self.state = 977
                self.match(ClickHouseParser.TO)
                self.state = 978
                self.match(ClickHouseParser.DISK)
                self.state = 979
                self.match(ClickHouseParser.STRING_LITERAL)

            elif la_ == 3:
                self.state = 980
                self.match(ClickHouseParser.TO)
                self.state = 981
                self.match(ClickHouseParser.VOLUME)
                self.state = 982
                self.match(ClickHouseParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableExprContext,0)


        def DESCRIBE(self):
            return self.getToken(ClickHouseParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(ClickHouseParser.DESC, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_describeStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeStmt" ):
                return visitor.visitDescribeStmt(self)
            else:
                return visitor.visitChildren(self)




    def describeStmt(self):

        localctx = ClickHouseParser.DescribeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_describeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            _la = self._input.LA(1)
            if not(_la==ClickHouseParser.DESC or _la==ClickHouseParser.DESCRIBE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 986
                self.match(ClickHouseParser.TABLE)


            self.state = 989
            self.tableExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dropStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DropDatabaseStmtContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)
        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabaseStmt" ):
                return visitor.visitDropDatabaseStmt(self)
            else:
                return visitor.visitChildren(self)


    class DropTableStmtContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)
        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def NO(self):
            return self.getToken(ClickHouseParser.NO, 0)
        def DELAY(self):
            return self.getToken(ClickHouseParser.DELAY, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableStmt" ):
                return visitor.visitDropTableStmt(self)
            else:
                return visitor.visitChildren(self)



    def dropStmt(self):

        localctx = ClickHouseParser.DropStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dropStmt)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.DropDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.DETACH or _la==ClickHouseParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                self.match(ClickHouseParser.DATABASE)
                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.match(ClickHouseParser.IF)
                    self.state = 994
                    self.match(ClickHouseParser.EXISTS)


                self.state = 997
                self.databaseIdentifier()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 998
                    self.clusterClause()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.DropTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.DETACH or _la==ClickHouseParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1008
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.DICTIONARY]:
                    self.state = 1002
                    self.match(ClickHouseParser.DICTIONARY)
                    pass
                elif token in [ClickHouseParser.TABLE, ClickHouseParser.TEMPORARY]:
                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.TEMPORARY:
                        self.state = 1003
                        self.match(ClickHouseParser.TEMPORARY)


                    self.state = 1006
                    self.match(ClickHouseParser.TABLE)
                    pass
                elif token in [ClickHouseParser.VIEW]:
                    self.state = 1007
                    self.match(ClickHouseParser.VIEW)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self.match(ClickHouseParser.IF)
                    self.state = 1011
                    self.match(ClickHouseParser.EXISTS)


                self.state = 1014
                self.tableIdentifier()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ON:
                    self.state = 1015
                    self.clusterClause()


                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.NO:
                    self.state = 1018
                    self.match(ClickHouseParser.NO)
                    self.state = 1019
                    self.match(ClickHouseParser.DELAY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistsStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_existsStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExistsTableStmtContext(ExistsStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExistsStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistsTableStmt" ):
                return visitor.visitExistsTableStmt(self)
            else:
                return visitor.visitChildren(self)


    class ExistsDatabaseStmtContext(ExistsStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExistsStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistsDatabaseStmt" ):
                return visitor.visitExistsDatabaseStmt(self)
            else:
                return visitor.visitChildren(self)



    def existsStmt(self):

        localctx = ClickHouseParser.ExistsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_existsStmt)
        self._la = 0 # Token type
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ExistsDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(ClickHouseParser.EXISTS)
                self.state = 1025
                self.match(ClickHouseParser.DATABASE)
                self.state = 1026
                self.databaseIdentifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ExistsTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.match(ClickHouseParser.EXISTS)
                self.state = 1034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1028
                    self.match(ClickHouseParser.DICTIONARY)

                elif la_ == 2:
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.TEMPORARY:
                        self.state = 1029
                        self.match(ClickHouseParser.TEMPORARY)


                    self.state = 1032
                    self.match(ClickHouseParser.TABLE)

                elif la_ == 3:
                    self.state = 1033
                    self.match(ClickHouseParser.VIEW)


                self.state = 1036
                self.tableIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_explainStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainSyntaxStmtContext(ExplainStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExplainStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(ClickHouseParser.EXPLAIN, 0)
        def SYNTAX(self):
            return self.getToken(ClickHouseParser.SYNTAX, 0)
        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainSyntaxStmt" ):
                return visitor.visitExplainSyntaxStmt(self)
            else:
                return visitor.visitChildren(self)


    class ExplainASTStmtContext(ExplainStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExplainStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(ClickHouseParser.EXPLAIN, 0)
        def AST(self):
            return self.getToken(ClickHouseParser.AST, 0)
        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainASTStmt" ):
                return visitor.visitExplainASTStmt(self)
            else:
                return visitor.visitChildren(self)



    def explainStmt(self):

        localctx = ClickHouseParser.ExplainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_explainStmt)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ExplainASTStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(ClickHouseParser.EXPLAIN)
                self.state = 1040
                self.match(ClickHouseParser.AST)
                self.state = 1041
                self.query()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ExplainSyntaxStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.match(ClickHouseParser.EXPLAIN)
                self.state = 1043
                self.match(ClickHouseParser.SYNTAX)
                self.state = 1044
                self.query()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(ClickHouseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(ClickHouseParser.INTO, 0)

        def dataClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DataClauseContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def FUNCTION(self):
            return self.getToken(ClickHouseParser.FUNCTION, 0)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def columnsClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnsClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_insertStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStmt" ):
                return visitor.visitInsertStmt(self)
            else:
                return visitor.visitChildren(self)




    def insertStmt(self):

        localctx = ClickHouseParser.InsertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_insertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(ClickHouseParser.INSERT)
            self.state = 1048
            self.match(ClickHouseParser.INTO)
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.match(ClickHouseParser.TABLE)


            self.state = 1055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1052
                self.tableIdentifier()
                pass

            elif la_ == 2:
                self.state = 1053
                self.match(ClickHouseParser.FUNCTION)
                self.state = 1054
                self.tableFunctionExpr()
                pass


            self.state = 1058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1057
                self.columnsClause()


            self.state = 1060
            self.dataClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def nestedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NestedIdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsClause" ):
                return visitor.visitColumnsClause(self)
            else:
                return visitor.visitChildren(self)




    def columnsClause(self):

        localctx = ClickHouseParser.ColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_columnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(ClickHouseParser.LPAREN)
            self.state = 1063
            self.nestedIdentifier()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1064
                self.match(ClickHouseParser.COMMA)
                self.state = 1065
                self.nestedIdentifier()
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1071
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dataClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DataClauseValuesContext(DataClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DataClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(ClickHouseParser.VALUES, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataClauseValues" ):
                return visitor.visitDataClauseValues(self)
            else:
                return visitor.visitChildren(self)


    class DataClauseFormatContext(DataClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DataClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(ClickHouseParser.FORMAT, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataClauseFormat" ):
                return visitor.visitDataClauseFormat(self)
            else:
                return visitor.visitChildren(self)


    class DataClauseSelectContext(DataClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DataClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataClauseSelect" ):
                return visitor.visitDataClauseSelect(self)
            else:
                return visitor.visitChildren(self)



    def dataClause(self):

        localctx = ClickHouseParser.DataClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_dataClause)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.FORMAT]:
                localctx = ClickHouseParser.DataClauseFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.match(ClickHouseParser.FORMAT)
                self.state = 1074
                self.identifier()
                pass
            elif token in [ClickHouseParser.VALUES]:
                localctx = ClickHouseParser.DataClauseValuesContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.match(ClickHouseParser.VALUES)
                pass
            elif token in [ClickHouseParser.SELECT, ClickHouseParser.WITH, ClickHouseParser.LPAREN]:
                localctx = ClickHouseParser.DataClauseSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1076
                self.selectUnionStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_killStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class KillMutationStmtContext(KillStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.KillStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KILL(self):
            return self.getToken(ClickHouseParser.KILL, 0)
        def MUTATION(self):
            return self.getToken(ClickHouseParser.MUTATION, 0)
        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def SYNC(self):
            return self.getToken(ClickHouseParser.SYNC, 0)
        def ASYNC(self):
            return self.getToken(ClickHouseParser.ASYNC, 0)
        def TEST(self):
            return self.getToken(ClickHouseParser.TEST, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKillMutationStmt" ):
                return visitor.visitKillMutationStmt(self)
            else:
                return visitor.visitChildren(self)



    def killStmt(self):

        localctx = ClickHouseParser.KillStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_killStmt)
        self._la = 0 # Token type
        try:
            localctx = ClickHouseParser.KillMutationStmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(ClickHouseParser.KILL)
            self.state = 1080
            self.match(ClickHouseParser.MUTATION)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ON:
                self.state = 1081
                self.clusterClause()


            self.state = 1084
            self.whereClause()
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ASYNC or _la==ClickHouseParser.SYNC or _la==ClickHouseParser.TEST:
                self.state = 1085
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.ASYNC or _la==ClickHouseParser.SYNC or _la==ClickHouseParser.TEST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIMIZE(self):
            return self.getToken(ClickHouseParser.OPTIMIZE, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def FINAL(self):
            return self.getToken(ClickHouseParser.FINAL, 0)

        def DEDUPLICATE(self):
            return self.getToken(ClickHouseParser.DEDUPLICATE, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_optimizeStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimizeStmt" ):
                return visitor.visitOptimizeStmt(self)
            else:
                return visitor.visitChildren(self)




    def optimizeStmt(self):

        localctx = ClickHouseParser.OptimizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_optimizeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(ClickHouseParser.OPTIMIZE)
            self.state = 1089
            self.match(ClickHouseParser.TABLE)
            self.state = 1090
            self.tableIdentifier()
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ON:
                self.state = 1091
                self.clusterClause()


            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.PARTITION:
                self.state = 1094
                self.partitionClause()


            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.FINAL:
                self.state = 1097
                self.match(ClickHouseParser.FINAL)


            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.DEDUPLICATE:
                self.state = 1100
                self.match(ClickHouseParser.DEDUPLICATE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(ClickHouseParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,i)


        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.TO)
            else:
                return self.getToken(ClickHouseParser.TO, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_renameStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameStmt" ):
                return visitor.visitRenameStmt(self)
            else:
                return visitor.visitChildren(self)




    def renameStmt(self):

        localctx = ClickHouseParser.RenameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_renameStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(ClickHouseParser.RENAME)
            self.state = 1104
            self.match(ClickHouseParser.TABLE)
            self.state = 1105
            self.tableIdentifier()
            self.state = 1106
            self.match(ClickHouseParser.TO)
            self.state = 1107
            self.tableIdentifier()
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1108
                self.match(ClickHouseParser.COMMA)
                self.state = 1109
                self.tableIdentifier()
                self.state = 1110
                self.match(ClickHouseParser.TO)
                self.state = 1111
                self.tableIdentifier()
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ON:
                self.state = 1118
                self.clusterClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionSelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def SELECT(self):
            return self.getToken(ClickHouseParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def withClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WithClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.GroupByClauseContext,0)


        def projectionOrderByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ProjectionOrderByClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_projectionSelectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionSelectStmt" ):
                return visitor.visitProjectionSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def projectionSelectStmt(self):

        localctx = ClickHouseParser.ProjectionSelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_projectionSelectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(ClickHouseParser.LPAREN)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.WITH:
                self.state = 1122
                self.withClause()


            self.state = 1125
            self.match(ClickHouseParser.SELECT)
            self.state = 1126
            self.columnExprList()
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.GROUP:
                self.state = 1127
                self.groupByClause()


            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ORDER:
                self.state = 1130
                self.projectionOrderByClause()


            self.state = 1133
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.UNION)
            else:
                return self.getToken(ClickHouseParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.ALL)
            else:
                return self.getToken(ClickHouseParser.ALL, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = ClickHouseParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.selectStmtWithParens()
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.UNION:
                self.state = 1136
                self.match(ClickHouseParser.UNION)
                self.state = 1137
                self.match(ClickHouseParser.ALL)
                self.state = 1138
                self.selectStmtWithParens()
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = ClickHouseParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectStmtWithParens)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.SELECT, ClickHouseParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.selectStmt()
                pass
            elif token in [ClickHouseParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.match(ClickHouseParser.LPAREN)
                self.state = 1146
                self.selectUnionStmt()
                self.state = 1147
                self.match(ClickHouseParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ClickHouseParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WithClauseContext,0)


        def DISTINCT(self):
            return self.getToken(ClickHouseParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TopClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(ClickHouseParser.FromClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ArrayJoinClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WindowClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PrewhereClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(ClickHouseParser.HavingClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderByClauseContext,0)


        def limitByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingsClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = ClickHouseParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.WITH:
                self.state = 1151
                self.withClause()


            self.state = 1154
            self.match(ClickHouseParser.SELECT)
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1155
                self.match(ClickHouseParser.DISTINCT)


            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1158
                self.topClause()


            self.state = 1161
            self.columnExprList()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.FROM:
                self.state = 1162
                self.fromClause()


            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ARRAY or _la==ClickHouseParser.INNER or _la==ClickHouseParser.LEFT:
                self.state = 1165
                self.arrayJoinClause()


            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.WINDOW:
                self.state = 1168
                self.windowClause()


            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.PREWHERE:
                self.state = 1171
                self.prewhereClause()


            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.WHERE:
                self.state = 1174
                self.whereClause()


            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.GROUP:
                self.state = 1177
                self.groupByClause()


            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.HAVING:
                self.state = 1180
                self.havingClause()


            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ORDER:
                self.state = 1183
                self.orderByClause()


            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1186
                self.limitByClause()


            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.LIMIT:
                self.state = 1189
                self.limitClause()


            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.SETTINGS:
                self.state = 1192
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.WithExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = ClickHouseParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(ClickHouseParser.WITH)
            self.state = 1196
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(ClickHouseParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def TIES(self):
            return self.getToken(ClickHouseParser.TIES, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = ClickHouseParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(ClickHouseParser.TOP)
            self.state = 1199
            self.match(ClickHouseParser.DECIMAL_LITERAL)
            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1200
                self.match(ClickHouseParser.WITH)
                self.state = 1201
                self.match(ClickHouseParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = ClickHouseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(ClickHouseParser.FROM)
            self.state = 1205
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(ClickHouseParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(ClickHouseParser.LEFT, 0)

        def INNER(self):
            return self.getToken(ClickHouseParser.INNER, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = ClickHouseParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.INNER or _la==ClickHouseParser.LEFT:
                self.state = 1207
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.INNER or _la==ClickHouseParser.LEFT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1210
            self.match(ClickHouseParser.ARRAY)
            self.state = 1211
            self.match(ClickHouseParser.JOIN)
            self.state = 1212
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(ClickHouseParser.WINDOW, 0)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def windowExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.WindowExprContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = ClickHouseParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(ClickHouseParser.WINDOW)
            self.state = 1215
            self.identifier()
            self.state = 1216
            self.match(ClickHouseParser.AS)
            self.state = 1217
            self.match(ClickHouseParser.LPAREN)
            self.state = 1218
            self.windowExpr()
            self.state = 1219
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(ClickHouseParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = ClickHouseParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(ClickHouseParser.PREWHERE)
            self.state = 1222
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(ClickHouseParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = ClickHouseParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(ClickHouseParser.WHERE)
            self.state = 1225
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ClickHouseParser.GROUP, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(ClickHouseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(ClickHouseParser.ROLLUP, 0)

        def groupByRollupClause(self):
            return self.getTypedRuleContext(ClickHouseParser.GroupByRollupClauseContext,0)


        def groupByTotalsClause(self):
            return self.getTypedRuleContext(ClickHouseParser.GroupByTotalsClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = ClickHouseParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(ClickHouseParser.GROUP)
            self.state = 1228
            self.match(ClickHouseParser.BY)
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1229
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.CUBE or _la==ClickHouseParser.ROLLUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1230
                self.match(ClickHouseParser.LPAREN)
                self.state = 1231
                self.columnExprList()
                self.state = 1232
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 1234
                self.columnExprList()
                pass


            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1237
                self.groupByRollupClause()


            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.WITH:
                self.state = 1240
                self.groupByTotalsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByRollupClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def CUBE(self):
            return self.getToken(ClickHouseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(ClickHouseParser.ROLLUP, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_groupByRollupClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByRollupClause" ):
                return visitor.visitGroupByRollupClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByRollupClause(self):

        localctx = ClickHouseParser.GroupByRollupClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_groupByRollupClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(ClickHouseParser.WITH)
            self.state = 1244
            _la = self._input.LA(1)
            if not(_la==ClickHouseParser.CUBE or _la==ClickHouseParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByTotalsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def TOTALS(self):
            return self.getToken(ClickHouseParser.TOTALS, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_groupByTotalsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByTotalsClause" ):
                return visitor.visitGroupByTotalsClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByTotalsClause(self):

        localctx = ClickHouseParser.GroupByTotalsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_groupByTotalsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(ClickHouseParser.WITH)
            self.state = 1247
            self.match(ClickHouseParser.TOTALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(ClickHouseParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = ClickHouseParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.match(ClickHouseParser.HAVING)
            self.state = 1250
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = ClickHouseParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(ClickHouseParser.ORDER)
            self.state = 1253
            self.match(ClickHouseParser.BY)
            self.state = 1254
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = ClickHouseParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(ClickHouseParser.ORDER)
            self.state = 1257
            self.match(ClickHouseParser.BY)
            self.state = 1258
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitExprContext,0)


        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_limitByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitByClause" ):
                return visitor.visitLimitByClause(self)
            else:
                return visitor.visitChildren(self)




    def limitByClause(self):

        localctx = ClickHouseParser.LimitByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_limitByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(ClickHouseParser.LIMIT)
            self.state = 1261
            self.limitExpr()
            self.state = 1262
            self.match(ClickHouseParser.BY)
            self.state = 1263
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitExprContext,0)


        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def TIES(self):
            return self.getToken(ClickHouseParser.TIES, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_limitClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = ClickHouseParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_limitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(ClickHouseParser.LIMIT)
            self.state = 1266
            self.limitExpr()
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.WITH:
                self.state = 1267
                self.match(ClickHouseParser.WITH)
                self.state = 1268
                self.match(ClickHouseParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(ClickHouseParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = ClickHouseParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(ClickHouseParser.SETTINGS)
            self.state = 1272
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.WithExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = ClickHouseParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.withExpr()
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1275
                self.match(ClickHouseParser.COMMA)
                self.state = 1276
                self.withExpr()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_withExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExpr" ):
                return visitor.visitWithExpr(self)
            else:
                return visitor.visitChildren(self)




    def withExpr(self):

        localctx = ClickHouseParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_withExpr)
        try:
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1282
                self.identifier()
                self.state = 1283
                self.match(ClickHouseParser.AS)
                self.state = 1284
                self.match(ClickHouseParser.LPAREN)
                self.state = 1285
                self.selectUnionStmt()
                self.state = 1286
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1288
                self.columnExpr(0)
                self.state = 1289
                self.match(ClickHouseParser.AS)
                self.state = 1290
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinOpContext,0)

        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)
        def LOCAL(self):
            return self.getToken(ClickHouseParser.LOCAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(ClickHouseParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClickHouseParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1295
                self.tableExpr(0)
                self.state = 1297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1296
                    self.match(ClickHouseParser.FINAL)


                self.state = 1300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1299
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1302
                self.match(ClickHouseParser.LPAREN)
                self.state = 1303
                self.joinExpr(0)
                self.state = 1304
                self.match(ClickHouseParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1323
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        localctx = ClickHouseParser.JoinExprCrossOpContext(self, ClickHouseParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 1308
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1309
                        self.joinOpCross()
                        self.state = 1310
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = ClickHouseParser.JoinExprOpContext(self, ClickHouseParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 1312
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ClickHouseParser.GLOBAL or _la==ClickHouseParser.LOCAL:
                            self.state = 1313
                            _la = self._input.LA(1)
                            if not(_la==ClickHouseParser.GLOBAL or _la==ClickHouseParser.LOCAL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1317
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (ClickHouseParser.FULL - 68)) | (1 << (ClickHouseParser.INNER - 68)) | (1 << (ClickHouseParser.LEFT - 68)))) != 0) or _la==ClickHouseParser.RIGHT or _la==ClickHouseParser.SEMI:
                            self.state = 1316
                            self.joinOp()


                        self.state = 1319
                        self.match(ClickHouseParser.JOIN)
                        self.state = 1320
                        self.joinExpr(0)
                        self.state = 1321
                        self.joinConstraintClause()
                        pass

             
                self.state = 1327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(ClickHouseParser.FULL, 0)
        def OUTER(self):
            return self.getToken(ClickHouseParser.OUTER, 0)
        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)
        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(ClickHouseParser.INNER, 0)
        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)
        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)
        def ASOF(self):
            return self.getToken(ClickHouseParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(ClickHouseParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(ClickHouseParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(ClickHouseParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(ClickHouseParser.SEMI, 0)
        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)
        def ANTI(self):
            return self.getToken(ClickHouseParser.ANTI, 0)
        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)
        def ASOF(self):
            return self.getToken(ClickHouseParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = ClickHouseParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1337
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0):
                        self.state = 1328
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1331
                    self.match(ClickHouseParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 1332
                    self.match(ClickHouseParser.INNER)
                    self.state = 1334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0):
                        self.state = 1333
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 1336
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0) or _la==ClickHouseParser.SEMI:
                        self.state = 1339
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0) or _la==ClickHouseParser.SEMI):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1342
                    _la = self._input.LA(1)
                    if not(_la==ClickHouseParser.LEFT or _la==ClickHouseParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.OUTER:
                        self.state = 1343
                        self.match(ClickHouseParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 1346
                    _la = self._input.LA(1)
                    if not(_la==ClickHouseParser.LEFT or _la==ClickHouseParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.OUTER:
                        self.state = 1347
                        self.match(ClickHouseParser.OUTER)


                    self.state = 1351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0) or _la==ClickHouseParser.SEMI:
                        self.state = 1350
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) != 0) or _la==ClickHouseParser.SEMI):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = ClickHouseParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.ALL or _la==ClickHouseParser.ANY:
                        self.state = 1355
                        _la = self._input.LA(1)
                        if not(_la==ClickHouseParser.ALL or _la==ClickHouseParser.ANY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1358
                    self.match(ClickHouseParser.FULL)
                    self.state = 1360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.OUTER:
                        self.state = 1359
                        self.match(ClickHouseParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 1362
                    self.match(ClickHouseParser.FULL)
                    self.state = 1364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.OUTER:
                        self.state = 1363
                        self.match(ClickHouseParser.OUTER)


                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.ALL or _la==ClickHouseParser.ANY:
                        self.state = 1366
                        _la = self._input.LA(1)
                        if not(_la==ClickHouseParser.ALL or _la==ClickHouseParser.ANY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(ClickHouseParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)

        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(ClickHouseParser.LOCAL, 0)

        def COMMA(self):
            return self.getToken(ClickHouseParser.COMMA, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = ClickHouseParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_joinOpCross)
        self._la = 0 # Token type
        try:
            self.state = 1379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.CROSS, ClickHouseParser.GLOBAL, ClickHouseParser.LOCAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.GLOBAL or _la==ClickHouseParser.LOCAL:
                    self.state = 1373
                    _la = self._input.LA(1)
                    if not(_la==ClickHouseParser.GLOBAL or _la==ClickHouseParser.LOCAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1376
                self.match(ClickHouseParser.CROSS)
                self.state = 1377
                self.match(ClickHouseParser.JOIN)
                pass
            elif token in [ClickHouseParser.COMMA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(ClickHouseParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ClickHouseParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(ClickHouseParser.USING, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = ClickHouseParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_joinConstraintClause)
        try:
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(ClickHouseParser.ON)
                self.state = 1382
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1383
                self.match(ClickHouseParser.USING)
                self.state = 1384
                self.match(ClickHouseParser.LPAREN)
                self.state = 1385
                self.columnExprList()
                self.state = 1386
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1388
                self.match(ClickHouseParser.USING)
                self.state = 1389
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(ClickHouseParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(ClickHouseParser.OFFSET, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = ClickHouseParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.match(ClickHouseParser.SAMPLE)
            self.state = 1393
            self.ratioExpr()
            self.state = 1396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1394
                self.match(ClickHouseParser.OFFSET)
                self.state = 1395
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(ClickHouseParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(ClickHouseParser.OFFSET, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_limitExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitExpr" ):
                return visitor.visitLimitExpr(self)
            else:
                return visitor.visitChildren(self)




    def limitExpr(self):

        localctx = ClickHouseParser.LimitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_limitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.columnExpr(0)
            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.OFFSET or _la==ClickHouseParser.COMMA:
                self.state = 1399
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.OFFSET or _la==ClickHouseParser.COMMA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1400
                self.columnExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = ClickHouseParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.orderExpr()
            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1404
                self.match(ClickHouseParser.COMMA)
                self.state = 1405
                self.orderExpr()
                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def orderExprDecoration(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderExprDecorationContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = ClickHouseParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_orderExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.columnExpr(0)
            self.state = 1412
            self.orderExprDecoration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprDecorationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(ClickHouseParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(ClickHouseParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(ClickHouseParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(ClickHouseParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(ClickHouseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(ClickHouseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ClickHouseParser.LAST, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderExprDecoration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprDecoration" ):
                return visitor.visitOrderExprDecoration(self)
            else:
                return visitor.visitChildren(self)




    def orderExprDecoration(self):

        localctx = ClickHouseParser.OrderExprDecorationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_orderExprDecoration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING))) != 0):
                self.state = 1414
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.NULLS:
                self.state = 1417
                self.match(ClickHouseParser.NULLS)
                self.state = 1418
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.FIRST or _la==ClickHouseParser.LAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.COLLATE:
                self.state = 1421
                self.match(ClickHouseParser.COLLATE)
                self.state = 1422
                self.match(ClickHouseParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(ClickHouseParser.SLASH, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = ClickHouseParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.numberLiteral()
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1426
                self.match(ClickHouseParser.SLASH)
                self.state = 1427
                self.numberLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = ClickHouseParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.settingExpr()
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1431
                self.match(ClickHouseParser.COMMA)
                self.state = 1432
                self.settingExpr()
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = ClickHouseParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.identifier()
            self.state = 1439
            self.match(ClickHouseParser.EQ_SINGLE)
            self.state = 1440
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = ClickHouseParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.PARTITION:
                self.state = 1442
                self.winPartitionByClause()


            self.state = 1446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ORDER:
                self.state = 1445
                self.winOrderByClause()


            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.RANGE or _la==ClickHouseParser.ROWS:
                self.state = 1448
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = ClickHouseParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(ClickHouseParser.PARTITION)
            self.state = 1452
            self.match(ClickHouseParser.BY)
            self.state = 1453
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = ClickHouseParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(ClickHouseParser.ORDER)
            self.state = 1456
            self.match(ClickHouseParser.BY)
            self.state = 1457
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(ClickHouseParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(ClickHouseParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(ClickHouseParser.RANGE, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = ClickHouseParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            _la = self._input.LA(1)
            if not(_la==ClickHouseParser.RANGE or _la==ClickHouseParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1460
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(ClickHouseParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(ClickHouseParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = ClickHouseParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_winFrameExtend)
        try:
            self.state = 1468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.CURRENT, ClickHouseParser.INF, ClickHouseParser.NAN_SQL, ClickHouseParser.UNBOUNDED, ClickHouseParser.FLOATING_LITERAL, ClickHouseParser.OCTAL_LITERAL, ClickHouseParser.DECIMAL_LITERAL, ClickHouseParser.HEXADECIMAL_LITERAL, ClickHouseParser.DASH, ClickHouseParser.DOT, ClickHouseParser.PLUS]:
                localctx = ClickHouseParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.winFrameBound()
                pass
            elif token in [ClickHouseParser.BETWEEN]:
                localctx = ClickHouseParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.match(ClickHouseParser.BETWEEN)
                self.state = 1464
                self.winFrameBound()
                self.state = 1465
                self.match(ClickHouseParser.AND)
                self.state = 1466
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(ClickHouseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(ClickHouseParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(ClickHouseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(ClickHouseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(ClickHouseParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = ClickHouseParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1470
                self.match(ClickHouseParser.CURRENT)
                self.state = 1471
                self.match(ClickHouseParser.ROW)
                pass

            elif la_ == 2:
                self.state = 1472
                self.match(ClickHouseParser.UNBOUNDED)
                self.state = 1473
                self.match(ClickHouseParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 1474
                self.match(ClickHouseParser.UNBOUNDED)
                self.state = 1475
                self.match(ClickHouseParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 1476
                self.numberLiteral()
                self.state = 1477
                self.match(ClickHouseParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 1479
                self.numberLiteral()
                self.state = 1480
                self.match(ClickHouseParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ClickHouseParser.SET, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_setStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStmt" ):
                return visitor.visitSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def setStmt(self):

        localctx = ClickHouseParser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_setStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(ClickHouseParser.SET)
            self.state = 1485
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_showStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowCreateDatabaseStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateDatabaseStmt" ):
                return visitor.visitShowCreateDatabaseStmt(self)
            else:
                return visitor.visitChildren(self)


    class ShowDatabasesStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(ClickHouseParser.DATABASES, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowDatabasesStmt" ):
                return visitor.visitShowDatabasesStmt(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTableStmt" ):
                return visitor.visitShowCreateTableStmt(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(ClickHouseParser.TABLES, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)

        def LIKE(self):
            return self.getToken(ClickHouseParser.LIKE, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitClauseContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTablesStmt" ):
                return visitor.visitShowTablesStmt(self)
            else:
                return visitor.visitChildren(self)


    class ShowDictionariesStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def DICTIONARIES(self):
            return self.getToken(ClickHouseParser.DICTIONARIES, 0)
        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowDictionariesStmt" ):
                return visitor.visitShowDictionariesStmt(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateDictionaryStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateDictionaryStmt" ):
                return visitor.visitShowCreateDictionaryStmt(self)
            else:
                return visitor.visitChildren(self)



    def showStmt(self):

        localctx = ClickHouseParser.ShowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_showStmt)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ShowCreateDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.match(ClickHouseParser.SHOW)
                self.state = 1488
                self.match(ClickHouseParser.CREATE)
                self.state = 1489
                self.match(ClickHouseParser.DATABASE)
                self.state = 1490
                self.databaseIdentifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ShowCreateDictionaryStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1491
                self.match(ClickHouseParser.SHOW)
                self.state = 1492
                self.match(ClickHouseParser.CREATE)
                self.state = 1493
                self.match(ClickHouseParser.DICTIONARY)
                self.state = 1494
                self.tableIdentifier()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ShowCreateTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1495
                self.match(ClickHouseParser.SHOW)
                self.state = 1496
                self.match(ClickHouseParser.CREATE)
                self.state = 1498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1497
                    self.match(ClickHouseParser.TEMPORARY)


                self.state = 1501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1500
                    self.match(ClickHouseParser.TABLE)


                self.state = 1503
                self.tableIdentifier()
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.ShowDatabasesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1504
                self.match(ClickHouseParser.SHOW)
                self.state = 1505
                self.match(ClickHouseParser.DATABASES)
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.ShowDictionariesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1506
                self.match(ClickHouseParser.SHOW)
                self.state = 1507
                self.match(ClickHouseParser.DICTIONARIES)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.FROM:
                    self.state = 1508
                    self.match(ClickHouseParser.FROM)
                    self.state = 1509
                    self.databaseIdentifier()


                pass

            elif la_ == 6:
                localctx = ClickHouseParser.ShowTablesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1512
                self.match(ClickHouseParser.SHOW)
                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.TEMPORARY:
                    self.state = 1513
                    self.match(ClickHouseParser.TEMPORARY)


                self.state = 1516
                self.match(ClickHouseParser.TABLES)
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.FROM or _la==ClickHouseParser.IN:
                    self.state = 1517
                    _la = self._input.LA(1)
                    if not(_la==ClickHouseParser.FROM or _la==ClickHouseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1518
                    self.databaseIdentifier()


                self.state = 1524
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.LIKE]:
                    self.state = 1521
                    self.match(ClickHouseParser.LIKE)
                    self.state = 1522
                    self.match(ClickHouseParser.STRING_LITERAL)
                    pass
                elif token in [ClickHouseParser.WHERE]:
                    self.state = 1523
                    self.whereClause()
                    pass
                elif token in [ClickHouseParser.EOF, ClickHouseParser.FORMAT, ClickHouseParser.INTO, ClickHouseParser.LIMIT, ClickHouseParser.SEMICOLON]:
                    pass
                else:
                    pass
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.LIMIT:
                    self.state = 1526
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM(self):
            return self.getToken(ClickHouseParser.SYSTEM, 0)

        def FLUSH(self):
            return self.getToken(ClickHouseParser.FLUSH, 0)

        def DISTRIBUTED(self):
            return self.getToken(ClickHouseParser.DISTRIBUTED, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def LOGS(self):
            return self.getToken(ClickHouseParser.LOGS, 0)

        def RELOAD(self):
            return self.getToken(ClickHouseParser.RELOAD, 0)

        def DICTIONARIES(self):
            return self.getToken(ClickHouseParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)

        def START(self):
            return self.getToken(ClickHouseParser.START, 0)

        def STOP(self):
            return self.getToken(ClickHouseParser.STOP, 0)

        def SENDS(self):
            return self.getToken(ClickHouseParser.SENDS, 0)

        def FETCHES(self):
            return self.getToken(ClickHouseParser.FETCHES, 0)

        def MERGES(self):
            return self.getToken(ClickHouseParser.MERGES, 0)

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def REPLICATED(self):
            return self.getToken(ClickHouseParser.REPLICATED, 0)

        def SYNC(self):
            return self.getToken(ClickHouseParser.SYNC, 0)

        def REPLICA(self):
            return self.getToken(ClickHouseParser.REPLICA, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_systemStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystemStmt" ):
                return visitor.visitSystemStmt(self)
            else:
                return visitor.visitChildren(self)




    def systemStmt(self):

        localctx = ClickHouseParser.SystemStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_systemStmt)
        self._la = 0 # Token type
        try:
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1531
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1532
                self.match(ClickHouseParser.FLUSH)
                self.state = 1533
                self.match(ClickHouseParser.DISTRIBUTED)
                self.state = 1534
                self.tableIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1535
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1536
                self.match(ClickHouseParser.FLUSH)
                self.state = 1537
                self.match(ClickHouseParser.LOGS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1538
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1539
                self.match(ClickHouseParser.RELOAD)
                self.state = 1540
                self.match(ClickHouseParser.DICTIONARIES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1541
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1542
                self.match(ClickHouseParser.RELOAD)
                self.state = 1543
                self.match(ClickHouseParser.DICTIONARY)
                self.state = 1544
                self.tableIdentifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1545
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1546
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.START or _la==ClickHouseParser.STOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ClickHouseParser.DISTRIBUTED]:
                    self.state = 1547
                    self.match(ClickHouseParser.DISTRIBUTED)
                    self.state = 1548
                    self.match(ClickHouseParser.SENDS)
                    pass
                elif token in [ClickHouseParser.FETCHES]:
                    self.state = 1549
                    self.match(ClickHouseParser.FETCHES)
                    pass
                elif token in [ClickHouseParser.MERGES, ClickHouseParser.TTL]:
                    self.state = 1551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ClickHouseParser.TTL:
                        self.state = 1550
                        self.match(ClickHouseParser.TTL)


                    self.state = 1553
                    self.match(ClickHouseParser.MERGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1556
                self.tableIdentifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1557
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1558
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.START or _la==ClickHouseParser.STOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1559
                self.match(ClickHouseParser.REPLICATED)
                self.state = 1560
                self.match(ClickHouseParser.SENDS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1561
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1562
                self.match(ClickHouseParser.SYNC)
                self.state = 1563
                self.match(ClickHouseParser.REPLICA)
                self.state = 1564
                self.tableIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(ClickHouseParser.TRUNCATE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_truncateStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateStmt" ):
                return visitor.visitTruncateStmt(self)
            else:
                return visitor.visitChildren(self)




    def truncateStmt(self):

        localctx = ClickHouseParser.TruncateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_truncateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(ClickHouseParser.TRUNCATE)
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1568
                self.match(ClickHouseParser.TEMPORARY)


            self.state = 1572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1571
                self.match(ClickHouseParser.TABLE)


            self.state = 1576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1574
                self.match(ClickHouseParser.IF)
                self.state = 1575
                self.match(ClickHouseParser.EXISTS)


            self.state = 1578
            self.tableIdentifier()
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.ON:
                self.state = 1579
                self.clusterClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(ClickHouseParser.USE, 0)

        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_useStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseStmt" ):
                return visitor.visitUseStmt(self)
            else:
                return visitor.visitChildren(self)




    def useStmt(self):

        localctx = ClickHouseParser.UseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_useStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.match(ClickHouseParser.USE)
            self.state = 1583
            self.databaseIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WATCH(self):
            return self.getToken(ClickHouseParser.WATCH, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def EVENTS(self):
            return self.getToken(ClickHouseParser.EVENTS, 0)

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_watchStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWatchStmt" ):
                return visitor.visitWatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def watchStmt(self):

        localctx = ClickHouseParser.WatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_watchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(ClickHouseParser.WATCH)
            self.state = 1586
            self.tableIdentifier()
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.EVENTS:
                self.state = 1587
                self.match(ClickHouseParser.EVENTS)


            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.LIMIT:
                self.state = 1590
                self.match(ClickHouseParser.LIMIT)
                self.state = 1591
                self.match(ClickHouseParser.DECIMAL_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = ClickHouseParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 1641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self.identifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1595
                self.identifier()
                self.state = 1596
                self.match(ClickHouseParser.LPAREN)
                self.state = 1597
                self.identifier()
                self.state = 1598
                self.columnTypeExpr()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ClickHouseParser.COMMA:
                    self.state = 1599
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1600
                    self.identifier()
                    self.state = 1601
                    self.columnTypeExpr()
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1608
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1610
                self.identifier()
                self.state = 1611
                self.match(ClickHouseParser.LPAREN)
                self.state = 1612
                self.enumValue()
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ClickHouseParser.COMMA:
                    self.state = 1613
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1614
                    self.enumValue()
                    self.state = 1619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1620
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1622
                self.identifier()
                self.state = 1623
                self.match(ClickHouseParser.LPAREN)
                self.state = 1624
                self.columnTypeExpr()
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ClickHouseParser.COMMA:
                    self.state = 1625
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1626
                    self.columnTypeExpr()
                    self.state = 1631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1632
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1634
                self.identifier()
                self.state = 1635
                self.match(ClickHouseParser.LPAREN)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 1636
                    self.columnExprList()


                self.state = 1639
                self.match(ClickHouseParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnsExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnsExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnsExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = ClickHouseParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.columnsExpr()
            self.state = 1648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1644
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1645
                    self.columnsExpr() 
                self.state = 1650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnsExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnsExprColumnContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprColumn" ):
                return visitor.visitColumnsExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class ColumnsExprAsteriskContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(ClickHouseParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprAsterisk" ):
                return visitor.visitColumnsExprAsterisk(self)
            else:
                return visitor.visitChildren(self)


    class ColumnsExprSubqueryContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnsExprSubquery" ):
                return visitor.visitColumnsExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def columnsExpr(self):

        localctx = ClickHouseParser.ColumnsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_columnsExpr)
        self._la = 0 # Token type
        try:
            self.state = 1662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ColumnsExprAsteriskContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)) | (1 << (ClickHouseParser.DATABASES - 2)) | (1 << (ClickHouseParser.DATE - 2)) | (1 << (ClickHouseParser.DAY - 2)) | (1 << (ClickHouseParser.DEDUPLICATE - 2)) | (1 << (ClickHouseParser.DEFAULT - 2)) | (1 << (ClickHouseParser.DELAY - 2)) | (1 << (ClickHouseParser.DELETE - 2)) | (1 << (ClickHouseParser.DESC - 2)) | (1 << (ClickHouseParser.DESCENDING - 2)) | (1 << (ClickHouseParser.DESCRIBE - 2)) | (1 << (ClickHouseParser.DETACH - 2)) | (1 << (ClickHouseParser.DICTIONARIES - 2)) | (1 << (ClickHouseParser.DICTIONARY - 2)) | (1 << (ClickHouseParser.DISK - 2)) | (1 << (ClickHouseParser.DISTINCT - 2)) | (1 << (ClickHouseParser.DISTRIBUTED - 2)) | (1 << (ClickHouseParser.DROP - 2)) | (1 << (ClickHouseParser.ELSE - 2)) | (1 << (ClickHouseParser.END - 2)) | (1 << (ClickHouseParser.ENGINE - 2)) | (1 << (ClickHouseParser.EVENTS - 2)) | (1 << (ClickHouseParser.EXISTS - 2)) | (1 << (ClickHouseParser.EXPLAIN - 2)) | (1 << (ClickHouseParser.EXPRESSION - 2)) | (1 << (ClickHouseParser.EXTRACT - 2)) | (1 << (ClickHouseParser.FETCHES - 2)) | (1 << (ClickHouseParser.FINAL - 2)) | (1 << (ClickHouseParser.FIRST - 2)) | (1 << (ClickHouseParser.FLUSH - 2)) | (1 << (ClickHouseParser.FOLLOWING - 2)) | (1 << (ClickHouseParser.FOR - 2)) | (1 << (ClickHouseParser.FORMAT - 2)))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)) | (1 << (ClickHouseParser.LIMIT - 66)) | (1 << (ClickHouseParser.LIVE - 66)) | (1 << (ClickHouseParser.LOCAL - 66)) | (1 << (ClickHouseParser.LOGS - 66)) | (1 << (ClickHouseParser.MATERIALIZE - 66)) | (1 << (ClickHouseParser.MATERIALIZED - 66)) | (1 << (ClickHouseParser.MAX - 66)) | (1 << (ClickHouseParser.MERGES - 66)) | (1 << (ClickHouseParser.MIN - 66)) | (1 << (ClickHouseParser.MINUTE - 66)) | (1 << (ClickHouseParser.MODIFY - 66)) | (1 << (ClickHouseParser.MONTH - 66)) | (1 << (ClickHouseParser.MOVE - 66)) | (1 << (ClickHouseParser.MUTATION - 66)) | (1 << (ClickHouseParser.NO - 66)) | (1 << (ClickHouseParser.NOT - 66)) | (1 << (ClickHouseParser.NULLS - 66)) | (1 << (ClickHouseParser.OFFSET - 66)) | (1 << (ClickHouseParser.ON - 66)) | (1 << (ClickHouseParser.OPTIMIZE - 66)) | (1 << (ClickHouseParser.OR - 66)) | (1 << (ClickHouseParser.ORDER - 66)) | (1 << (ClickHouseParser.OUTER - 66)) | (1 << (ClickHouseParser.OUTFILE - 66)) | (1 << (ClickHouseParser.OVER - 66)) | (1 << (ClickHouseParser.PARTITION - 66)) | (1 << (ClickHouseParser.POPULATE - 66)) | (1 << (ClickHouseParser.PRECEDING - 66)) | (1 << (ClickHouseParser.PREWHERE - 66)) | (1 << (ClickHouseParser.PRIMARY - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)) | (1 << (ClickHouseParser.TIES - 131)) | (1 << (ClickHouseParser.TIMEOUT - 131)) | (1 << (ClickHouseParser.TIMESTAMP - 131)) | (1 << (ClickHouseParser.TO - 131)) | (1 << (ClickHouseParser.TOP - 131)) | (1 << (ClickHouseParser.TOTALS - 131)) | (1 << (ClickHouseParser.TRAILING - 131)) | (1 << (ClickHouseParser.TRIM - 131)) | (1 << (ClickHouseParser.TRUNCATE - 131)) | (1 << (ClickHouseParser.TTL - 131)) | (1 << (ClickHouseParser.TYPE - 131)) | (1 << (ClickHouseParser.UNBOUNDED - 131)) | (1 << (ClickHouseParser.UNION - 131)) | (1 << (ClickHouseParser.UPDATE - 131)) | (1 << (ClickHouseParser.USE - 131)) | (1 << (ClickHouseParser.USING - 131)) | (1 << (ClickHouseParser.UUID - 131)) | (1 << (ClickHouseParser.VALUES - 131)) | (1 << (ClickHouseParser.VIEW - 131)) | (1 << (ClickHouseParser.VOLUME - 131)) | (1 << (ClickHouseParser.WATCH - 131)) | (1 << (ClickHouseParser.WEEK - 131)) | (1 << (ClickHouseParser.WHEN - 131)) | (1 << (ClickHouseParser.WHERE - 131)) | (1 << (ClickHouseParser.WINDOW - 131)) | (1 << (ClickHouseParser.WITH - 131)) | (1 << (ClickHouseParser.YEAR - 131)) | (1 << (ClickHouseParser.JSON_FALSE - 131)) | (1 << (ClickHouseParser.JSON_TRUE - 131)) | (1 << (ClickHouseParser.IDENTIFIER - 131)))) != 0):
                    self.state = 1651
                    self.tableIdentifier()
                    self.state = 1652
                    self.match(ClickHouseParser.DOT)


                self.state = 1656
                self.match(ClickHouseParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ColumnsExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.match(ClickHouseParser.LPAREN)
                self.state = 1658
                self.selectUnionStmt()
                self.state = 1659
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ColumnsExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1661
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(ClickHouseParser.QUERY, 0)
        def COLON(self):
            return self.getToken(ClickHouseParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(ClickHouseParser.AliasContext,0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprExtractContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(ClickHouseParser.EXTRACT, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def interval(self):
            return self.getTypedRuleContext(ClickHouseParser.IntervalContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprExtract" ):
                return visitor.visitColumnExprExtract(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(ClickHouseParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(ClickHouseParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(ClickHouseParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(ClickHouseParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(ClickHouseParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(ClickHouseParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(ClickHouseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(ClickHouseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(ClickHouseParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(ClickHouseParser.PLUS, 0)
        def DASH(self):
            return self.getToken(ClickHouseParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(ClickHouseParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def EQ_DOUBLE(self):
            return self.getToken(ClickHouseParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(ClickHouseParser.NOT_EQ, 0)
        def LE(self):
            return self.getToken(ClickHouseParser.LE, 0)
        def GE(self):
            return self.getToken(ClickHouseParser.GE, 0)
        def LT(self):
            return self.getToken(ClickHouseParser.LT, 0)
        def GT(self):
            return self.getToken(ClickHouseParser.GT, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def LIKE(self):
            return self.getToken(ClickHouseParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(ClickHouseParser.ILIKE, 0)
        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(ClickHouseParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(ClickHouseParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(ClickHouseParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(ClickHouseParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(ClickHouseParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(ClickHouseParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(ClickHouseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(ClickHouseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(ClickHouseParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(ClickHouseParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(ClickHouseParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(ClickHouseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(ClickHouseParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(ClickHouseParser.CASE, 0)
        def END(self):
            return self.getToken(ClickHouseParser.END, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.WHEN)
            else:
                return self.getToken(ClickHouseParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.THEN)
            else:
                return self.getToken(ClickHouseParser.THEN, i)
        def ELSE(self):
            return self.getToken(ClickHouseParser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(ClickHouseParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(ClickHouseParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(ClickHouseParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(ClickHouseParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClickHouseParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 200
        self.enterRecursionRule(localctx, 200, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1665
                self.match(ClickHouseParser.CASE)
                self.state = 1667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1666
                    self.columnExpr(0)


                self.state = 1674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1669
                    self.match(ClickHouseParser.WHEN)
                    self.state = 1670
                    self.columnExpr(0)
                    self.state = 1671
                    self.match(ClickHouseParser.THEN)
                    self.state = 1672
                    self.columnExpr(0)
                    self.state = 1676 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ClickHouseParser.WHEN):
                        break

                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.ELSE:
                    self.state = 1678
                    self.match(ClickHouseParser.ELSE)
                    self.state = 1679
                    self.columnExpr(0)


                self.state = 1682
                self.match(ClickHouseParser.END)
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1684
                self.match(ClickHouseParser.CAST)
                self.state = 1685
                self.match(ClickHouseParser.LPAREN)
                self.state = 1686
                self.columnExpr(0)
                self.state = 1687
                self.match(ClickHouseParser.AS)
                self.state = 1688
                self.columnTypeExpr()
                self.state = 1689
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1691
                self.match(ClickHouseParser.DATE)
                self.state = 1692
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1693
                self.match(ClickHouseParser.EXTRACT)
                self.state = 1694
                self.match(ClickHouseParser.LPAREN)
                self.state = 1695
                self.interval()
                self.state = 1696
                self.match(ClickHouseParser.FROM)
                self.state = 1697
                self.columnExpr(0)
                self.state = 1698
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1700
                self.match(ClickHouseParser.INTERVAL)
                self.state = 1701
                self.columnExpr(0)
                self.state = 1702
                self.interval()
                pass

            elif la_ == 6:
                localctx = ClickHouseParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1704
                self.match(ClickHouseParser.SUBSTRING)
                self.state = 1705
                self.match(ClickHouseParser.LPAREN)
                self.state = 1706
                self.columnExpr(0)
                self.state = 1707
                self.match(ClickHouseParser.FROM)
                self.state = 1708
                self.columnExpr(0)
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ClickHouseParser.FOR:
                    self.state = 1709
                    self.match(ClickHouseParser.FOR)
                    self.state = 1710
                    self.columnExpr(0)


                self.state = 1713
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = ClickHouseParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1715
                self.match(ClickHouseParser.TIMESTAMP)
                self.state = 1716
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = ClickHouseParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1717
                self.match(ClickHouseParser.TRIM)
                self.state = 1718
                self.match(ClickHouseParser.LPAREN)
                self.state = 1719
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.BOTH or _la==ClickHouseParser.LEADING or _la==ClickHouseParser.TRAILING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1720
                self.match(ClickHouseParser.STRING_LITERAL)
                self.state = 1721
                self.match(ClickHouseParser.FROM)
                self.state = 1722
                self.columnExpr(0)
                self.state = 1723
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = ClickHouseParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1725
                self.identifier()

                self.state = 1726
                self.match(ClickHouseParser.LPAREN)
                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 1727
                    self.columnExprList()


                self.state = 1730
                self.match(ClickHouseParser.RPAREN)
                self.state = 1732
                self.match(ClickHouseParser.OVER)
                self.state = 1733
                self.match(ClickHouseParser.LPAREN)
                self.state = 1734
                self.windowExpr()
                self.state = 1735
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = ClickHouseParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1737
                self.identifier()

                self.state = 1738
                self.match(ClickHouseParser.LPAREN)
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 1739
                    self.columnExprList()


                self.state = 1742
                self.match(ClickHouseParser.RPAREN)
                self.state = 1744
                self.match(ClickHouseParser.OVER)
                self.state = 1745
                self.identifier()
                pass

            elif la_ == 11:
                localctx = ClickHouseParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1747
                self.identifier()
                self.state = 1753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1748
                    self.match(ClickHouseParser.LPAREN)
                    self.state = 1750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                        self.state = 1749
                        self.columnExprList()


                    self.state = 1752
                    self.match(ClickHouseParser.RPAREN)


                self.state = 1755
                self.match(ClickHouseParser.LPAREN)
                self.state = 1757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1756
                    self.match(ClickHouseParser.DISTINCT)


                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 1759
                    self.columnArgList()


                self.state = 1762
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = ClickHouseParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1764
                self.literal()
                pass

            elif la_ == 13:
                localctx = ClickHouseParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1765
                self.match(ClickHouseParser.DASH)
                self.state = 1766
                self.columnExpr(17)
                pass

            elif la_ == 14:
                localctx = ClickHouseParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1767
                self.match(ClickHouseParser.NOT)
                self.state = 1768
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = ClickHouseParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)) | (1 << (ClickHouseParser.DATABASES - 2)) | (1 << (ClickHouseParser.DATE - 2)) | (1 << (ClickHouseParser.DAY - 2)) | (1 << (ClickHouseParser.DEDUPLICATE - 2)) | (1 << (ClickHouseParser.DEFAULT - 2)) | (1 << (ClickHouseParser.DELAY - 2)) | (1 << (ClickHouseParser.DELETE - 2)) | (1 << (ClickHouseParser.DESC - 2)) | (1 << (ClickHouseParser.DESCENDING - 2)) | (1 << (ClickHouseParser.DESCRIBE - 2)) | (1 << (ClickHouseParser.DETACH - 2)) | (1 << (ClickHouseParser.DICTIONARIES - 2)) | (1 << (ClickHouseParser.DICTIONARY - 2)) | (1 << (ClickHouseParser.DISK - 2)) | (1 << (ClickHouseParser.DISTINCT - 2)) | (1 << (ClickHouseParser.DISTRIBUTED - 2)) | (1 << (ClickHouseParser.DROP - 2)) | (1 << (ClickHouseParser.ELSE - 2)) | (1 << (ClickHouseParser.END - 2)) | (1 << (ClickHouseParser.ENGINE - 2)) | (1 << (ClickHouseParser.EVENTS - 2)) | (1 << (ClickHouseParser.EXISTS - 2)) | (1 << (ClickHouseParser.EXPLAIN - 2)) | (1 << (ClickHouseParser.EXPRESSION - 2)) | (1 << (ClickHouseParser.EXTRACT - 2)) | (1 << (ClickHouseParser.FETCHES - 2)) | (1 << (ClickHouseParser.FINAL - 2)) | (1 << (ClickHouseParser.FIRST - 2)) | (1 << (ClickHouseParser.FLUSH - 2)) | (1 << (ClickHouseParser.FOLLOWING - 2)) | (1 << (ClickHouseParser.FOR - 2)) | (1 << (ClickHouseParser.FORMAT - 2)))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)) | (1 << (ClickHouseParser.LIMIT - 66)) | (1 << (ClickHouseParser.LIVE - 66)) | (1 << (ClickHouseParser.LOCAL - 66)) | (1 << (ClickHouseParser.LOGS - 66)) | (1 << (ClickHouseParser.MATERIALIZE - 66)) | (1 << (ClickHouseParser.MATERIALIZED - 66)) | (1 << (ClickHouseParser.MAX - 66)) | (1 << (ClickHouseParser.MERGES - 66)) | (1 << (ClickHouseParser.MIN - 66)) | (1 << (ClickHouseParser.MINUTE - 66)) | (1 << (ClickHouseParser.MODIFY - 66)) | (1 << (ClickHouseParser.MONTH - 66)) | (1 << (ClickHouseParser.MOVE - 66)) | (1 << (ClickHouseParser.MUTATION - 66)) | (1 << (ClickHouseParser.NO - 66)) | (1 << (ClickHouseParser.NOT - 66)) | (1 << (ClickHouseParser.NULLS - 66)) | (1 << (ClickHouseParser.OFFSET - 66)) | (1 << (ClickHouseParser.ON - 66)) | (1 << (ClickHouseParser.OPTIMIZE - 66)) | (1 << (ClickHouseParser.OR - 66)) | (1 << (ClickHouseParser.ORDER - 66)) | (1 << (ClickHouseParser.OUTER - 66)) | (1 << (ClickHouseParser.OUTFILE - 66)) | (1 << (ClickHouseParser.OVER - 66)) | (1 << (ClickHouseParser.PARTITION - 66)) | (1 << (ClickHouseParser.POPULATE - 66)) | (1 << (ClickHouseParser.PRECEDING - 66)) | (1 << (ClickHouseParser.PREWHERE - 66)) | (1 << (ClickHouseParser.PRIMARY - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)) | (1 << (ClickHouseParser.TIES - 131)) | (1 << (ClickHouseParser.TIMEOUT - 131)) | (1 << (ClickHouseParser.TIMESTAMP - 131)) | (1 << (ClickHouseParser.TO - 131)) | (1 << (ClickHouseParser.TOP - 131)) | (1 << (ClickHouseParser.TOTALS - 131)) | (1 << (ClickHouseParser.TRAILING - 131)) | (1 << (ClickHouseParser.TRIM - 131)) | (1 << (ClickHouseParser.TRUNCATE - 131)) | (1 << (ClickHouseParser.TTL - 131)) | (1 << (ClickHouseParser.TYPE - 131)) | (1 << (ClickHouseParser.UNBOUNDED - 131)) | (1 << (ClickHouseParser.UNION - 131)) | (1 << (ClickHouseParser.UPDATE - 131)) | (1 << (ClickHouseParser.USE - 131)) | (1 << (ClickHouseParser.USING - 131)) | (1 << (ClickHouseParser.UUID - 131)) | (1 << (ClickHouseParser.VALUES - 131)) | (1 << (ClickHouseParser.VIEW - 131)) | (1 << (ClickHouseParser.VOLUME - 131)) | (1 << (ClickHouseParser.WATCH - 131)) | (1 << (ClickHouseParser.WEEK - 131)) | (1 << (ClickHouseParser.WHEN - 131)) | (1 << (ClickHouseParser.WHERE - 131)) | (1 << (ClickHouseParser.WINDOW - 131)) | (1 << (ClickHouseParser.WITH - 131)) | (1 << (ClickHouseParser.YEAR - 131)) | (1 << (ClickHouseParser.JSON_FALSE - 131)) | (1 << (ClickHouseParser.JSON_TRUE - 131)) | (1 << (ClickHouseParser.IDENTIFIER - 131)))) != 0):
                    self.state = 1769
                    self.tableIdentifier()
                    self.state = 1770
                    self.match(ClickHouseParser.DOT)


                self.state = 1774
                self.match(ClickHouseParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = ClickHouseParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1775
                self.match(ClickHouseParser.LPAREN)
                self.state = 1776
                self.selectUnionStmt()
                self.state = 1777
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = ClickHouseParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1779
                self.match(ClickHouseParser.LPAREN)
                self.state = 1780
                self.columnExpr(0)
                self.state = 1781
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = ClickHouseParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1783
                self.match(ClickHouseParser.LPAREN)
                self.state = 1784
                self.columnExprList()
                self.state = 1785
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = ClickHouseParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1787
                self.match(ClickHouseParser.LBRACKET)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                    self.state = 1788
                    self.columnExprList()


                self.state = 1791
                self.match(ClickHouseParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = ClickHouseParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1792
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1866
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1864
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                    if la_ == 1:
                        localctx = ClickHouseParser.ColumnExprPrecedence1Context(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1795
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1796
                        _la = self._input.LA(1)
                        if not(((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (ClickHouseParser.ASTERISK - 199)) | (1 << (ClickHouseParser.PERCENT - 199)) | (1 << (ClickHouseParser.SLASH - 199)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1797
                        self.columnExpr(17)
                        pass

                    elif la_ == 2:
                        localctx = ClickHouseParser.ColumnExprPrecedence2Context(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1798
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1799
                        _la = self._input.LA(1)
                        if not(((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (ClickHouseParser.CONCAT - 204)) | (1 << (ClickHouseParser.DASH - 204)) | (1 << (ClickHouseParser.PLUS - 204)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1800
                        self.columnExpr(16)
                        pass

                    elif la_ == 3:
                        localctx = ClickHouseParser.ColumnExprPrecedence3Context(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1801
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1820
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                        if la_ == 1:
                            self.state = 1802
                            self.match(ClickHouseParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 1803
                            self.match(ClickHouseParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 1804
                            self.match(ClickHouseParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 1805
                            self.match(ClickHouseParser.LE)
                            pass

                        elif la_ == 5:
                            self.state = 1806
                            self.match(ClickHouseParser.GE)
                            pass

                        elif la_ == 6:
                            self.state = 1807
                            self.match(ClickHouseParser.LT)
                            pass

                        elif la_ == 7:
                            self.state = 1808
                            self.match(ClickHouseParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 1810
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==ClickHouseParser.GLOBAL:
                                self.state = 1809
                                self.match(ClickHouseParser.GLOBAL)


                            self.state = 1813
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==ClickHouseParser.NOT:
                                self.state = 1812
                                self.match(ClickHouseParser.NOT)


                            self.state = 1815
                            self.match(ClickHouseParser.IN)
                            pass

                        elif la_ == 9:
                            self.state = 1817
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==ClickHouseParser.NOT:
                                self.state = 1816
                                self.match(ClickHouseParser.NOT)


                            self.state = 1819
                            _la = self._input.LA(1)
                            if not(_la==ClickHouseParser.ILIKE or _la==ClickHouseParser.LIKE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass


                        self.state = 1822
                        self.columnExpr(15)
                        pass

                    elif la_ == 4:
                        localctx = ClickHouseParser.ColumnExprAndContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1823
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1824
                        self.match(ClickHouseParser.AND)
                        self.state = 1825
                        self.columnExpr(12)
                        pass

                    elif la_ == 5:
                        localctx = ClickHouseParser.ColumnExprOrContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1826
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1827
                        self.match(ClickHouseParser.OR)
                        self.state = 1828
                        self.columnExpr(11)
                        pass

                    elif la_ == 6:
                        localctx = ClickHouseParser.ColumnExprBetweenContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1829
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1831
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ClickHouseParser.NOT:
                            self.state = 1830
                            self.match(ClickHouseParser.NOT)


                        self.state = 1833
                        self.match(ClickHouseParser.BETWEEN)
                        self.state = 1834
                        self.columnExpr(0)
                        self.state = 1835
                        self.match(ClickHouseParser.AND)
                        self.state = 1836
                        self.columnExpr(10)
                        pass

                    elif la_ == 7:
                        localctx = ClickHouseParser.ColumnExprTernaryOpContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1838
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1839
                        self.match(ClickHouseParser.QUERY)
                        self.state = 1840
                        self.columnExpr(0)
                        self.state = 1841
                        self.match(ClickHouseParser.COLON)
                        self.state = 1842
                        self.columnExpr(8)
                        pass

                    elif la_ == 8:
                        localctx = ClickHouseParser.ColumnExprArrayAccessContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1844
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1845
                        self.match(ClickHouseParser.LBRACKET)
                        self.state = 1846
                        self.columnExpr(0)
                        self.state = 1847
                        self.match(ClickHouseParser.RBRACKET)
                        pass

                    elif la_ == 9:
                        localctx = ClickHouseParser.ColumnExprTupleAccessContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1849
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1850
                        self.match(ClickHouseParser.DOT)
                        self.state = 1851
                        self.match(ClickHouseParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 10:
                        localctx = ClickHouseParser.ColumnExprIsNullContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1852
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1853
                        self.match(ClickHouseParser.IS)
                        self.state = 1855
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ClickHouseParser.NOT:
                            self.state = 1854
                            self.match(ClickHouseParser.NOT)


                        self.state = 1857
                        self.match(ClickHouseParser.NULL_SQL)
                        pass

                    elif la_ == 11:
                        localctx = ClickHouseParser.ColumnExprAliasContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1858
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1862
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [ClickHouseParser.DATE, ClickHouseParser.FIRST, ClickHouseParser.ID, ClickHouseParser.KEY, ClickHouseParser.IDENTIFIER]:
                            self.state = 1859
                            self.alias()
                            pass
                        elif token in [ClickHouseParser.AS]:
                            self.state = 1860
                            self.match(ClickHouseParser.AS)
                            self.state = 1861
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 1868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = ClickHouseParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.columnArgExpr()
            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1870
                self.match(ClickHouseParser.COMMA)
                self.state = 1871
                self.columnArgExpr()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = ClickHouseParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_columnArgExpr)
        try:
            self.state = 1879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1877
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(ClickHouseParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = ClickHouseParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.LPAREN]:
                self.state = 1881
                self.match(ClickHouseParser.LPAREN)
                self.state = 1882
                self.identifier()
                self.state = 1887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ClickHouseParser.COMMA:
                    self.state = 1883
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1884
                    self.identifier()
                    self.state = 1889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1890
                self.match(ClickHouseParser.RPAREN)
                pass
            elif token in [ClickHouseParser.AFTER, ClickHouseParser.ALIAS, ClickHouseParser.ALL, ClickHouseParser.ALTER, ClickHouseParser.AND, ClickHouseParser.ANTI, ClickHouseParser.ANY, ClickHouseParser.ARRAY, ClickHouseParser.AS, ClickHouseParser.ASCENDING, ClickHouseParser.ASOF, ClickHouseParser.AST, ClickHouseParser.ASYNC, ClickHouseParser.ATTACH, ClickHouseParser.BETWEEN, ClickHouseParser.BOTH, ClickHouseParser.BY, ClickHouseParser.CASE, ClickHouseParser.CAST, ClickHouseParser.CHECK, ClickHouseParser.CLEAR, ClickHouseParser.CLUSTER, ClickHouseParser.CODEC, ClickHouseParser.COLLATE, ClickHouseParser.COLUMN, ClickHouseParser.COMMENT, ClickHouseParser.CONSTRAINT, ClickHouseParser.CREATE, ClickHouseParser.CROSS, ClickHouseParser.CUBE, ClickHouseParser.CURRENT, ClickHouseParser.DATABASE, ClickHouseParser.DATABASES, ClickHouseParser.DATE, ClickHouseParser.DAY, ClickHouseParser.DEDUPLICATE, ClickHouseParser.DEFAULT, ClickHouseParser.DELAY, ClickHouseParser.DELETE, ClickHouseParser.DESC, ClickHouseParser.DESCENDING, ClickHouseParser.DESCRIBE, ClickHouseParser.DETACH, ClickHouseParser.DICTIONARIES, ClickHouseParser.DICTIONARY, ClickHouseParser.DISK, ClickHouseParser.DISTINCT, ClickHouseParser.DISTRIBUTED, ClickHouseParser.DROP, ClickHouseParser.ELSE, ClickHouseParser.END, ClickHouseParser.ENGINE, ClickHouseParser.EVENTS, ClickHouseParser.EXISTS, ClickHouseParser.EXPLAIN, ClickHouseParser.EXPRESSION, ClickHouseParser.EXTRACT, ClickHouseParser.FETCHES, ClickHouseParser.FINAL, ClickHouseParser.FIRST, ClickHouseParser.FLUSH, ClickHouseParser.FOLLOWING, ClickHouseParser.FOR, ClickHouseParser.FORMAT, ClickHouseParser.FREEZE, ClickHouseParser.FROM, ClickHouseParser.FULL, ClickHouseParser.FUNCTION, ClickHouseParser.GLOBAL, ClickHouseParser.GRANULARITY, ClickHouseParser.GROUP, ClickHouseParser.HAVING, ClickHouseParser.HIERARCHICAL, ClickHouseParser.HOUR, ClickHouseParser.ID, ClickHouseParser.IF, ClickHouseParser.ILIKE, ClickHouseParser.IN, ClickHouseParser.INDEX, ClickHouseParser.INJECTIVE, ClickHouseParser.INNER, ClickHouseParser.INSERT, ClickHouseParser.INTERVAL, ClickHouseParser.INTO, ClickHouseParser.IS, ClickHouseParser.IS_OBJECT_ID, ClickHouseParser.JOIN, ClickHouseParser.KEY, ClickHouseParser.KILL, ClickHouseParser.LAST, ClickHouseParser.LAYOUT, ClickHouseParser.LEADING, ClickHouseParser.LEFT, ClickHouseParser.LIFETIME, ClickHouseParser.LIKE, ClickHouseParser.LIMIT, ClickHouseParser.LIVE, ClickHouseParser.LOCAL, ClickHouseParser.LOGS, ClickHouseParser.MATERIALIZE, ClickHouseParser.MATERIALIZED, ClickHouseParser.MAX, ClickHouseParser.MERGES, ClickHouseParser.MIN, ClickHouseParser.MINUTE, ClickHouseParser.MODIFY, ClickHouseParser.MONTH, ClickHouseParser.MOVE, ClickHouseParser.MUTATION, ClickHouseParser.NO, ClickHouseParser.NOT, ClickHouseParser.NULLS, ClickHouseParser.OFFSET, ClickHouseParser.ON, ClickHouseParser.OPTIMIZE, ClickHouseParser.OR, ClickHouseParser.ORDER, ClickHouseParser.OUTER, ClickHouseParser.OUTFILE, ClickHouseParser.OVER, ClickHouseParser.PARTITION, ClickHouseParser.POPULATE, ClickHouseParser.PRECEDING, ClickHouseParser.PREWHERE, ClickHouseParser.PRIMARY, ClickHouseParser.QUARTER, ClickHouseParser.RANGE, ClickHouseParser.RELOAD, ClickHouseParser.REMOVE, ClickHouseParser.RENAME, ClickHouseParser.REPLACE, ClickHouseParser.REPLICA, ClickHouseParser.REPLICATED, ClickHouseParser.RIGHT, ClickHouseParser.ROLLUP, ClickHouseParser.ROW, ClickHouseParser.ROWS, ClickHouseParser.SAMPLE, ClickHouseParser.SECOND, ClickHouseParser.SELECT, ClickHouseParser.SEMI, ClickHouseParser.SENDS, ClickHouseParser.SET, ClickHouseParser.SETTINGS, ClickHouseParser.SHOW, ClickHouseParser.SOURCE, ClickHouseParser.START, ClickHouseParser.STOP, ClickHouseParser.SUBSTRING, ClickHouseParser.SYNC, ClickHouseParser.SYNTAX, ClickHouseParser.SYSTEM, ClickHouseParser.TABLE, ClickHouseParser.TABLES, ClickHouseParser.TEMPORARY, ClickHouseParser.TEST, ClickHouseParser.THEN, ClickHouseParser.TIES, ClickHouseParser.TIMEOUT, ClickHouseParser.TIMESTAMP, ClickHouseParser.TO, ClickHouseParser.TOP, ClickHouseParser.TOTALS, ClickHouseParser.TRAILING, ClickHouseParser.TRIM, ClickHouseParser.TRUNCATE, ClickHouseParser.TTL, ClickHouseParser.TYPE, ClickHouseParser.UNBOUNDED, ClickHouseParser.UNION, ClickHouseParser.UPDATE, ClickHouseParser.USE, ClickHouseParser.USING, ClickHouseParser.UUID, ClickHouseParser.VALUES, ClickHouseParser.VIEW, ClickHouseParser.VOLUME, ClickHouseParser.WATCH, ClickHouseParser.WEEK, ClickHouseParser.WHEN, ClickHouseParser.WHERE, ClickHouseParser.WINDOW, ClickHouseParser.WITH, ClickHouseParser.YEAR, ClickHouseParser.JSON_FALSE, ClickHouseParser.JSON_TRUE, ClickHouseParser.IDENTIFIER]:
                self.state = 1892
                self.identifier()
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ClickHouseParser.COMMA:
                    self.state = 1893
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1894
                    self.identifier()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1902
            self.match(ClickHouseParser.ARROW)
            self.state = 1903
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = ClickHouseParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_columnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1905
                self.tableIdentifier()
                self.state = 1906
                self.match(ClickHouseParser.DOT)


            self.state = 1910
            self.nestedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = ClickHouseParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.identifier()
            self.state = 1915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1913
                self.match(ClickHouseParser.DOT)
                self.state = 1914
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(ClickHouseParser.AliasContext,0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClickHouseParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1918
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1919
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1920
                self.match(ClickHouseParser.LPAREN)
                self.state = 1921
                self.selectUnionStmt()
                self.state = 1922
                self.match(ClickHouseParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ClickHouseParser.TableExprAliasContext(self, ClickHouseParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1926
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1930
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ClickHouseParser.DATE, ClickHouseParser.FIRST, ClickHouseParser.ID, ClickHouseParser.KEY, ClickHouseParser.IDENTIFIER]:
                        self.state = 1927
                        self.alias()
                        pass
                    elif token in [ClickHouseParser.AS]:
                        self.state = 1928
                        self.match(ClickHouseParser.AS)
                        self.state = 1929
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(ClickHouseParser.TableArgListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = ClickHouseParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.identifier()
            self.state = 1938
            self.match(ClickHouseParser.LPAREN)
            self.state = 1940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DAY) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MINUTE - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MONTH - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NAN_SQL - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULL_SQL - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WEEK - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.YEAR - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) != 0):
                self.state = 1939
                self.tableArgList()


            self.state = 1942
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = ClickHouseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1944
                self.databaseIdentifier()
                self.state = 1945
                self.match(ClickHouseParser.DOT)


            self.state = 1949
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TableArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = ClickHouseParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.tableArgExpr()
            self.state = 1956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ClickHouseParser.COMMA:
                self.state = 1952
                self.match(ClickHouseParser.COMMA)
                self.state = 1953
                self.tableArgExpr()
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgExpr" ):
                return visitor.visitTableArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableArgExpr(self):

        localctx = ClickHouseParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_tableArgExpr)
        try:
            self.state = 1962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1959
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1961
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = ClickHouseParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1964
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(ClickHouseParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.DECIMAL_LITERAL)
            else:
                return self.getToken(ClickHouseParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(ClickHouseParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = ClickHouseParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.FLOATING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1966
                self.match(ClickHouseParser.FLOATING_LITERAL)
                pass
            elif token in [ClickHouseParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1967
                self.match(ClickHouseParser.DOT)
                self.state = 1968
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.OCTAL_LITERAL or _la==ClickHouseParser.DECIMAL_LITERAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ClickHouseParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1969
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                self.state = 1970
                self.match(ClickHouseParser.DOT)
                self.state = 1972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 1971
                    _la = self._input.LA(1)
                    if not(_la==ClickHouseParser.OCTAL_LITERAL or _la==ClickHouseParser.DECIMAL_LITERAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(ClickHouseParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(ClickHouseParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(ClickHouseParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(ClickHouseParser.PLUS, 0)

        def DASH(self):
            return self.getToken(ClickHouseParser.DASH, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = ClickHouseParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ClickHouseParser.DASH or _la==ClickHouseParser.PLUS:
                self.state = 1976
                _la = self._input.LA(1)
                if not(_la==ClickHouseParser.DASH or _la==ClickHouseParser.PLUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1979
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1980
                self.match(ClickHouseParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1981
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1982
                self.match(ClickHouseParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1983
                self.match(ClickHouseParser.INF)
                pass

            elif la_ == 6:
                self.state = 1984
                self.match(ClickHouseParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(ClickHouseParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = ClickHouseParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_literal)
        try:
            self.state = 1990
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.INF, ClickHouseParser.NAN_SQL, ClickHouseParser.FLOATING_LITERAL, ClickHouseParser.OCTAL_LITERAL, ClickHouseParser.DECIMAL_LITERAL, ClickHouseParser.HEXADECIMAL_LITERAL, ClickHouseParser.DASH, ClickHouseParser.DOT, ClickHouseParser.PLUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1987
                self.numberLiteral()
                pass
            elif token in [ClickHouseParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1988
                self.match(ClickHouseParser.STRING_LITERAL)
                pass
            elif token in [ClickHouseParser.NULL_SQL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1989
                self.match(ClickHouseParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(ClickHouseParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(ClickHouseParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(ClickHouseParser.HOUR, 0)

        def DAY(self):
            return self.getToken(ClickHouseParser.DAY, 0)

        def WEEK(self):
            return self.getToken(ClickHouseParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(ClickHouseParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(ClickHouseParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(ClickHouseParser.YEAR, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = ClickHouseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            _la = self._input.LA(1)
            if not(_la==ClickHouseParser.DAY or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (ClickHouseParser.HOUR - 75)) | (1 << (ClickHouseParser.MINUTE - 75)) | (1 << (ClickHouseParser.MONTH - 75)) | (1 << (ClickHouseParser.QUARTER - 75)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (ClickHouseParser.SECOND - 144)) | (1 << (ClickHouseParser.WEEK - 144)) | (1 << (ClickHouseParser.YEAR - 144)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(ClickHouseParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(ClickHouseParser.ALTER, 0)

        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)

        def ANTI(self):
            return self.getToken(ClickHouseParser.ANTI, 0)

        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(ClickHouseParser.ARRAY, 0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(ClickHouseParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(ClickHouseParser.ASOF, 0)

        def AST(self):
            return self.getToken(ClickHouseParser.AST, 0)

        def ASYNC(self):
            return self.getToken(ClickHouseParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(ClickHouseParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(ClickHouseParser.BOTH, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def CASE(self):
            return self.getToken(ClickHouseParser.CASE, 0)

        def CAST(self):
            return self.getToken(ClickHouseParser.CAST, 0)

        def CHECK(self):
            return self.getToken(ClickHouseParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(ClickHouseParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(ClickHouseParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(ClickHouseParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(ClickHouseParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(ClickHouseParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(ClickHouseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(ClickHouseParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(ClickHouseParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(ClickHouseParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(ClickHouseParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(ClickHouseParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(ClickHouseParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(ClickHouseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(ClickHouseParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(ClickHouseParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(ClickHouseParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(ClickHouseParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(ClickHouseParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(ClickHouseParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(ClickHouseParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)

        def ELSE(self):
            return self.getToken(ClickHouseParser.ELSE, 0)

        def END(self):
            return self.getToken(ClickHouseParser.END, 0)

        def ENGINE(self):
            return self.getToken(ClickHouseParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(ClickHouseParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(ClickHouseParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(ClickHouseParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(ClickHouseParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(ClickHouseParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(ClickHouseParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(ClickHouseParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(ClickHouseParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(ClickHouseParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(ClickHouseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(ClickHouseParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(ClickHouseParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)

        def FULL(self):
            return self.getToken(ClickHouseParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(ClickHouseParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(ClickHouseParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(ClickHouseParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(ClickHouseParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(ClickHouseParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(ClickHouseParser.ID, 0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)

        def ILIKE(self):
            return self.getToken(ClickHouseParser.ILIKE, 0)

        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)

        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(ClickHouseParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(ClickHouseParser.INNER, 0)

        def INSERT(self):
            return self.getToken(ClickHouseParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(ClickHouseParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(ClickHouseParser.INTO, 0)

        def IS(self):
            return self.getToken(ClickHouseParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(ClickHouseParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(ClickHouseParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(ClickHouseParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def KILL(self):
            return self.getToken(ClickHouseParser.KILL, 0)

        def LAST(self):
            return self.getToken(ClickHouseParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(ClickHouseParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(ClickHouseParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(ClickHouseParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(ClickHouseParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(ClickHouseParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(ClickHouseParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(ClickHouseParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(ClickHouseParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(ClickHouseParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(ClickHouseParser.MAX, 0)

        def MERGES(self):
            return self.getToken(ClickHouseParser.MERGES, 0)

        def MIN(self):
            return self.getToken(ClickHouseParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(ClickHouseParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(ClickHouseParser.MUTATION, 0)

        def NO(self):
            return self.getToken(ClickHouseParser.NO, 0)

        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def NULLS(self):
            return self.getToken(ClickHouseParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(ClickHouseParser.OFFSET, 0)

        def ON(self):
            return self.getToken(ClickHouseParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(ClickHouseParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(ClickHouseParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(ClickHouseParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(ClickHouseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(ClickHouseParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(ClickHouseParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(ClickHouseParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(ClickHouseParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(ClickHouseParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(ClickHouseParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(ClickHouseParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(ClickHouseParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(ClickHouseParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(ClickHouseParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(ClickHouseParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(ClickHouseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(ClickHouseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(ClickHouseParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(ClickHouseParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(ClickHouseParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(ClickHouseParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(ClickHouseParser.SENDS, 0)

        def SET(self):
            return self.getToken(ClickHouseParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(ClickHouseParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(ClickHouseParser.SOURCE, 0)

        def START(self):
            return self.getToken(ClickHouseParser.START, 0)

        def STOP(self):
            return self.getToken(ClickHouseParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(ClickHouseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(ClickHouseParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(ClickHouseParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(ClickHouseParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(ClickHouseParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(ClickHouseParser.TEST, 0)

        def THEN(self):
            return self.getToken(ClickHouseParser.THEN, 0)

        def TIES(self):
            return self.getToken(ClickHouseParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(ClickHouseParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(ClickHouseParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(ClickHouseParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(ClickHouseParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(ClickHouseParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(ClickHouseParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)

        def TOP(self):
            return self.getToken(ClickHouseParser.TOP, 0)

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def TYPE(self):
            return self.getToken(ClickHouseParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(ClickHouseParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(ClickHouseParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(ClickHouseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(ClickHouseParser.USE, 0)

        def USING(self):
            return self.getToken(ClickHouseParser.USING, 0)

        def UUID(self):
            return self.getToken(ClickHouseParser.UUID, 0)

        def VALUES(self):
            return self.getToken(ClickHouseParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(ClickHouseParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(ClickHouseParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(ClickHouseParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(ClickHouseParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(ClickHouseParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = ClickHouseParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE) | (1 << ClickHouseParser.CURRENT) | (1 << ClickHouseParser.DATABASE) | (1 << ClickHouseParser.DATABASES) | (1 << ClickHouseParser.DATE) | (1 << ClickHouseParser.DEDUPLICATE) | (1 << ClickHouseParser.DEFAULT) | (1 << ClickHouseParser.DELAY) | (1 << ClickHouseParser.DELETE) | (1 << ClickHouseParser.DESC) | (1 << ClickHouseParser.DESCENDING) | (1 << ClickHouseParser.DESCRIBE) | (1 << ClickHouseParser.DETACH) | (1 << ClickHouseParser.DICTIONARIES) | (1 << ClickHouseParser.DICTIONARY) | (1 << ClickHouseParser.DISK) | (1 << ClickHouseParser.DISTINCT) | (1 << ClickHouseParser.DISTRIBUTED) | (1 << ClickHouseParser.DROP) | (1 << ClickHouseParser.ELSE) | (1 << ClickHouseParser.END) | (1 << ClickHouseParser.ENGINE) | (1 << ClickHouseParser.EVENTS) | (1 << ClickHouseParser.EXISTS) | (1 << ClickHouseParser.EXPLAIN) | (1 << ClickHouseParser.EXPRESSION) | (1 << ClickHouseParser.EXTRACT) | (1 << ClickHouseParser.FETCHES) | (1 << ClickHouseParser.FINAL) | (1 << ClickHouseParser.FIRST) | (1 << ClickHouseParser.FLUSH) | (1 << ClickHouseParser.FOLLOWING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)) | (1 << (ClickHouseParser.LIFETIME - 64)) | (1 << (ClickHouseParser.LIKE - 64)) | (1 << (ClickHouseParser.LIMIT - 64)) | (1 << (ClickHouseParser.LIVE - 64)) | (1 << (ClickHouseParser.LOCAL - 64)) | (1 << (ClickHouseParser.LOGS - 64)) | (1 << (ClickHouseParser.MATERIALIZE - 64)) | (1 << (ClickHouseParser.MATERIALIZED - 64)) | (1 << (ClickHouseParser.MAX - 64)) | (1 << (ClickHouseParser.MERGES - 64)) | (1 << (ClickHouseParser.MIN - 64)) | (1 << (ClickHouseParser.MODIFY - 64)) | (1 << (ClickHouseParser.MOVE - 64)) | (1 << (ClickHouseParser.MUTATION - 64)) | (1 << (ClickHouseParser.NO - 64)) | (1 << (ClickHouseParser.NOT - 64)) | (1 << (ClickHouseParser.NULLS - 64)) | (1 << (ClickHouseParser.OFFSET - 64)) | (1 << (ClickHouseParser.ON - 64)) | (1 << (ClickHouseParser.OPTIMIZE - 64)) | (1 << (ClickHouseParser.OR - 64)) | (1 << (ClickHouseParser.ORDER - 64)) | (1 << (ClickHouseParser.OUTER - 64)) | (1 << (ClickHouseParser.OUTFILE - 64)) | (1 << (ClickHouseParser.OVER - 64)) | (1 << (ClickHouseParser.PARTITION - 64)) | (1 << (ClickHouseParser.POPULATE - 64)) | (1 << (ClickHouseParser.PRECEDING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)) | (1 << (ClickHouseParser.TEMPORARY - 128)) | (1 << (ClickHouseParser.TEST - 128)) | (1 << (ClickHouseParser.THEN - 128)) | (1 << (ClickHouseParser.TIES - 128)) | (1 << (ClickHouseParser.TIMEOUT - 128)) | (1 << (ClickHouseParser.TIMESTAMP - 128)) | (1 << (ClickHouseParser.TO - 128)) | (1 << (ClickHouseParser.TOP - 128)) | (1 << (ClickHouseParser.TOTALS - 128)) | (1 << (ClickHouseParser.TRAILING - 128)) | (1 << (ClickHouseParser.TRIM - 128)) | (1 << (ClickHouseParser.TRUNCATE - 128)) | (1 << (ClickHouseParser.TTL - 128)) | (1 << (ClickHouseParser.TYPE - 128)) | (1 << (ClickHouseParser.UNBOUNDED - 128)) | (1 << (ClickHouseParser.UNION - 128)) | (1 << (ClickHouseParser.UPDATE - 128)) | (1 << (ClickHouseParser.USE - 128)) | (1 << (ClickHouseParser.USING - 128)) | (1 << (ClickHouseParser.UUID - 128)) | (1 << (ClickHouseParser.VALUES - 128)) | (1 << (ClickHouseParser.VIEW - 128)) | (1 << (ClickHouseParser.VOLUME - 128)) | (1 << (ClickHouseParser.WATCH - 128)) | (1 << (ClickHouseParser.WHEN - 128)) | (1 << (ClickHouseParser.WHERE - 128)) | (1 << (ClickHouseParser.WINDOW - 128)) | (1 << (ClickHouseParser.WITH - 128)) | (1 << (ClickHouseParser.JSON_FALSE - 128)) | (1 << (ClickHouseParser.JSON_TRUE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(ClickHouseParser.DATE, 0)

        def FIRST(self):
            return self.getToken(ClickHouseParser.FIRST, 0)

        def ID(self):
            return self.getToken(ClickHouseParser.ID, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = ClickHouseParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (ClickHouseParser.DATE - 35)) | (1 << (ClickHouseParser.FIRST - 35)) | (1 << (ClickHouseParser.ID - 35)) | (1 << (ClickHouseParser.KEY - 35)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClickHouseParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(ClickHouseParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = ClickHouseParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_alias)
        try:
            self.state = 2000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.match(ClickHouseParser.IDENTIFIER)
                pass
            elif token in [ClickHouseParser.DATE, ClickHouseParser.FIRST, ClickHouseParser.ID, ClickHouseParser.KEY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClickHouseParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(ClickHouseParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(ClickHouseParser.KeywordContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ClickHouseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_identifier)
        try:
            self.state = 2005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2002
                self.match(ClickHouseParser.IDENTIFIER)
                pass
            elif token in [ClickHouseParser.DAY, ClickHouseParser.HOUR, ClickHouseParser.MINUTE, ClickHouseParser.MONTH, ClickHouseParser.QUARTER, ClickHouseParser.SECOND, ClickHouseParser.WEEK, ClickHouseParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.interval()
                pass
            elif token in [ClickHouseParser.AFTER, ClickHouseParser.ALIAS, ClickHouseParser.ALL, ClickHouseParser.ALTER, ClickHouseParser.AND, ClickHouseParser.ANTI, ClickHouseParser.ANY, ClickHouseParser.ARRAY, ClickHouseParser.AS, ClickHouseParser.ASCENDING, ClickHouseParser.ASOF, ClickHouseParser.AST, ClickHouseParser.ASYNC, ClickHouseParser.ATTACH, ClickHouseParser.BETWEEN, ClickHouseParser.BOTH, ClickHouseParser.BY, ClickHouseParser.CASE, ClickHouseParser.CAST, ClickHouseParser.CHECK, ClickHouseParser.CLEAR, ClickHouseParser.CLUSTER, ClickHouseParser.CODEC, ClickHouseParser.COLLATE, ClickHouseParser.COLUMN, ClickHouseParser.COMMENT, ClickHouseParser.CONSTRAINT, ClickHouseParser.CREATE, ClickHouseParser.CROSS, ClickHouseParser.CUBE, ClickHouseParser.CURRENT, ClickHouseParser.DATABASE, ClickHouseParser.DATABASES, ClickHouseParser.DATE, ClickHouseParser.DEDUPLICATE, ClickHouseParser.DEFAULT, ClickHouseParser.DELAY, ClickHouseParser.DELETE, ClickHouseParser.DESC, ClickHouseParser.DESCENDING, ClickHouseParser.DESCRIBE, ClickHouseParser.DETACH, ClickHouseParser.DICTIONARIES, ClickHouseParser.DICTIONARY, ClickHouseParser.DISK, ClickHouseParser.DISTINCT, ClickHouseParser.DISTRIBUTED, ClickHouseParser.DROP, ClickHouseParser.ELSE, ClickHouseParser.END, ClickHouseParser.ENGINE, ClickHouseParser.EVENTS, ClickHouseParser.EXISTS, ClickHouseParser.EXPLAIN, ClickHouseParser.EXPRESSION, ClickHouseParser.EXTRACT, ClickHouseParser.FETCHES, ClickHouseParser.FINAL, ClickHouseParser.FIRST, ClickHouseParser.FLUSH, ClickHouseParser.FOLLOWING, ClickHouseParser.FOR, ClickHouseParser.FORMAT, ClickHouseParser.FREEZE, ClickHouseParser.FROM, ClickHouseParser.FULL, ClickHouseParser.FUNCTION, ClickHouseParser.GLOBAL, ClickHouseParser.GRANULARITY, ClickHouseParser.GROUP, ClickHouseParser.HAVING, ClickHouseParser.HIERARCHICAL, ClickHouseParser.ID, ClickHouseParser.IF, ClickHouseParser.ILIKE, ClickHouseParser.IN, ClickHouseParser.INDEX, ClickHouseParser.INJECTIVE, ClickHouseParser.INNER, ClickHouseParser.INSERT, ClickHouseParser.INTERVAL, ClickHouseParser.INTO, ClickHouseParser.IS, ClickHouseParser.IS_OBJECT_ID, ClickHouseParser.JOIN, ClickHouseParser.KEY, ClickHouseParser.KILL, ClickHouseParser.LAST, ClickHouseParser.LAYOUT, ClickHouseParser.LEADING, ClickHouseParser.LEFT, ClickHouseParser.LIFETIME, ClickHouseParser.LIKE, ClickHouseParser.LIMIT, ClickHouseParser.LIVE, ClickHouseParser.LOCAL, ClickHouseParser.LOGS, ClickHouseParser.MATERIALIZE, ClickHouseParser.MATERIALIZED, ClickHouseParser.MAX, ClickHouseParser.MERGES, ClickHouseParser.MIN, ClickHouseParser.MODIFY, ClickHouseParser.MOVE, ClickHouseParser.MUTATION, ClickHouseParser.NO, ClickHouseParser.NOT, ClickHouseParser.NULLS, ClickHouseParser.OFFSET, ClickHouseParser.ON, ClickHouseParser.OPTIMIZE, ClickHouseParser.OR, ClickHouseParser.ORDER, ClickHouseParser.OUTER, ClickHouseParser.OUTFILE, ClickHouseParser.OVER, ClickHouseParser.PARTITION, ClickHouseParser.POPULATE, ClickHouseParser.PRECEDING, ClickHouseParser.PREWHERE, ClickHouseParser.PRIMARY, ClickHouseParser.RANGE, ClickHouseParser.RELOAD, ClickHouseParser.REMOVE, ClickHouseParser.RENAME, ClickHouseParser.REPLACE, ClickHouseParser.REPLICA, ClickHouseParser.REPLICATED, ClickHouseParser.RIGHT, ClickHouseParser.ROLLUP, ClickHouseParser.ROW, ClickHouseParser.ROWS, ClickHouseParser.SAMPLE, ClickHouseParser.SELECT, ClickHouseParser.SEMI, ClickHouseParser.SENDS, ClickHouseParser.SET, ClickHouseParser.SETTINGS, ClickHouseParser.SHOW, ClickHouseParser.SOURCE, ClickHouseParser.START, ClickHouseParser.STOP, ClickHouseParser.SUBSTRING, ClickHouseParser.SYNC, ClickHouseParser.SYNTAX, ClickHouseParser.SYSTEM, ClickHouseParser.TABLE, ClickHouseParser.TABLES, ClickHouseParser.TEMPORARY, ClickHouseParser.TEST, ClickHouseParser.THEN, ClickHouseParser.TIES, ClickHouseParser.TIMEOUT, ClickHouseParser.TIMESTAMP, ClickHouseParser.TO, ClickHouseParser.TOP, ClickHouseParser.TOTALS, ClickHouseParser.TRAILING, ClickHouseParser.TRIM, ClickHouseParser.TRUNCATE, ClickHouseParser.TTL, ClickHouseParser.TYPE, ClickHouseParser.UNBOUNDED, ClickHouseParser.UNION, ClickHouseParser.UPDATE, ClickHouseParser.USE, ClickHouseParser.USING, ClickHouseParser.UUID, ClickHouseParser.VALUES, ClickHouseParser.VIEW, ClickHouseParser.VOLUME, ClickHouseParser.WATCH, ClickHouseParser.WHEN, ClickHouseParser.WHERE, ClickHouseParser.WINDOW, ClickHouseParser.WITH, ClickHouseParser.JSON_FALSE, ClickHouseParser.JSON_TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2004
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def NULL_SQL(self):
            return self.getToken(ClickHouseParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_identifierOrNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrNull" ):
                return visitor.visitIdentifierOrNull(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrNull(self):

        localctx = ClickHouseParser.IdentifierOrNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_identifierOrNull)
        try:
            self.state = 2009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ClickHouseParser.AFTER, ClickHouseParser.ALIAS, ClickHouseParser.ALL, ClickHouseParser.ALTER, ClickHouseParser.AND, ClickHouseParser.ANTI, ClickHouseParser.ANY, ClickHouseParser.ARRAY, ClickHouseParser.AS, ClickHouseParser.ASCENDING, ClickHouseParser.ASOF, ClickHouseParser.AST, ClickHouseParser.ASYNC, ClickHouseParser.ATTACH, ClickHouseParser.BETWEEN, ClickHouseParser.BOTH, ClickHouseParser.BY, ClickHouseParser.CASE, ClickHouseParser.CAST, ClickHouseParser.CHECK, ClickHouseParser.CLEAR, ClickHouseParser.CLUSTER, ClickHouseParser.CODEC, ClickHouseParser.COLLATE, ClickHouseParser.COLUMN, ClickHouseParser.COMMENT, ClickHouseParser.CONSTRAINT, ClickHouseParser.CREATE, ClickHouseParser.CROSS, ClickHouseParser.CUBE, ClickHouseParser.CURRENT, ClickHouseParser.DATABASE, ClickHouseParser.DATABASES, ClickHouseParser.DATE, ClickHouseParser.DAY, ClickHouseParser.DEDUPLICATE, ClickHouseParser.DEFAULT, ClickHouseParser.DELAY, ClickHouseParser.DELETE, ClickHouseParser.DESC, ClickHouseParser.DESCENDING, ClickHouseParser.DESCRIBE, ClickHouseParser.DETACH, ClickHouseParser.DICTIONARIES, ClickHouseParser.DICTIONARY, ClickHouseParser.DISK, ClickHouseParser.DISTINCT, ClickHouseParser.DISTRIBUTED, ClickHouseParser.DROP, ClickHouseParser.ELSE, ClickHouseParser.END, ClickHouseParser.ENGINE, ClickHouseParser.EVENTS, ClickHouseParser.EXISTS, ClickHouseParser.EXPLAIN, ClickHouseParser.EXPRESSION, ClickHouseParser.EXTRACT, ClickHouseParser.FETCHES, ClickHouseParser.FINAL, ClickHouseParser.FIRST, ClickHouseParser.FLUSH, ClickHouseParser.FOLLOWING, ClickHouseParser.FOR, ClickHouseParser.FORMAT, ClickHouseParser.FREEZE, ClickHouseParser.FROM, ClickHouseParser.FULL, ClickHouseParser.FUNCTION, ClickHouseParser.GLOBAL, ClickHouseParser.GRANULARITY, ClickHouseParser.GROUP, ClickHouseParser.HAVING, ClickHouseParser.HIERARCHICAL, ClickHouseParser.HOUR, ClickHouseParser.ID, ClickHouseParser.IF, ClickHouseParser.ILIKE, ClickHouseParser.IN, ClickHouseParser.INDEX, ClickHouseParser.INJECTIVE, ClickHouseParser.INNER, ClickHouseParser.INSERT, ClickHouseParser.INTERVAL, ClickHouseParser.INTO, ClickHouseParser.IS, ClickHouseParser.IS_OBJECT_ID, ClickHouseParser.JOIN, ClickHouseParser.KEY, ClickHouseParser.KILL, ClickHouseParser.LAST, ClickHouseParser.LAYOUT, ClickHouseParser.LEADING, ClickHouseParser.LEFT, ClickHouseParser.LIFETIME, ClickHouseParser.LIKE, ClickHouseParser.LIMIT, ClickHouseParser.LIVE, ClickHouseParser.LOCAL, ClickHouseParser.LOGS, ClickHouseParser.MATERIALIZE, ClickHouseParser.MATERIALIZED, ClickHouseParser.MAX, ClickHouseParser.MERGES, ClickHouseParser.MIN, ClickHouseParser.MINUTE, ClickHouseParser.MODIFY, ClickHouseParser.MONTH, ClickHouseParser.MOVE, ClickHouseParser.MUTATION, ClickHouseParser.NO, ClickHouseParser.NOT, ClickHouseParser.NULLS, ClickHouseParser.OFFSET, ClickHouseParser.ON, ClickHouseParser.OPTIMIZE, ClickHouseParser.OR, ClickHouseParser.ORDER, ClickHouseParser.OUTER, ClickHouseParser.OUTFILE, ClickHouseParser.OVER, ClickHouseParser.PARTITION, ClickHouseParser.POPULATE, ClickHouseParser.PRECEDING, ClickHouseParser.PREWHERE, ClickHouseParser.PRIMARY, ClickHouseParser.QUARTER, ClickHouseParser.RANGE, ClickHouseParser.RELOAD, ClickHouseParser.REMOVE, ClickHouseParser.RENAME, ClickHouseParser.REPLACE, ClickHouseParser.REPLICA, ClickHouseParser.REPLICATED, ClickHouseParser.RIGHT, ClickHouseParser.ROLLUP, ClickHouseParser.ROW, ClickHouseParser.ROWS, ClickHouseParser.SAMPLE, ClickHouseParser.SECOND, ClickHouseParser.SELECT, ClickHouseParser.SEMI, ClickHouseParser.SENDS, ClickHouseParser.SET, ClickHouseParser.SETTINGS, ClickHouseParser.SHOW, ClickHouseParser.SOURCE, ClickHouseParser.START, ClickHouseParser.STOP, ClickHouseParser.SUBSTRING, ClickHouseParser.SYNC, ClickHouseParser.SYNTAX, ClickHouseParser.SYSTEM, ClickHouseParser.TABLE, ClickHouseParser.TABLES, ClickHouseParser.TEMPORARY, ClickHouseParser.TEST, ClickHouseParser.THEN, ClickHouseParser.TIES, ClickHouseParser.TIMEOUT, ClickHouseParser.TIMESTAMP, ClickHouseParser.TO, ClickHouseParser.TOP, ClickHouseParser.TOTALS, ClickHouseParser.TRAILING, ClickHouseParser.TRIM, ClickHouseParser.TRUNCATE, ClickHouseParser.TTL, ClickHouseParser.TYPE, ClickHouseParser.UNBOUNDED, ClickHouseParser.UNION, ClickHouseParser.UPDATE, ClickHouseParser.USE, ClickHouseParser.USING, ClickHouseParser.UUID, ClickHouseParser.VALUES, ClickHouseParser.VIEW, ClickHouseParser.VOLUME, ClickHouseParser.WATCH, ClickHouseParser.WEEK, ClickHouseParser.WHEN, ClickHouseParser.WHERE, ClickHouseParser.WINDOW, ClickHouseParser.WITH, ClickHouseParser.YEAR, ClickHouseParser.JSON_FALSE, ClickHouseParser.JSON_TRUE, ClickHouseParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2007
                self.identifier()
                pass
            elif token in [ClickHouseParser.NULL_SQL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2008
                self.match(ClickHouseParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = ClickHouseParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(ClickHouseParser.STRING_LITERAL)
            self.state = 2012
            self.match(ClickHouseParser.EQ_SINGLE)
            self.state = 2013
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[73] = self.joinExpr_sempred
        self._predicates[100] = self.columnExpr_sempred
        self._predicates[106] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




