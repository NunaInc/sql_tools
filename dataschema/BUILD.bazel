#
# nuna_sql_tools: Copyright 2022 Nuna Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
package(default_visibility = ["//visibility:public"])

load("@rules_cc//cc:defs.bzl", "cc_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@com_google_protobuf//:protobuf.bzl", "py_proto_library")
load(
    "@bazel_pylint//:pyrules.bzl",
    "py_lint_binary",
    "py_lint_library",
    "py_lint_test",
)
load("@nuna_sql_tools_pip_deps//:requirements.bzl", "requirement")

proto_library(
    name = "SchemaProto",
    srcs = ["Schema.proto"],
    deps = ["@com_google_protobuf//:descriptor_proto"],
)

cc_proto_library(
    name = "SchemaProto_cc",
    deps = [":SchemaProto"],
)

py_proto_library(
    name = "SchemaProto_py",
    srcs = ["Schema.proto"],
    deps = ["@com_google_protobuf//:protobuf_python"],
)

py_lint_library(
    name = "synthgen",
    srcs = ["synthgen.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    visibility = ["//visibility:public"],
    deps = [
        requirement("Faker"),
    ],
)

py_lint_test(
    name = "synthgen_test",
    timeout = "short",
    srcs = ["synthgen_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":synthgen",
        requirement("numpy"),
    ],
)

py_lint_library(
    name = "dataschema",
    srcs = [
        "Schema.py",
        "annotations.py",
        "entity.py",
        "parquet2schema.py",
        "proto2schema.py",
        "python2schema.py",
        "schema2dbml.py",
        "schema2pandas.py",
        "schema2parquet.py",
        "schema2python.py",
        "schema2scala.py",
        "schema2sql.py",
        "schema2sqlalchemy.py",
        "schema_types.py",
        "strutil.py",
    ],
    rules = "//:pylintrc",
    # Pylint-ing this may cause a blocking on Linux in certain package
    # configuration, because of the protobuf usage - we skip from linting.
    skip_srcs = ["proto2schema.py"],
    srcs_version = "PY3",
    deps = [
        ":SchemaProto_py",
        ":synthgen",
        requirement("pandas"),
        requirement("protobuf"),
        requirement("pyarrow"),
        requirement("SQLAlchemy"),
    ],
)

py_proto_library(
    name = "schema_test_py",
    srcs = ["schema_test.proto"],
    deps = [
        ":SchemaProto_py",
        "@com_google_protobuf//:protobuf_python",
    ],
)

py_proto_library(
    name = "schema_test_bad_py",
    srcs = ["schema_test_bad.proto"],
    deps = [
        ":SchemaProto_py",
        "@com_google_protobuf//:protobuf_python",
    ],
)

py_proto_library(
    name = "schema_example_py",
    srcs = ["schema_example.proto"],
    deps = [
        ":SchemaProto_py",
        "@com_google_protobuf//:protobuf_python",
    ],
)

py_lint_library(
    name = "schema_test_data",
    testonly = True,
    srcs = ["schema_test_data.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
    ],
)

py_lint_library(
    name = "schema_example",
    testonly = True,
    srcs = ["schema_example.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
    ],
)

py_lint_test(
    name = "schema_test",
    timeout = "short",
    srcs = ["schema_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_example",
        ":schema_example_py",
        ":schema_test_bad_py",
        ":schema_test_data",
        ":schema_test_py",
    ],
)

py_lint_test(
    name = "dbml_test",
    timeout = "short",
    srcs = ["dbml_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_example",
        ":schema_test_data",
    ],
)

py_lint_test(
    name = "alchemy_test",
    timeout = "short",
    srcs = ["alchemy_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_example",
        ":schema_test_data",
    ],
)

py_lint_test(
    name = "parquet_test",
    timeout = "short",
    srcs = ["parquet_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_example",
        ":schema_test_data",
    ],
)

py_lint_test(
    name = "pandas_test",
    timeout = "short",
    srcs = ["pandas_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_test_data",
        requirement("pandas"),
    ],
)

py_lint_test(
    name = "compare_test",
    timeout = "short",
    srcs = ["compare_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
    ],
)

py_lint_library(
    name = "data_writer",
    srcs = ["data_writer.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        requirement("pyarrow"),
    ],
)

py_lint_library(
    name = "schema_synth",
    srcs = ["schema_synth.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":data_writer",
        ":dataschema",
        ":synthgen",
        requirement("numpy"),
    ],
)

py_lint_library(
    name = "schema_synth_generator",
    srcs = ["schema_synth_generator.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":data_writer",
        ":schema_synth",
        requirement("absl-py"),
    ],
)

py_lint_test(
    name = "schema_synth_test",
    timeout = "short",
    srcs = ["schema_synth_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":schema_synth",
        ":schema_test_data",
        ":synthgen",
        requirement("numpy"),
    ],
)

py_lint_test(
    name = "data_writer_test",
    timeout = "short",
    srcs = ["data_writer_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":data_writer",
        ":schema_synth",
        requirement("pandas"),
    ],
)

py_lint_test(
    name = "createsql2schema_test",
    timeout = "short",
    srcs = ["createsql2schema_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_test_data",
        "//sql_analyze/grammars/ClickHouse:parse_lib",
    ],
)

py_lint_test(
    name = "schema2python_test",
    timeout = "short",
    srcs = ["schema2python_test.py"],
    rules = "//:pylintrc",
    srcs_version = "PY3",
    deps = [
        ":dataschema",
        ":schema_test_data",
    ],
)
